; Listing generated by Microsoft (R) Optimizing Compiler Version 19.31.31107.0 

	TITLE	c:\cpython\externals\zlib-1.2.11\contrib\vstudio\vc14\x86\zlibdllrelease\tmp\infback.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@PJCBIDD@invalid?5block?5type@		; `string'
PUBLIC	??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@ ; `string'
PUBLIC	??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@ ; `string'
PUBLIC	??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@	; `string'
PUBLIC	??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@ ; `string'
PUBLIC	??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@ ; `string'
PUBLIC	??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@ ; `string'
PUBLIC	??_C@_0BG@GMDFCBGP@invalid?5distances?5set@	; `string'
PUBLIC	??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@ ; `string'
PUBLIC	??_C@_0BG@LBKINIKP@invalid?5distance?5code@	; `string'
PUBLIC	??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@ ; `string'
EXTRN	_inflate_fast:PROC
;	COMDAT ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@
CONST	SEGMENT
??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@ DB 'invalid distanc'
	DB	'e too far back', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LBKINIKP@invalid?5distance?5code@
CONST	SEGMENT
??_C@_0BG@LBKINIKP@invalid?5distance?5code@ DB 'invalid distance code', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@
CONST	SEGMENT
??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@ DB 'invalid literal/le'
	DB	'ngth code', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GMDFCBGP@invalid?5distances?5set@
CONST	SEGMENT
??_C@_0BG@GMDFCBGP@invalid?5distances?5set@ DB 'invalid distances set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@
CONST	SEGMENT
??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@ DB 'invalid literal/le'
	DB	'ngths set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@
CONST	SEGMENT
??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@ DB 'invalid c'
	DB	'ode -- missing end-of-block', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@
CONST	SEGMENT
??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@ DB 'invalid bit length r'
	DB	'epeat', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@
CONST	SEGMENT
??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@ DB 'invalid code lengths '
	DB	'set', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@
CONST	SEGMENT
??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@ DB 'too many len'
	DB	'gth or distance symbols', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@
CONST	SEGMENT
??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@ DB 'invalid stored bl'
	DB	'ock lengths', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PJCBIDD@invalid?5block?5type@
CONST	SEGMENT
??_C@_0BD@PJCBIDD@invalid?5block?5type@ DB 'invalid block type', 00H ; `string'
?lenfix@?1??fixedtables@@9@9 DB 060H			; `fixedtables'::`2'::lenfix
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c0H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a0H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e0H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	090H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d0H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b0H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f0H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c8H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a8H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e8H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	098H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d8H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b8H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f8H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c4H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a4H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e4H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	094H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d4H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b4H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f4H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0ccH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0acH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0ecH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09cH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0dcH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bcH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fcH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c2H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a2H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e2H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	092H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d2H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b2H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f2H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0caH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0aaH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0eaH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09aH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0daH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0baH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0faH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c6H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a6H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e6H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	096H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d6H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b6H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f6H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0ceH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0aeH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0eeH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09eH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0deH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0beH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0feH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c1H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a1H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e1H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	091H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d1H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b1H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f1H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c9H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a9H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e9H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	099H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d9H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b9H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f9H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c5H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a5H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e5H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	095H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d5H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b5H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f5H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0cdH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0adH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0edH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09dH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0ddH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bdH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fdH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c3H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a3H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e3H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	093H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d3H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b3H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f3H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0cbH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0abH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0ebH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09bH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0dbH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0bbH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0fbH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c7H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a7H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e7H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	097H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d7H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b7H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f7H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0cfH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0afH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0efH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09fH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0dfH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0bfH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0ffH
?distfix@?1??fixedtables@@9@9 DB 010H			; `fixedtables'::`2'::distfix
	DB	05H
	DW	01H
	DB	017H
	DB	05H
	DW	0101H
	DB	013H
	DB	05H
	DW	011H
	DB	01bH
	DB	05H
	DW	01001H
	DB	011H
	DB	05H
	DW	05H
	DB	019H
	DB	05H
	DW	0401H
	DB	015H
	DB	05H
	DW	041H
	DB	01dH
	DB	05H
	DW	04001H
	DB	010H
	DB	05H
	DW	03H
	DB	018H
	DB	05H
	DW	0201H
	DB	014H
	DB	05H
	DW	021H
	DB	01cH
	DB	05H
	DW	02001H
	DB	012H
	DB	05H
	DW	09H
	DB	01aH
	DB	05H
	DW	0801H
	DB	016H
	DB	05H
	DW	081H
	DB	040H
	DB	05H
	DW	00H
	DB	010H
	DB	05H
	DW	02H
	DB	017H
	DB	05H
	DW	0181H
	DB	013H
	DB	05H
	DW	019H
	DB	01bH
	DB	05H
	DW	01801H
	DB	011H
	DB	05H
	DW	07H
	DB	019H
	DB	05H
	DW	0601H
	DB	015H
	DB	05H
	DW	061H
	DB	01dH
	DB	05H
	DW	06001H
	DB	010H
	DB	05H
	DW	04H
	DB	018H
	DB	05H
	DW	0301H
	DB	014H
	DB	05H
	DW	031H
	DB	01cH
	DB	05H
	DW	03001H
	DB	012H
	DB	05H
	DW	0dH
	DB	01aH
	DB	05H
	DW	0c01H
	DB	016H
	DB	05H
	DW	0c1H
	DB	040H
	DB	05H
	DW	00H
?order@?1??inflateBack@@9@9 DW 010H			; `inflateBack'::`2'::order
	DW	011H
	DW	012H
	DW	00H
	DW	08H
	DW	07H
	DW	09H
	DW	06H
	DW	0aH
	DW	05H
	DW	0bH
	DW	04H
	DW	0cH
	DW	03H
	DW	0dH
	DW	02H
	DW	0eH
	DW	01H
	DW	0fH
PUBLIC	_inflateBackEnd@4
PUBLIC	_inflateBack@20
PUBLIC	_inflateBackInit_@20
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\infback.c
;	COMDAT _inflateBackInit_@20
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_windowBits$ = 12					; size = 4
_window$ = 16						; size = 4
_version$ = 20						; size = 4
_stream_size$ = 24					; size = 4
_inflateBackInit_@20 PROC				; COMDAT

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 35   :     struct inflate_state FAR *state;
; 36   : 
; 37   :     if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||

  00003	8b 45 14	 mov	 eax, DWORD PTR _version$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  0000a	85 c0		 test	 eax, eax
  0000c	0f 84 c4 00 00
	00		 je	 $LN3@inflateBac
  00012	80 38 31	 cmp	 BYTE PTR [eax], 49	; 00000031H
  00015	0f 85 bb 00 00
	00		 jne	 $LN3@inflateBac
  0001b	83 7d 18 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  0001f	0f 85 b1 00 00
	00		 jne	 $LN3@inflateBac

; 40   :     if (strm == Z_NULL || window == Z_NULL ||
; 41   :         windowBits < 8 || windowBits > 15)

  00025	53		 push	 ebx
  00026	57		 push	 edi
  00027	85 f6		 test	 esi, esi
  00029	0f 84 9b 00 00
	00		 je	 $LN5@inflateBac
  0002f	8b 5d 10	 mov	 ebx, DWORD PTR _window$[ebp]
  00032	85 db		 test	 ebx, ebx
  00034	0f 84 90 00 00
	00		 je	 $LN5@inflateBac
  0003a	8b 7d 0c	 mov	 edi, DWORD PTR _windowBits$[ebp]
  0003d	8d 47 f8	 lea	 eax, DWORD PTR [edi-8]
  00040	83 f8 07	 cmp	 eax, 7
  00043	0f 87 81 00 00
	00		 ja	 $LN5@inflateBac

; 43   :     strm->msg = Z_NULL;                 /* in case we return an error */
; 44   :     if (strm->zalloc == (alloc_func)0) {

  00049	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0004c	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00053	85 c0		 test	 eax, eax
  00055	75 13		 jne	 SHORT $LN10@inflateBac

; 45   : #ifdef Z_SOLO
; 46   :         return Z_STREAM_ERROR;
; 47   : #else
; 48   :         strm->zalloc = zcalloc;
; 49   :         strm->opaque = (voidpf)0;

  00057	89 46 28	 mov	 DWORD PTR [esi+40], eax
  0005a	33 c9		 xor	 ecx, ecx
  0005c	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], OFFSET _zcalloc
  00063	b8 00 00 00 00	 mov	 eax, OFFSET _zcalloc
  00068	eb 03		 jmp	 SHORT $LN6@inflateBac
$LN10@inflateBac:
  0006a	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
$LN6@inflateBac:

; 50   : #endif
; 51   :     }
; 52   :     if (strm->zfree == (free_func)0)

  0006d	83 7e 24 00	 cmp	 DWORD PTR [esi+36], 0
  00071	75 07		 jne	 SHORT $LN7@inflateBac

; 53   : #ifdef Z_SOLO
; 54   :         return Z_STREAM_ERROR;
; 55   : #else
; 56   :     strm->zfree = zcfree;

  00073	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], OFFSET _zcfree
$LN7@inflateBac:

; 57   : #endif
; 58   :     state = (struct inflate_state FAR *)ZALLOC(strm, 1,

  0007a	68 d0 1b 00 00	 push	 7120			; 00001bd0H
  0007f	6a 01		 push	 1
  00081	51		 push	 ecx
  00082	ff d0		 call	 eax
  00084	8b d0		 mov	 edx, eax
  00086	83 c4 0c	 add	 esp, 12			; 0000000cH

; 59   :                                                sizeof(struct inflate_state));
; 60   :     if (state == Z_NULL) return Z_MEM_ERROR;

  00089	85 d2		 test	 edx, edx
  0008b	75 0a		 jne	 SHORT $LN8@inflateBac
  0008d	5f		 pop	 edi
  0008e	5b		 pop	 ebx
  0008f	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00092	5e		 pop	 esi

; 70   : }

  00093	5d		 pop	 ebp
  00094	c2 14 00	 ret	 20			; 00000014H
$LN8@inflateBac:

; 61   :     Tracev((stderr, "inflate: allocated\n"));
; 62   :     strm->state = (struct internal_state FAR *)state;

  00097	89 56 1c	 mov	 DWORD PTR [esi+28], edx

; 63   :     state->dmax = 32768U;
; 64   :     state->wbits = (uInt)windowBits;
; 65   :     state->wsize = 1U << windowBits;

  0009a	8b cf		 mov	 ecx, edi
  0009c	89 7a 28	 mov	 DWORD PTR [edx+40], edi
  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	5f		 pop	 edi
  000a5	d3 e0		 shl	 eax, cl

; 66   :     state->window = window;

  000a7	89 5a 38	 mov	 DWORD PTR [edx+56], ebx
  000aa	5b		 pop	 ebx
  000ab	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 67   :     state->wnext = 0;
; 68   :     state->whave = 0;
; 69   :     return Z_OK;

  000ae	33 c0		 xor	 eax, eax
  000b0	c7 42 18 00 80
	00 00		 mov	 DWORD PTR [edx+24], 32768 ; 00008000H
  000b7	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0
  000be	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0
  000c5	5e		 pop	 esi

; 70   : }

  000c6	5d		 pop	 ebp
  000c7	c2 14 00	 ret	 20			; 00000014H
$LN5@inflateBac:
  000ca	5f		 pop	 edi
  000cb	5b		 pop	 ebx

; 42   :         return Z_STREAM_ERROR;

  000cc	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000d1	5e		 pop	 esi

; 70   : }

  000d2	5d		 pop	 ebp
  000d3	c2 14 00	 ret	 20			; 00000014H
$LN3@inflateBac:

; 38   :         stream_size != (int)(sizeof(z_stream)))
; 39   :         return Z_VERSION_ERROR;

  000d6	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH
  000db	5e		 pop	 esi

; 70   : }

  000dc	5d		 pop	 ebp
  000dd	c2 14 00	 ret	 20			; 00000014H
_inflateBackInit_@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\infback.c
;	COMDAT _fixedtables
_TEXT	SEGMENT
_fixedtables PROC					; COMDAT
; _state$ = ecx

; 85   : #ifdef BUILDFIXED
; 86   :     static int virgin = 1;
; 87   :     static code *lenfix, *distfix;
; 88   :     static code fixed[544];
; 89   : 
; 90   :     /* build fixed huffman tables if first call (may not be thread safe) */
; 91   :     if (virgin) {
; 92   :         unsigned sym, bits;
; 93   :         static code *next;
; 94   : 
; 95   :         /* literal/length table */
; 96   :         sym = 0;
; 97   :         while (sym < 144) state->lens[sym++] = 8;
; 98   :         while (sym < 256) state->lens[sym++] = 9;
; 99   :         while (sym < 280) state->lens[sym++] = 7;
; 100  :         while (sym < 288) state->lens[sym++] = 8;
; 101  :         next = fixed;
; 102  :         lenfix = next;
; 103  :         bits = 9;
; 104  :         inflate_table(LENS, state->lens, 288, &(next), &(bits), state->work);
; 105  : 
; 106  :         /* distance table */
; 107  :         sym = 0;
; 108  :         while (sym < 32) state->lens[sym++] = 5;
; 109  :         distfix = next;
; 110  :         bits = 5;
; 111  :         inflate_table(DISTS, state->lens, 32, &(next), &(bits), state->work);
; 112  : 
; 113  :         /* do this just once */
; 114  :         virgin = 0;
; 115  :     }
; 116  : #else /* !BUILDFIXED */
; 117  : #   include "inffixed.h"
; 118  : #endif /* BUILDFIXED */
; 119  :     state->lencode = lenfix;

  00000	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], OFFSET ?lenfix@?1??fixedtables@@9@9

; 120  :     state->lenbits = 9;

  00007	c7 41 58 09 00
	00 00		 mov	 DWORD PTR [ecx+88], 9

; 121  :     state->distcode = distfix;

  0000e	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], OFFSET ?distfix@?1??fixedtables@@9@9

; 122  :     state->distbits = 5;

  00015	c7 41 5c 05 00
	00 00		 mov	 DWORD PTR [ecx+92], 5

; 123  : }

  0001c	c3		 ret	 0
_fixedtables ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\infback.c
;	COMDAT _inflateBack@20
_TEXT	SEGMENT
$T1 = -40						; size = 4
$T2 = -40						; size = 4
_copy$3$ = -40						; size = 4
tv3484 = -40						; size = 4
tv3447 = -40						; size = 4
tv3445 = -40						; size = 4
tv3443 = -40						; size = 4
_bits$1$ = -36						; size = 4
tv3483 = -36						; size = 4
tv3477 = -36						; size = 4
tv3448 = -36						; size = 4
tv3429 = -36						; size = 4
tv3427 = -32						; size = 4
tv3386 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -28						; size = 4
tv3378 = -28						; size = 4
tv3351 = -28						; size = 4
tv3350 = -28						; size = 4
_put$1$ = -24						; size = 4
_left$1$ = -20						; size = 4
$T5 = -16						; size = 4
$T6 = -16						; size = 4
$T7 = -16						; size = 4
_next$6$ = -16						; size = 4
tv3444 = -16						; size = 4
tv3381 = -16						; size = 4
tv3377 = -16						; size = 4
tv3376 = -16						; size = 4
tv3338 = -16						; size = 4
tv3337 = -16						; size = 4
_hold$1$ = -12						; size = 4
tv3446 = -12						; size = 4
_state$1$ = -8						; size = 4
_next$ = -4						; size = 4
_strm$ = 8						; size = 4
_in$ = 12						; size = 4
_in_desc$ = 16						; size = 4
_out$ = 20						; size = 4
_out_desc$ = 24						; size = 4
_inflateBack@20 PROC					; COMDAT

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 257  :     struct inflate_state FAR *state;
; 258  :     z_const unsigned char FAR *next;    /* next input */
; 259  :     unsigned char FAR *put;     /* next output */
; 260  :     unsigned have, left;        /* available input and output */
; 261  :     unsigned long hold;         /* bit buffer */
; 262  :     unsigned bits;              /* bits in bit buffer */
; 263  :     unsigned copy;              /* number of stored or match bytes to copy */
; 264  :     unsigned char FAR *from;    /* where to copy match bytes from */
; 265  :     code here;                  /* current decoding table entry */
; 266  :     code last;                  /* parent table entry */
; 267  :     unsigned len;               /* length to copy for repeats, bits to drop */
; 268  :     int ret;                    /* return code */
; 269  :     static const unsigned short order[19] = /* permutation of code lengths */
; 270  :         {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 271  : 
; 272  :     /* Check that the strm exists and that the state was initialized */
; 273  :     if (strm == Z_NULL || strm->state == Z_NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00006	83 ec 28	 sub	 esp, 40			; 00000028H
  00009	85 c0		 test	 eax, eax
  0000b	0f 84 54 0d 00
	00		 je	 $LN254@inflateBac
  00011	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00014	89 4d f8	 mov	 DWORD PTR _state$1$[ebp], ecx
  00017	85 c9		 test	 ecx, ecx
  00019	0f 84 46 0d 00
	00		 je	 $LN254@inflateBac

; 275  :     state = (struct inflate_state FAR *)strm->state;
; 276  : 
; 277  :     /* Reset the state */
; 278  :     strm->msg = Z_NULL;

  0001f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
  00026	53		 push	 ebx

; 279  :     state->mode = TYPE;

  00027	c7 41 04 3f 3f
	00 00		 mov	 DWORD PTR [ecx+4], 16191 ; 00003f3fH

; 280  :     state->last = 0;

  0002e	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 281  :     state->whave = 0;

  00035	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 282  :     next = strm->next_in;

  0003c	8b 10		 mov	 edx, DWORD PTR [eax]
  0003e	89 55 f0	 mov	 DWORD PTR _next$6$[ebp], edx
  00041	89 55 fc	 mov	 DWORD PTR _next$[ebp], edx
  00044	56		 push	 esi
  00045	57		 push	 edi
  00046	85 d2		 test	 edx, edx

; 283  :     have = next != Z_NULL ? strm->avail_in : 0;

  00048	74 05		 je	 SHORT $LN343@inflateBac
  0004a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0004d	eb 02		 jmp	 SHORT $LN344@inflateBac
$LN343@inflateBac:
  0004f	33 f6		 xor	 esi, esi
$LN344@inflateBac:

; 284  :     hold = 0;
; 285  :     bits = 0;
; 286  :     put = state->window;

  00051	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  00054	33 ff		 xor	 edi, edi
  00056	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  00059	33 db		 xor	 ebx, ebx

; 287  :     left = state->wsize;

  0005b	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0005e	89 45 ec	 mov	 DWORD PTR _left$1$[ebp], eax

; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  00061	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00064	2d 3f 3f 00 00	 sub	 eax, 16191		; 00003f3fH
  00069	83 f8 12	 cmp	 eax, 18			; 00000012H
  0006c	0f 87 5c 0c 00
	00		 ja	 $LN341@inflateBac
  00072	8b 55 f0	 mov	 edx, DWORD PTR _next$6$[ebp]
  00075	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL2@inflateBac:
  00080	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN481@inflateBac[eax]
  00087	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN482@inflateBac[eax*4]
$LN255@inflateBac:

; 292  :         case TYPE:
; 293  :             /* determine and dispatch block type */
; 294  :             if (state->last) {

  0008e	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00092	74 18		 je	 SHORT $LN12@inflateBac

; 295  :                 BYTEBITS();

  00094	8b cb		 mov	 ecx, ebx
  00096	83 e1 07	 and	 ecx, 7
  00099	d3 ef		 shr	 edi, cl
  0009b	2b d9		 sub	 ebx, ecx

; 296  :                 state->mode = DONE;

  0009d	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  000a0	c7 41 04 50 3f
	00 00		 mov	 DWORD PTR [ecx+4], 16208 ; 00003f50H

; 297  :                 break;

  000a7	e9 0b 0c 00 00	 jmp	 $LN500@inflateBac
$LN12@inflateBac:

; 298  :             }
; 299  :             NEEDBITS(3);

  000ac	83 fb 03	 cmp	 ebx, 3
  000af	73 37		 jae	 SHORT $LN10@inflateBac
$LL13@inflateBac:
  000b1	85 f6		 test	 esi, esi
  000b3	75 1a		 jne	 SHORT $LN18@inflateBac
  000b5	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  000b8	50		 push	 eax
  000b9	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  000bc	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  000bf	8b f0		 mov	 esi, eax
  000c1	83 c4 08	 add	 esp, 8
  000c4	85 f6		 test	 esi, esi
  000c6	0f 84 1d 0c 00
	00		 je	 $LN369@inflateBac
  000cc	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
$LN18@inflateBac:
  000cf	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  000d2	8b cb		 mov	 ecx, ebx
  000d4	d3 e0		 shl	 eax, cl
  000d6	42		 inc	 edx
  000d7	83 c3 08	 add	 ebx, 8
  000da	89 55 fc	 mov	 DWORD PTR _next$[ebp], edx
  000dd	4e		 dec	 esi
  000de	03 f8		 add	 edi, eax
  000e0	83 fb 03	 cmp	 ebx, 3
  000e3	72 cc		 jb	 SHORT $LL13@inflateBac
  000e5	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
$LN10@inflateBac:

; 300  :             state->last = BITS(1);

  000e8	8b c7		 mov	 eax, edi

; 301  :             DROPBITS(1);

  000ea	d1 ef		 shr	 edi, 1
  000ec	83 e0 01	 and	 eax, 1
  000ef	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 302  :             switch (BITS(2)) {

  000f2	8b c7		 mov	 eax, edi
  000f4	83 e0 03	 and	 eax, 3
  000f7	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN483@inflateBac[eax*4]
$LN259@inflateBac:

; 322  :             }
; 323  :             DROPBITS(2);

  000fe	c1 ef 02	 shr	 edi, 2
  00101	83 eb 03	 sub	 ebx, 3
  00104	c7 41 04 41 3f
	00 00		 mov	 DWORD PTR [ecx+4], 16193 ; 00003f41H

; 324  :             break;

  0010b	e9 a7 0b 00 00	 jmp	 $LN500@inflateBac
$LN260@inflateBac:

; 303  :             case 0:                             /* stored block */
; 304  :                 Tracev((stderr, "inflate:     stored block%s\n",
; 305  :                         state->last ? " (last)" : ""));
; 306  :                 state->mode = STORED;
; 307  :                 break;
; 308  :             case 1:                             /* fixed block */
; 309  :                 fixedtables(state);

  00110	e8 00 00 00 00	 call	 _fixedtables

; 322  :             }
; 323  :             DROPBITS(2);

  00115	c1 ef 02	 shr	 edi, 2
  00118	83 eb 03	 sub	 ebx, 3
  0011b	c7 41 04 48 3f
	00 00		 mov	 DWORD PTR [ecx+4], 16200 ; 00003f48H

; 324  :             break;

  00122	e9 90 0b 00 00	 jmp	 $LN500@inflateBac
$LN261@inflateBac:

; 322  :             }
; 323  :             DROPBITS(2);

  00127	c1 ef 02	 shr	 edi, 2
  0012a	83 eb 03	 sub	 ebx, 3
  0012d	c7 41 04 44 3f
	00 00		 mov	 DWORD PTR [ecx+4], 16196 ; 00003f44H

; 324  :             break;

  00134	e9 7e 0b 00 00	 jmp	 $LN500@inflateBac
$LN262@inflateBac:

; 310  :                 Tracev((stderr, "inflate:     fixed codes block%s\n",
; 311  :                         state->last ? " (last)" : ""));
; 312  :                 state->mode = LEN;              /* decode codes */
; 313  :                 break;
; 314  :             case 2:                             /* dynamic block */
; 315  :                 Tracev((stderr, "inflate:     dynamic codes block%s\n",
; 316  :                         state->last ? " (last)" : ""));
; 317  :                 state->mode = TABLE;
; 318  :                 break;
; 319  :             case 3:
; 320  :                 strm->msg = (char *)"invalid block type";

  00139	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0013c	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BD@PJCBIDD@invalid?5block?5type@

; 321  :                 state->mode = BAD;

  00143	c7 41 04 51 3f
	00 00		 mov	 DWORD PTR [ecx+4], 16209 ; 00003f51H
$LN28@inflateBac:

; 322  :             }
; 323  :             DROPBITS(2);

  0014a	c1 ef 02	 shr	 edi, 2
  0014d	83 eb 03	 sub	 ebx, 3

; 324  :             break;

  00150	e9 62 0b 00 00	 jmp	 $LN500@inflateBac
$LN31@inflateBac:

; 325  : 
; 326  :         case STORED:
; 327  :             /* get and verify stored block length */
; 328  :             BYTEBITS();                         /* go to byte boundary */

  00155	8b cb		 mov	 ecx, ebx
  00157	83 e1 07	 and	 ecx, 7
  0015a	2b d9		 sub	 ebx, ecx
  0015c	d3 ef		 shr	 edi, cl

; 329  :             NEEDBITS(32);

  0015e	83 fb 20	 cmp	 ebx, 32			; 00000020H
  00161	73 34		 jae	 SHORT $LN32@inflateBac
$LL35@inflateBac:
  00163	85 f6		 test	 esi, esi
  00165	75 1a		 jne	 SHORT $LN40@inflateBac
  00167	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  0016a	50		 push	 eax
  0016b	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0016e	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00171	8b f0		 mov	 esi, eax
  00173	83 c4 08	 add	 esp, 8
  00176	85 f6		 test	 esi, esi
  00178	0f 84 6b 0b 00
	00		 je	 $LN369@inflateBac
  0017e	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
$LN40@inflateBac:
  00181	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00184	8b cb		 mov	 ecx, ebx
  00186	d3 e0		 shl	 eax, cl
  00188	42		 inc	 edx
  00189	83 c3 08	 add	 ebx, 8
  0018c	89 55 fc	 mov	 DWORD PTR _next$[ebp], edx
  0018f	4e		 dec	 esi
  00190	03 f8		 add	 edi, eax
  00192	83 fb 20	 cmp	 ebx, 32			; 00000020H
  00195	72 cc		 jb	 SHORT $LL35@inflateBac
$LN32@inflateBac:

; 330  :             if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {

  00197	8b c7		 mov	 eax, edi
  00199	0f b7 cf	 movzx	 ecx, di
  0019c	f7 d0		 not	 eax
  0019e	89 4d d8	 mov	 DWORD PTR $T2[ebp], ecx
  001a1	c1 e8 10	 shr	 eax, 16			; 00000010H
  001a4	3b c8		 cmp	 ecx, eax
  001a6	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  001a9	74 16		 je	 SHORT $LN266@inflateBac

; 331  :                 strm->msg = (char *)"invalid stored block lengths";

  001ab	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  001ae	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@

; 332  :                 state->mode = BAD;

  001b5	c7 41 04 51 3f
	00 00		 mov	 DWORD PTR [ecx+4], 16209 ; 00003f51H

; 333  :                 break;

  001bc	e9 f6 0a 00 00	 jmp	 $LN500@inflateBac
$LN266@inflateBac:

; 334  :             }
; 335  :             state->length = (unsigned)hold & 0xffff;

  001c1	8b 7d d8	 mov	 edi, DWORD PTR $T2[ebp]

; 336  :             Tracev((stderr, "inflate:       stored length %u\n",
; 337  :                     state->length));
; 338  :             INITBITS();

  001c4	33 c0		 xor	 eax, eax
  001c6	33 db		 xor	 ebx, ebx
  001c8	89 79 44	 mov	 DWORD PTR [ecx+68], edi
  001cb	89 45 f4	 mov	 DWORD PTR _hold$1$[ebp], eax

; 339  : 
; 340  :             /* copy stored block from input to output */
; 341  :             while (state->length != 0) {

  001ce	85 ff		 test	 edi, edi
  001d0	0f 84 91 00 00
	00		 je	 $LN47@inflateBac
  001d6	8b 55 ec	 mov	 edx, DWORD PTR _left$1$[ebp]
  001d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL46@inflateBac:

; 342  :                 copy = state->length;
; 343  :                 PULL();

  001e0	85 f6		 test	 esi, esi
  001e2	75 1d		 jne	 SHORT $LN48@inflateBac
  001e4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  001e7	50		 push	 eax
  001e8	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  001eb	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  001ee	8b f0		 mov	 esi, eax
  001f0	83 c4 08	 add	 esp, 8
  001f3	85 f6		 test	 esi, esi
  001f5	0f 84 ee 0a 00
	00		 je	 $LN369@inflateBac
  001fb	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  001fe	8b 55 ec	 mov	 edx, DWORD PTR _left$1$[ebp]
$LN48@inflateBac:

; 344  :                 ROOM();

  00201	85 d2		 test	 edx, edx
  00203	75 25		 jne	 SHORT $LN51@inflateBac
  00205	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00208	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  0020b	52		 push	 edx
  0020c	50		 push	 eax
  0020d	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00210	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  00213	89 55 ec	 mov	 DWORD PTR _left$1$[ebp], edx
  00216	89 51 30	 mov	 DWORD PTR [ecx+48], edx
  00219	ff 55 14	 call	 DWORD PTR _out$[ebp]
  0021c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021f	85 c0		 test	 eax, eax
  00221	0f 85 dc 0a 00
	00		 jne	 $LN372@inflateBac
  00227	8b 55 ec	 mov	 edx, DWORD PTR _left$1$[ebp]
$LN51@inflateBac:

; 345  :                 if (copy > have) copy = have;
; 346  :                 if (copy > left) copy = left;

  0022a	3b fe		 cmp	 edi, esi
  0022c	8b c6		 mov	 eax, esi
  0022e	0f 46 c7	 cmovbe	 eax, edi

; 347  :                 zmemcpy(put, next, copy);

  00231	8b fa		 mov	 edi, edx
  00233	3b c2		 cmp	 eax, edx
  00235	0f 46 f8	 cmovbe	 edi, eax
  00238	8b 45 e8	 mov	 eax, DWORD PTR _put$1$[ebp]
  0023b	57		 push	 edi
  0023c	ff 75 fc	 push	 DWORD PTR _next$[ebp]
  0023f	50		 push	 eax
  00240	e8 00 00 00 00	 call	 _memcpy

; 348  :                 have -= copy;
; 349  :                 next += copy;
; 350  :                 left -= copy;
; 351  :                 put += copy;
; 352  :                 state->length -= copy;

  00245	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  00248	2b f7		 sub	 esi, edi
  0024a	8b 55 ec	 mov	 edx, DWORD PTR _left$1$[ebp]
  0024d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00250	01 7d fc	 add	 DWORD PTR _next$[ebp], edi
  00253	2b d7		 sub	 edx, edi
  00255	01 7d e8	 add	 DWORD PTR _put$1$[ebp], edi
  00258	29 79 44	 sub	 DWORD PTR [ecx+68], edi
  0025b	8b 79 44	 mov	 edi, DWORD PTR [ecx+68]
  0025e	89 55 ec	 mov	 DWORD PTR _left$1$[ebp], edx
  00261	0f 85 79 ff ff
	ff		 jne	 $LL46@inflateBac
$LN47@inflateBac:

; 353  :             }
; 354  :             Tracev((stderr, "inflate:       stored end\n"));
; 355  :             state->mode = TYPE;

  00267	c7 41 04 3f 3f
	00 00		 mov	 DWORD PTR [ecx+4], 16191 ; 00003f3fH

; 356  :             break;

  0026e	e9 41 0a 00 00	 jmp	 $LN491@inflateBac
$LN56@inflateBac:

; 357  : 
; 358  :         case TABLE:
; 359  :             /* get dynamic table entries descriptor */
; 360  :             NEEDBITS(14);

  00273	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  00276	73 34		 jae	 SHORT $LN54@inflateBac
$LL57@inflateBac:
  00278	85 f6		 test	 esi, esi
  0027a	75 1a		 jne	 SHORT $LN62@inflateBac
  0027c	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  0027f	50		 push	 eax
  00280	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00283	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00286	8b f0		 mov	 esi, eax
  00288	83 c4 08	 add	 esp, 8
  0028b	85 f6		 test	 esi, esi
  0028d	0f 84 56 0a 00
	00		 je	 $LN369@inflateBac
  00293	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
$LN62@inflateBac:
  00296	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00299	8b cb		 mov	 ecx, ebx
  0029b	d3 e0		 shl	 eax, cl
  0029d	42		 inc	 edx
  0029e	83 c3 08	 add	 ebx, 8
  002a1	89 55 fc	 mov	 DWORD PTR _next$[ebp], edx
  002a4	4e		 dec	 esi
  002a5	03 f8		 add	 edi, eax
  002a7	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  002aa	72 cc		 jb	 SHORT $LL57@inflateBac
$LN54@inflateBac:

; 361  :             state->nlen = BITS(5) + 257;

  002ac	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  002af	8b cf		 mov	 ecx, edi

; 362  :             DROPBITS(5);

  002b1	c1 ef 05	 shr	 edi, 5
  002b4	83 e1 1f	 and	 ecx, 31			; 0000001fH

; 363  :             state->ndist = BITS(5) + 1;

  002b7	8b c7		 mov	 eax, edi
  002b9	81 c1 01 01 00
	00		 add	 ecx, 257		; 00000101H
  002bf	83 e0 1f	 and	 eax, 31			; 0000001fH

; 364  :             DROPBITS(5);

  002c2	c1 ef 05	 shr	 edi, 5
  002c5	40		 inc	 eax
  002c6	89 4a 64	 mov	 DWORD PTR [edx+100], ecx
  002c9	89 45 d8	 mov	 DWORD PTR tv3484[ebp], eax

; 365  :             state->ncode = BITS(4) + 4;
; 366  :             DROPBITS(4);

  002cc	83 eb 0e	 sub	 ebx, 14			; 0000000eH
  002cf	89 42 68	 mov	 DWORD PTR [edx+104], eax
  002d2	8b c7		 mov	 eax, edi
  002d4	83 e0 0f	 and	 eax, 15			; 0000000fH
  002d7	c1 ef 04	 shr	 edi, 4
  002da	83 c0 04	 add	 eax, 4
  002dd	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  002e0	89 45 dc	 mov	 DWORD PTR tv3483[ebp], eax
  002e3	89 42 60	 mov	 DWORD PTR [edx+96], eax

; 367  : #ifndef PKZIP_BUG_WORKAROUND
; 368  :             if (state->nlen > 286 || state->ndist > 30) {

  002e6	81 f9 1e 01 00
	00		 cmp	 ecx, 286		; 0000011eH
  002ec	0f 87 fa 04 00
	00		 ja	 $LN277@inflateBac
  002f2	83 7d d8 1e	 cmp	 DWORD PTR tv3484[ebp], 30 ; 0000001eH
  002f6	0f 87 f0 04 00
	00		 ja	 $LN277@inflateBac

; 372  :             }
; 373  : #endif
; 374  :             Tracev((stderr, "inflate:       table sizes ok\n"));
; 375  : 
; 376  :             /* get code length code lengths (not a typo) */
; 377  :             state->have = 0;

  002fc	33 c0		 xor	 eax, eax
  002fe	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0

; 378  :             while (state->have < state->ncode) {

  00305	39 45 dc	 cmp	 DWORD PTR tv3483[ebp], eax
  00308	76 6e		 jbe	 SHORT $LN472@inflateBac
  0030a	66 0f 1f 44 00
	00		 npad	 6
$LL74@inflateBac:

; 379  :                 NEEDBITS(3);

  00310	83 fb 03	 cmp	 ebx, 3
  00313	73 3a		 jae	 SHORT $LN76@inflateBac
  00315	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
$LL79@inflateBac:
  00318	85 f6		 test	 esi, esi
  0031a	75 1a		 jne	 SHORT $LN84@inflateBac
  0031c	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  0031f	50		 push	 eax
  00320	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00323	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00326	8b f0		 mov	 esi, eax
  00328	83 c4 08	 add	 esp, 8
  0032b	85 f6		 test	 esi, esi
  0032d	0f 84 b6 09 00
	00		 je	 $LN369@inflateBac
  00333	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
$LN84@inflateBac:
  00336	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00339	8b cb		 mov	 ecx, ebx
  0033b	d3 e0		 shl	 eax, cl
  0033d	42		 inc	 edx
  0033e	83 c3 08	 add	 ebx, 8
  00341	89 55 fc	 mov	 DWORD PTR _next$[ebp], edx
  00344	4e		 dec	 esi
  00345	03 f8		 add	 edi, eax
  00347	83 fb 03	 cmp	 ebx, 3
  0034a	72 cc		 jb	 SHORT $LL79@inflateBac
  0034c	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN76@inflateBac:

; 380  :                 state->lens[order[state->have++]] = (unsigned short)BITS(3);

  0034f	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00352	8b cf		 mov	 ecx, edi
  00354	83 e1 07	 and	 ecx, 7

; 381  :                 DROPBITS(3);

  00357	c1 ef 03	 shr	 edi, 3
  0035a	83 eb 03	 sub	 ebx, 3
  0035d	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  00360	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflateBack@@9@9[eax*2]
  00368	66 89 4c 42 74	 mov	 WORD PTR [edx+eax*2+116], cx
  0036d	ff 42 6c	 inc	 DWORD PTR [edx+108]
  00370	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00373	3b 42 60	 cmp	 eax, DWORD PTR [edx+96]
  00376	72 98		 jb	 SHORT $LL74@inflateBac
$LN472@inflateBac:

; 382  :             }
; 383  :             while (state->have < 19)

  00378	83 f8 13	 cmp	 eax, 19			; 00000013H
  0037b	73 1e		 jae	 SHORT $LN91@inflateBac
  0037d	0f 1f 00	 npad	 3
$LL90@inflateBac:

; 384  :                 state->lens[order[state->have++]] = 0;

  00380	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflateBack@@9@9[eax*2]
  00388	33 c9		 xor	 ecx, ecx
  0038a	66 89 4c 42 74	 mov	 WORD PTR [edx+eax*2+116], cx
  0038f	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00392	40		 inc	 eax
  00393	89 42 6c	 mov	 DWORD PTR [edx+108], eax
  00396	83 f8 13	 cmp	 eax, 19			; 00000013H
  00399	72 e5		 jb	 SHORT $LL90@inflateBac
$LN91@inflateBac:

; 385  :             state->next = state->codes;

  0039b	8d 82 34 05 00
	00		 lea	 eax, DWORD PTR [edx+1332]

; 386  :             state->lencode = (code const FAR *)(state->next);
; 387  :             state->lenbits = 7;

  003a1	c7 42 58 07 00
	00 00		 mov	 DWORD PTR [edx+88], 7
  003a8	8d 4a 70	 lea	 ecx, DWORD PTR [edx+112]
  003ab	89 42 50	 mov	 DWORD PTR [edx+80], eax
  003ae	89 01		 mov	 DWORD PTR [ecx], eax
  003b0	8d 42 58	 lea	 eax, DWORD PTR [edx+88]
  003b3	89 4d d8	 mov	 DWORD PTR tv3447[ebp], ecx

; 388  :             ret = inflate_table(CODES, state->lens, 19, &(state->next),

  003b6	8d 8a f4 02 00
	00		 lea	 ecx, DWORD PTR [edx+756]
  003bc	51		 push	 ecx
  003bd	89 4d e0	 mov	 DWORD PTR tv3386[ebp], ecx
  003c0	83 c2 74	 add	 edx, 116		; 00000074H
  003c3	8b 4d d8	 mov	 ecx, DWORD PTR tv3447[ebp]
  003c6	50		 push	 eax
  003c7	51		 push	 ecx
  003c8	6a 13		 push	 19			; 00000013H
  003ca	33 c9		 xor	 ecx, ecx
  003cc	89 45 dc	 mov	 DWORD PTR tv3448[ebp], eax
  003cf	e8 00 00 00 00	 call	 _inflate_table

; 389  :                                 &(state->lenbits), state->work);
; 390  :             if (ret) {

  003d4	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  003d7	83 c4 10	 add	 esp, 16			; 00000010H
  003da	85 c0		 test	 eax, eax
  003dc	74 16		 je	 SHORT $LN280@inflateBac

; 391  :                 strm->msg = (char *)"invalid code lengths set";

  003de	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  003e1	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@

; 392  :                 state->mode = BAD;

  003e8	c7 41 04 51 3f
	00 00		 mov	 DWORD PTR [ecx+4], 16209 ; 00003f51H

; 393  :                 break;

  003ef	e9 c3 08 00 00	 jmp	 $LN500@inflateBac
$LN280@inflateBac:

; 394  :             }
; 395  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 396  : 
; 397  :             /* get length and distance code code lengths */
; 398  :             state->have = 0;
; 399  :             while (state->have < state->nlen + state->ndist) {

  003f4	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]
  003f7	c7 41 6c 00 00
	00 00		 mov	 DWORD PTR [ecx+108], 0
  003fe	03 41 64	 add	 eax, DWORD PTR [ecx+100]
  00401	0f 84 91 02 00
	00		 je	 $LN499@inflateBac
  00407	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL92@inflateBac:

; 400  :                 for (;;) {
; 401  :                     here = state->lencode[BITS(state->lenbits)];

  00410	8b 45 dc	 mov	 eax, DWORD PTR tv3448[ebp]
  00413	ba 01 00 00 00	 mov	 edx, 1
  00418	8b 08		 mov	 ecx, DWORD PTR [eax]
  0041a	8b 45 f8	 mov	 eax, DWORD PTR _state$1$[ebp]
  0041d	d3 e2		 shl	 edx, cl
  0041f	4a		 dec	 edx
  00420	23 d7		 and	 edx, edi

; 402  :                     if ((unsigned)(here.bits) <= bits) break;

  00422	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
  00425	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00428	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0042b	8b c8		 mov	 ecx, eax
  0042d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00430	8b d0		 mov	 edx, eax
  00432	c1 ea 08	 shr	 edx, 8
  00435	89 4d f0	 mov	 DWORD PTR $T5[ebp], ecx
  00438	0f b6 ca	 movzx	 ecx, dl
  0043b	89 55 e4	 mov	 DWORD PTR $T4[ebp], edx
  0043e	3b cb		 cmp	 ecx, ebx
  00440	76 68		 jbe	 SHORT $LN489@inflateBac
$LL94@inflateBac:

; 403  :                     PULLBYTE();

  00442	85 f6		 test	 esi, esi
  00444	75 1a		 jne	 SHORT $LN100@inflateBac
  00446	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00449	50		 push	 eax
  0044a	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0044d	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00450	8b f0		 mov	 esi, eax
  00452	83 c4 08	 add	 esp, 8
  00455	85 f6		 test	 esi, esi
  00457	0f 84 8c 08 00
	00		 je	 $LN369@inflateBac
  0045d	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN100@inflateBac:
  00460	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00463	8b cb		 mov	 ecx, ebx
  00465	d3 e0		 shl	 eax, cl
  00467	47		 inc	 edi
  00468	01 45 f4	 add	 DWORD PTR _hold$1$[ebp], eax
  0046b	ba 01 00 00 00	 mov	 edx, 1
  00470	8b 45 dc	 mov	 eax, DWORD PTR tv3448[ebp]
  00473	83 c3 08	 add	 ebx, 8
  00476	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00479	4e		 dec	 esi
  0047a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0047c	8b 45 f8	 mov	 eax, DWORD PTR _state$1$[ebp]
  0047f	d3 e2		 shl	 edx, cl
  00481	4a		 dec	 edx
  00482	23 55 f4	 and	 edx, DWORD PTR _hold$1$[ebp]
  00485	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00488	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0048b	8b c8		 mov	 ecx, eax
  0048d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00490	8b d0		 mov	 edx, eax
  00492	c1 ea 08	 shr	 edx, 8
  00495	89 4d f0	 mov	 DWORD PTR tv3337[ebp], ecx
  00498	0f b6 ca	 movzx	 ecx, dl
  0049b	89 55 e4	 mov	 DWORD PTR $T4[ebp], edx
  0049e	3b cb		 cmp	 ecx, ebx
  004a0	77 a0		 ja	 SHORT $LL94@inflateBac

; 402  :                     if ((unsigned)(here.bits) <= bits) break;

  004a2	8b 4d f0	 mov	 ecx, DWORD PTR tv3337[ebp]
  004a5	0f b7 c9	 movzx	 ecx, cx
  004a8	eb 03		 jmp	 SHORT $LN375@inflateBac
$LN489@inflateBac:
  004aa	8b 4d f0	 mov	 ecx, DWORD PTR $T5[ebp]
$LN375@inflateBac:

; 404  :                 }
; 405  :                 if (here.val < 16) {

  004ad	0f b7 d1	 movzx	 edx, cx
  004b0	89 55 f0	 mov	 DWORD PTR tv3338[ebp], edx
  004b3	8b 55 e4	 mov	 edx, DWORD PTR $T4[ebp]
  004b6	66 83 f9 10	 cmp	 cx, 16			; 00000010H
  004ba	73 2f		 jae	 SHORT $LN284@inflateBac

; 406  :                     DROPBITS(here.bits);

  004bc	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]
  004bf	8a ca		 mov	 cl, dl

; 407  :                     state->lens[state->have++] = here.val;

  004c1	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  004c4	d3 ef		 shr	 edi, cl
  004c6	8b c8		 mov	 ecx, eax
  004c8	c1 e9 08	 shr	 ecx, 8
  004cb	0f b6 c9	 movzx	 ecx, cl
  004ce	2b d9		 sub	 ebx, ecx
  004d0	c1 e8 10	 shr	 eax, 16			; 00000010H
  004d3	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  004d6	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  004d9	66 89 44 4a 74	 mov	 WORD PTR [edx+ecx*2+116], ax
  004de	8b ca		 mov	 ecx, edx
  004e0	ff 41 6c	 inc	 DWORD PTR [ecx+108]
  004e3	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]

; 408  :                 }

  004e6	e9 9b 01 00 00	 jmp	 $LN501@inflateBac
$LN284@inflateBac:

; 409  :                 else {
; 410  :                     if (here.val == 16) {

  004eb	8b 4d f0	 mov	 ecx, DWORD PTR tv3338[ebp]
  004ee	66 83 f9 10	 cmp	 cx, 16			; 00000010H
  004f2	0f 85 83 00 00
	00		 jne	 $LN286@inflateBac

; 411  :                         NEEDBITS(here.bits + 2);

  004f8	c1 e8 08	 shr	 eax, 8
  004fb	0f b6 c8	 movzx	 ecx, al
  004fe	0f b6 c2	 movzx	 eax, dl
  00501	83 c0 02	 add	 eax, 2
  00504	89 4d f0	 mov	 DWORD PTR tv3381[ebp], ecx
  00507	89 45 e4	 mov	 DWORD PTR tv3378[ebp], eax
  0050a	3b d8		 cmp	 ebx, eax
  0050c	73 3a		 jae	 SHORT $LN106@inflateBac
  0050e	66 90		 npad	 2
$LL109@inflateBac:
  00510	85 f6		 test	 esi, esi
  00512	75 1a		 jne	 SHORT $LN114@inflateBac
  00514	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00517	50		 push	 eax
  00518	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0051b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0051e	8b f0		 mov	 esi, eax
  00520	83 c4 08	 add	 esp, 8
  00523	85 f6		 test	 esi, esi
  00525	0f 84 be 07 00
	00		 je	 $LN369@inflateBac
  0052b	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN114@inflateBac:
  0052e	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00531	8b cb		 mov	 ecx, ebx
  00533	d3 e0		 shl	 eax, cl
  00535	47		 inc	 edi
  00536	01 45 f4	 add	 DWORD PTR _hold$1$[ebp], eax
  00539	83 c3 08	 add	 ebx, 8
  0053c	4e		 dec	 esi
  0053d	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00540	3b 5d e4	 cmp	 ebx, DWORD PTR tv3378[ebp]
  00543	72 cb		 jb	 SHORT $LL109@inflateBac
  00545	8b 4d f0	 mov	 ecx, DWORD PTR tv3381[ebp]
$LN106@inflateBac:

; 412  :                         DROPBITS(here.bits);

  00548	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]
  0054b	2b d9		 sub	 ebx, ecx
  0054d	d3 ef		 shr	 edi, cl

; 413  :                         if (state->have == 0) {

  0054f	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  00552	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  00555	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00558	85 c0		 test	 eax, eax
  0055a	0f 84 65 01 00
	00		 je	 $LN380@inflateBac

; 414  :                             strm->msg = (char *)"invalid bit length repeat";
; 415  :                             state->mode = BAD;
; 416  :                             break;
; 417  :                         }
; 418  :                         len = (unsigned)(state->lens[state->have - 1]);
; 419  :                         copy = 3 + BITS(2);
; 420  :                         DROPBITS(2);

  00560	0f b7 44 41 72	 movzx	 eax, WORD PTR [ecx+eax*2+114]
  00565	8b d7		 mov	 edx, edi
  00567	83 e2 03	 and	 edx, 3
  0056a	c1 ef 02	 shr	 edi, 2
  0056d	83 c2 03	 add	 edx, 3
  00570	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax
  00573	83 eb 02	 sub	 ebx, 2

; 421  :                     }

  00576	e9 d0 00 00 00	 jmp	 $LN502@inflateBac
$LN286@inflateBac:

; 422  :                     else if (here.val == 17) {

  0057b	66 83 f9 11	 cmp	 cx, 17			; 00000011H
  0057f	0f b6 cc	 movzx	 ecx, ah
  00582	0f b6 c2	 movzx	 eax, dl
  00585	75 5c		 jne	 SHORT $LN142@inflateBac

; 423  :                         NEEDBITS(here.bits + 3);

  00587	83 c0 03	 add	 eax, 3
  0058a	89 4d f0	 mov	 DWORD PTR tv3377[ebp], ecx
  0058d	89 45 e4	 mov	 DWORD PTR tv3351[ebp], eax
  00590	3b d8		 cmp	 ebx, eax
  00592	73 38		 jae	 SHORT $LN123@inflateBac
$LL126@inflateBac:
  00594	85 f6		 test	 esi, esi
  00596	75 1a		 jne	 SHORT $LN131@inflateBac
  00598	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  0059b	50		 push	 eax
  0059c	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0059f	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  005a2	8b f0		 mov	 esi, eax
  005a4	83 c4 08	 add	 esp, 8
  005a7	85 f6		 test	 esi, esi
  005a9	0f 84 3a 07 00
	00		 je	 $LN369@inflateBac
  005af	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN131@inflateBac:
  005b2	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  005b5	8b cb		 mov	 ecx, ebx
  005b7	d3 e0		 shl	 eax, cl
  005b9	47		 inc	 edi
  005ba	01 45 f4	 add	 DWORD PTR _hold$1$[ebp], eax
  005bd	83 c3 08	 add	 ebx, 8
  005c0	4e		 dec	 esi
  005c1	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  005c4	3b 5d e4	 cmp	 ebx, DWORD PTR tv3351[ebp]
  005c7	72 cb		 jb	 SHORT $LL126@inflateBac
  005c9	8b 4d f0	 mov	 ecx, DWORD PTR tv3377[ebp]
$LN123@inflateBac:

; 424  :                         DROPBITS(here.bits);

  005cc	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]

; 425  :                         len = 0;
; 426  :                         copy = 3 + BITS(3);
; 427  :                         DROPBITS(3);

  005cf	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH
  005d4	d3 ef		 shr	 edi, cl
  005d6	8b d7		 mov	 edx, edi
  005d8	83 e2 07	 and	 edx, 7
  005db	83 c2 03	 add	 edx, 3
  005de	c1 ef 03	 shr	 edi, 3

; 428  :                     }

  005e1	eb 5a		 jmp	 SHORT $LN503@inflateBac
$LN142@inflateBac:

; 429  :                     else {
; 430  :                         NEEDBITS(here.bits + 7);

  005e3	83 c0 07	 add	 eax, 7
  005e6	89 4d f0	 mov	 DWORD PTR tv3376[ebp], ecx
  005e9	89 45 e4	 mov	 DWORD PTR tv3350[ebp], eax
  005ec	3b d8		 cmp	 ebx, eax
  005ee	73 38		 jae	 SHORT $LN140@inflateBac
$LL143@inflateBac:
  005f0	85 f6		 test	 esi, esi
  005f2	75 1a		 jne	 SHORT $LN148@inflateBac
  005f4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  005f7	50		 push	 eax
  005f8	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  005fb	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  005fe	8b f0		 mov	 esi, eax
  00600	83 c4 08	 add	 esp, 8
  00603	85 f6		 test	 esi, esi
  00605	0f 84 de 06 00
	00		 je	 $LN369@inflateBac
  0060b	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN148@inflateBac:
  0060e	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00611	8b cb		 mov	 ecx, ebx
  00613	d3 e0		 shl	 eax, cl
  00615	47		 inc	 edi
  00616	01 45 f4	 add	 DWORD PTR _hold$1$[ebp], eax
  00619	83 c3 08	 add	 ebx, 8
  0061c	4e		 dec	 esi
  0061d	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00620	3b 5d e4	 cmp	 ebx, DWORD PTR tv3350[ebp]
  00623	72 cb		 jb	 SHORT $LL143@inflateBac
  00625	8b 4d f0	 mov	 ecx, DWORD PTR tv3376[ebp]
$LN140@inflateBac:

; 431  :                         DROPBITS(here.bits);

  00628	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]

; 432  :                         len = 0;
; 433  :                         copy = 11 + BITS(7);
; 434  :                         DROPBITS(7);

  0062b	b8 f9 ff ff ff	 mov	 eax, -7			; fffffff9H
  00630	d3 ef		 shr	 edi, cl
  00632	8b d7		 mov	 edx, edi
  00634	83 e2 7f	 and	 edx, 127		; 0000007fH
  00637	83 c2 0b	 add	 edx, 11			; 0000000bH
  0063a	c1 ef 07	 shr	 edi, 7
$LN503@inflateBac:

; 435  :                     }
; 436  :                     if (state->have + copy > state->nlen + state->ndist) {

  0063d	2b c1		 sub	 eax, ecx
  0063f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
  00646	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  00649	03 d8		 add	 ebx, eax
$LN502@inflateBac:
  0064b	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  0064e	8b 49 68	 mov	 ecx, DWORD PTR [ecx+104]
  00651	89 45 f0	 mov	 DWORD PTR $T7[ebp], eax
  00654	8b 45 f8	 mov	 eax, DWORD PTR _state$1$[ebp]
  00657	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  0065a	03 48 64	 add	 ecx, DWORD PTR [eax+100]
  0065d	8b 45 f0	 mov	 eax, DWORD PTR $T7[ebp]
  00660	03 c2		 add	 eax, edx
  00662	3b c1		 cmp	 eax, ecx
  00664	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  00667	77 5c		 ja	 SHORT $LN380@inflateBac
  00669	8b 45 f0	 mov	 eax, DWORD PTR $T7[ebp]
  0066c	8b 7d e4	 mov	 edi, DWORD PTR $T3[ebp]
  0066f	90		 npad	 1
$LL157@inflateBac:

; 437  :                         strm->msg = (char *)"invalid bit length repeat";
; 438  :                         state->mode = BAD;
; 439  :                         break;
; 440  :                     }
; 441  :                     while (copy--)
; 442  :                         state->lens[state->have++] = (unsigned short)len;

  00670	66 89 7c 41 74	 mov	 WORD PTR [ecx+eax*2+116], di
  00675	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00678	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  0067b	89 41 6c	 mov	 DWORD PTR [ecx+108], eax
  0067e	83 ea 01	 sub	 edx, 1
  00681	75 ed		 jne	 SHORT $LL157@inflateBac
  00683	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]
$LN501@inflateBac:

; 394  :             }
; 395  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 396  : 
; 397  :             /* get length and distance code code lengths */
; 398  :             state->have = 0;
; 399  :             while (state->have < state->nlen + state->ndist) {

  00686	89 45 f0	 mov	 DWORD PTR $T7[ebp], eax
  00689	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]
  0068c	03 41 64	 add	 eax, DWORD PTR [ecx+100]
  0068f	39 45 f0	 cmp	 DWORD PTR $T7[ebp], eax
  00692	0f 82 78 fd ff
	ff		 jb	 $LL92@inflateBac
$LN499@inflateBac:

; 443  :                 }
; 444  :             }
; 445  : 
; 446  :             /* handle error breaks in while */
; 447  :             if (state->mode == BAD) break;

  00698	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
$LN93@inflateBac:
  0069b	81 79 04 51 3f
	00 00		 cmp	 DWORD PTR [ecx+4], 16209 ; 00003f51H
  006a2	0f 84 0c 06 00
	00		 je	 $LN491@inflateBac

; 448  : 
; 449  :             /* check for end-of-block code (better have one) */
; 450  :             if (state->lens[256] == 0) {

  006a8	66 83 b9 74 02
	00 00 00	 cmp	 WORD PTR [ecx+628], 0
  006b0	75 26		 jne	 SHORT $LN299@inflateBac

; 451  :                 strm->msg = (char *)"invalid code -- missing end-of-block";

  006b2	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@

; 452  :                 state->mode = BAD;

  006b9	c7 41 04 51 3f
	00 00		 mov	 DWORD PTR [ecx+4], 16209 ; 00003f51H

; 453  :                 break;

  006c0	e9 f2 05 00 00	 jmp	 $LN500@inflateBac
$LN380@inflateBac:

; 443  :                 }
; 444  :             }
; 445  : 
; 446  :             /* handle error breaks in while */
; 447  :             if (state->mode == BAD) break;

  006c5	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  006c8	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@
  006cf	c7 41 04 51 3f
	00 00		 mov	 DWORD PTR [ecx+4], 16209 ; 00003f51H
  006d6	eb c3		 jmp	 SHORT $LN93@inflateBac
$LN299@inflateBac:

; 454  :             }
; 455  : 
; 456  :             /* build code tables -- note: do not change the lenbits or distbits
; 457  :                values here (9 and 6) without reading the comments in inftrees.h
; 458  :                concerning the ENOUGH constants, which depend on those values */
; 459  :             state->next = state->codes;
; 460  :             state->lencode = (code const FAR *)(state->next);
; 461  :             state->lenbits = 9;
; 462  :             ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),

  006d8	ff 75 e0	 push	 DWORD PTR tv3386[ebp]
  006db	8d 51 70	 lea	 edx, DWORD PTR [ecx+112]
  006de	c7 41 58 09 00
	00 00		 mov	 DWORD PTR [ecx+88], 9
  006e5	8d 81 34 05 00
	00		 lea	 eax, DWORD PTR [ecx+1332]
  006eb	89 02		 mov	 DWORD PTR [edx], eax
  006ed	89 41 50	 mov	 DWORD PTR [ecx+80], eax
  006f0	8d 41 58	 lea	 eax, DWORD PTR [ecx+88]
  006f3	50		 push	 eax
  006f4	52		 push	 edx
  006f5	ff 71 64	 push	 DWORD PTR [ecx+100]
  006f8	8d 51 74	 lea	 edx, DWORD PTR [ecx+116]
  006fb	b9 01 00 00 00	 mov	 ecx, 1
  00700	e8 00 00 00 00	 call	 _inflate_table

; 463  :                                 &(state->lenbits), state->work);
; 464  :             if (ret) {

  00705	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  00708	83 c4 10	 add	 esp, 16			; 00000010H
  0070b	85 c0		 test	 eax, eax
  0070d	74 16		 je	 SHORT $LN300@inflateBac

; 465  :                 strm->msg = (char *)"invalid literal/lengths set";

  0070f	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00712	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@

; 466  :                 state->mode = BAD;

  00719	c7 41 04 51 3f
	00 00		 mov	 DWORD PTR [ecx+4], 16209 ; 00003f51H

; 467  :                 break;

  00720	e9 92 05 00 00	 jmp	 $LN500@inflateBac
$LN300@inflateBac:

; 468  :             }
; 469  :             state->distcode = (code const FAR *)(state->next);

  00725	8b 55 d8	 mov	 edx, DWORD PTR tv3447[ebp]

; 470  :             state->distbits = 6;
; 471  :             ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,

  00728	ff 75 e0	 push	 DWORD PTR tv3386[ebp]
  0072b	c7 41 5c 06 00
	00 00		 mov	 DWORD PTR [ecx+92], 6
  00732	8b 02		 mov	 eax, DWORD PTR [edx]
  00734	89 41 54	 mov	 DWORD PTR [ecx+84], eax
  00737	8d 41 5c	 lea	 eax, DWORD PTR [ecx+92]
  0073a	50		 push	 eax
  0073b	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  0073e	52		 push	 edx
  0073f	ff 71 68	 push	 DWORD PTR [ecx+104]
  00742	83 c1 74	 add	 ecx, 116		; 00000074H
  00745	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00748	b9 02 00 00 00	 mov	 ecx, 2
  0074d	e8 00 00 00 00	 call	 _inflate_table

; 472  :                             &(state->next), &(state->distbits), state->work);
; 473  :             if (ret) {

  00752	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  00755	83 c4 10	 add	 esp, 16			; 00000010H
  00758	85 c0		 test	 eax, eax
  0075a	74 16		 je	 SHORT $LN301@inflateBac

; 474  :                 strm->msg = (char *)"invalid distances set";

  0075c	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0075f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@GMDFCBGP@invalid?5distances?5set@

; 475  :                 state->mode = BAD;

  00766	c7 41 04 51 3f
	00 00		 mov	 DWORD PTR [ecx+4], 16209 ; 00003f51H

; 476  :                 break;

  0076d	e9 45 05 00 00	 jmp	 $LN500@inflateBac
$LN301@inflateBac:

; 477  :             }
; 478  :             Tracev((stderr, "inflate:       codes ok\n"));
; 479  :             state->mode = LEN;

  00772	c7 41 04 48 3f
	00 00		 mov	 DWORD PTR [ecx+4], 16200 ; 00003f48H
  00779	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
$LN302@inflateBac:

; 480  : 
; 481  :         case LEN:
; 482  :             /* use inflate_fast() if we have enough input and output */
; 483  :             if (have >= 6 && left >= 258) {

  0077c	83 fe 06	 cmp	 esi, 6
  0077f	0f 82 7f 00 00
	00		 jb	 $LN303@inflateBac
  00785	81 7d ec 02 01
	00 00		 cmp	 DWORD PTR _left$1$[ebp], 258 ; 00000102H
  0078c	72 76		 jb	 SHORT $LN303@inflateBac

; 484  :                 RESTORE();

  0078e	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00791	8b 45 e8	 mov	 eax, DWORD PTR _put$1$[ebp]
  00794	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00797	8b 45 ec	 mov	 eax, DWORD PTR _left$1$[ebp]
  0079a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0079d	8b c1		 mov	 eax, ecx
  0079f	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  007a2	89 10		 mov	 DWORD PTR [eax], edx
  007a4	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 485  :                 if (state->whave < state->wsize)

  007a7	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  007aa	89 79 3c	 mov	 DWORD PTR [ecx+60], edi
  007ad	89 59 40	 mov	 DWORD PTR [ecx+64], ebx
  007b0	39 51 30	 cmp	 DWORD PTR [ecx+48], edx
  007b3	73 08		 jae	 SHORT $LN304@inflateBac

; 486  :                     state->whave = state->wsize - left;

  007b5	8b c2		 mov	 eax, edx
  007b7	2b 45 ec	 sub	 eax, DWORD PTR _left$1$[ebp]
  007ba	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN304@inflateBac:

; 487  :                 inflate_fast(strm, state->wsize);

  007bd	8b 5d 08	 mov	 ebx, DWORD PTR _strm$[ebp]
  007c0	52		 push	 edx
  007c1	53		 push	 ebx
  007c2	e8 00 00 00 00	 call	 _inflate_fast

; 488  :                 LOAD();

  007c7	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  007ca	83 c4 08	 add	 esp, 8
  007cd	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  007d0	8b 13		 mov	 edx, DWORD PTR [ebx]
  007d2	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  007d5	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  007d8	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  007db	89 55 fc	 mov	 DWORD PTR _next$[ebp], edx
  007de	8b 79 3c	 mov	 edi, DWORD PTR [ecx+60]
  007e1	8b 59 40	 mov	 ebx, DWORD PTR [ecx+64]
  007e4	89 45 ec	 mov	 DWORD PTR _left$1$[ebp], eax

; 489  :                 break;

  007e7	e9 ce 04 00 00	 jmp	 $LN504@inflateBac
$LN277@inflateBac:

; 369  :                 strm->msg = (char *)"too many length or distance symbols";

  007ec	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]

; 370  :                 state->mode = BAD;

  007ef	8b ca		 mov	 ecx, edx
  007f1	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@
  007f8	c7 41 04 51 3f
	00 00		 mov	 DWORD PTR [ecx+4], 16209 ; 00003f51H

; 371  :                 break;

  007ff	e9 b3 04 00 00	 jmp	 $LN500@inflateBac
$LN303@inflateBac:

; 490  :             }
; 491  : 
; 492  :             /* get a literal, length, or end-of-block code */
; 493  :             for (;;) {
; 494  :                 here = state->lencode[BITS(state->lenbits)];

  00804	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  00807	8b 49 58	 mov	 ecx, DWORD PTR [ecx+88]
  0080a	89 45 f0	 mov	 DWORD PTR $T6[ebp], eax
  0080d	b8 01 00 00 00	 mov	 eax, 1
  00812	d3 e0		 shl	 eax, cl
  00814	8b 4d f0	 mov	 ecx, DWORD PTR $T6[ebp]
  00817	48		 dec	 eax
  00818	23 c7		 and	 eax, edi
  0081a	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  0081d	8b c8		 mov	 ecx, eax
  0081f	c1 e9 08	 shr	 ecx, 8
  00822	0f b6 c9	 movzx	 ecx, cl

; 495  :                 if ((unsigned)(here.bits) <= bits) break;

  00825	3b cb		 cmp	 ecx, ebx
  00827	76 5e		 jbe	 SHORT $LN382@inflateBac
  00829	0f 1f 80 00 00
	00 00		 npad	 7
$LL165@inflateBac:

; 496  :                 PULLBYTE();

  00830	85 f6		 test	 esi, esi
  00832	75 1a		 jne	 SHORT $LN171@inflateBac
  00834	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00837	50		 push	 eax
  00838	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0083b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0083e	8b f0		 mov	 esi, eax
  00840	83 c4 08	 add	 esp, 8
  00843	85 f6		 test	 esi, esi
  00845	0f 84 9e 04 00
	00		 je	 $LN369@inflateBac
  0084b	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
$LN171@inflateBac:
  0084e	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00851	8b cb		 mov	 ecx, ebx
  00853	d3 e0		 shl	 eax, cl
  00855	42		 inc	 edx
  00856	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  00859	03 f8		 add	 edi, eax
  0085b	89 55 fc	 mov	 DWORD PTR _next$[ebp], edx
  0085e	83 c3 08	 add	 ebx, 8
  00861	4e		 dec	 esi
  00862	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  00865	8b 49 58	 mov	 ecx, DWORD PTR [ecx+88]
  00868	89 45 f0	 mov	 DWORD PTR $T6[ebp], eax
  0086b	b8 01 00 00 00	 mov	 eax, 1
  00870	d3 e0		 shl	 eax, cl
  00872	8b 4d f0	 mov	 ecx, DWORD PTR $T6[ebp]
  00875	48		 dec	 eax
  00876	23 c7		 and	 eax, edi
  00878	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  0087b	8b c8		 mov	 ecx, eax
  0087d	c1 e9 08	 shr	 ecx, 8
  00880	0f b6 c9	 movzx	 ecx, cl
  00883	3b cb		 cmp	 ecx, ebx
  00885	77 a9		 ja	 SHORT $LL165@inflateBac
$LN382@inflateBac:

; 497  :             }
; 498  :             if (here.op && (here.op & 0xf0) == 0) {

  00887	84 c0		 test	 al, al
  00889	0f 84 b2 00 00
	00		 je	 $LN184@inflateBac
  0088f	a8 f0		 test	 al, 240			; 000000f0H
  00891	0f 85 aa 00 00
	00		 jne	 $LN184@inflateBac

; 499  :                 last = here;

  00897	8b c8		 mov	 ecx, eax
  00899	c1 e9 08	 shr	 ecx, 8

; 500  :                 for (;;) {
; 501  :                     here = state->lencode[last.val +

  0089c	0f b6 c9	 movzx	 ecx, cl
  0089f	89 4d f4	 mov	 DWORD PTR tv3446[ebp], ecx
  008a2	8b c8		 mov	 ecx, eax
  008a4	c1 e9 10	 shr	 ecx, 16			; 00000010H
  008a7	89 4d d8	 mov	 DWORD PTR tv3445[ebp], ecx
  008aa	0f b6 c8	 movzx	 ecx, al
  008ad	b8 01 00 00 00	 mov	 eax, 1
  008b2	03 4d f4	 add	 ecx, DWORD PTR tv3446[ebp]
  008b5	d3 e0		 shl	 eax, cl
  008b7	8b 4d f4	 mov	 ecx, DWORD PTR tv3446[ebp]
  008ba	48		 dec	 eax
  008bb	89 45 dc	 mov	 DWORD PTR tv3429[ebp], eax
  008be	23 c7		 and	 eax, edi
  008c0	d3 e8		 shr	 eax, cl
  008c2	03 45 d8	 add	 eax, DWORD PTR tv3445[ebp]
  008c5	8b 4d f0	 mov	 ecx, DWORD PTR $T6[ebp]
  008c8	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  008cb	8b c8		 mov	 ecx, eax
  008cd	c1 e9 08	 shr	 ecx, 8

; 502  :                             (BITS(last.bits + last.op) >> last.bits)];
; 503  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  008d0	0f b6 c9	 movzx	 ecx, cl
  008d3	03 4d f4	 add	 ecx, DWORD PTR tv3446[ebp]
  008d6	3b cb		 cmp	 ecx, ebx
  008d8	76 60		 jbe	 SHORT $LN185@inflateBac
  008da	66 0f 1f 44 00
	00		 npad	 6
$LL174@inflateBac:

; 504  :                     PULLBYTE();

  008e0	85 f6		 test	 esi, esi
  008e2	75 1a		 jne	 SHORT $LN180@inflateBac
  008e4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  008e7	50		 push	 eax
  008e8	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  008eb	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  008ee	8b f0		 mov	 esi, eax
  008f0	83 c4 08	 add	 esp, 8
  008f3	85 f6		 test	 esi, esi
  008f5	0f 84 ee 03 00
	00		 je	 $LN369@inflateBac
  008fb	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
$LN180@inflateBac:
  008fe	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00901	8b cb		 mov	 ecx, ebx
  00903	d3 e0		 shl	 eax, cl
  00905	42		 inc	 edx
  00906	8b 4d f4	 mov	 ecx, DWORD PTR tv3446[ebp]
  00909	03 f8		 add	 edi, eax
  0090b	8b 45 f8	 mov	 eax, DWORD PTR _state$1$[ebp]
  0090e	83 c3 08	 add	 ebx, 8
  00911	89 55 fc	 mov	 DWORD PTR _next$[ebp], edx
  00914	4e		 dec	 esi
  00915	89 55 f0	 mov	 DWORD PTR _next$6$[ebp], edx
  00918	8b 55 dc	 mov	 edx, DWORD PTR tv3429[ebp]
  0091b	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  0091e	23 d7		 and	 edx, edi
  00920	d3 ea		 shr	 edx, cl
  00922	03 55 d8	 add	 edx, DWORD PTR tv3445[ebp]
  00925	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00928	8b c8		 mov	 ecx, eax
  0092a	8b 55 f0	 mov	 edx, DWORD PTR _next$6$[ebp]
  0092d	c1 e9 08	 shr	 ecx, 8
  00930	0f b6 c9	 movzx	 ecx, cl
  00933	03 4d f4	 add	 ecx, DWORD PTR tv3446[ebp]
  00936	3b cb		 cmp	 ecx, ebx
  00938	77 a6		 ja	 SHORT $LL174@inflateBac
$LN185@inflateBac:

; 505  :                 }
; 506  :                 DROPBITS(last.bits);

  0093a	8b 4d f4	 mov	 ecx, DWORD PTR tv3446[ebp]
  0093d	d3 ef		 shr	 edi, cl
  0093f	2b d9		 sub	 ebx, ecx
$LN184@inflateBac:

; 507  :             }
; 508  :             DROPBITS(here.bits);
; 509  :             state->length = (unsigned)here.val;

  00941	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00944	8b c8		 mov	 ecx, eax
  00946	c1 e9 08	 shr	 ecx, 8
  00949	0f b6 c9	 movzx	 ecx, cl
  0094c	d3 ef		 shr	 edi, cl
  0094e	2b d9		 sub	 ebx, ecx
  00950	8b c8		 mov	 ecx, eax
  00952	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00955	89 4a 44	 mov	 DWORD PTR [edx+68], ecx

; 510  : 
; 511  :             /* process literal */
; 512  :             if (here.op == 0) {

  00958	84 c0		 test	 al, al
  0095a	75 46		 jne	 SHORT $LN312@inflateBac

; 513  :                 Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 514  :                         "inflate:         literal '%c'\n" :
; 515  :                         "inflate:         literal 0x%02x\n", here.val));
; 516  :                 ROOM();

  0095c	83 7d ec 00	 cmp	 DWORD PTR _left$1$[ebp], 0
  00960	75 22		 jne	 SHORT $LN189@inflateBac
  00962	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00965	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00968	51		 push	 ecx
  00969	50		 push	 eax
  0096a	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  0096d	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  00970	89 4d ec	 mov	 DWORD PTR _left$1$[ebp], ecx
  00973	89 4a 30	 mov	 DWORD PTR [edx+48], ecx
  00976	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00979	83 c4 0c	 add	 esp, 12			; 0000000cH
  0097c	85 c0		 test	 eax, eax
  0097e	0f 85 7f 03 00
	00		 jne	 $LN372@inflateBac
$LN189@inflateBac:

; 517  :                 *put++ = (unsigned char)(state->length);

  00984	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  00987	8b 55 e8	 mov	 edx, DWORD PTR _put$1$[ebp]
  0098a	8a 41 44	 mov	 al, BYTE PTR [ecx+68]
  0098d	88 02		 mov	 BYTE PTR [edx], al
  0098f	42		 inc	 edx

; 518  :                 left--;

  00990	ff 4d ec	 dec	 DWORD PTR _left$1$[ebp]
  00993	89 55 e8	 mov	 DWORD PTR _put$1$[ebp], edx

; 519  :                 state->mode = LEN;

  00996	c7 41 04 48 3f
	00 00		 mov	 DWORD PTR [ecx+4], 16200 ; 00003f48H

; 520  :                 break;

  0099d	e9 15 03 00 00	 jmp	 $LN500@inflateBac
$LN312@inflateBac:

; 521  :             }
; 522  : 
; 523  :             /* process end of block */
; 524  :             if (here.op & 32) {

  009a2	a8 20		 test	 al, 32			; 00000020H
  009a4	74 0e		 je	 SHORT $LN315@inflateBac

; 525  :                 Tracevv((stderr, "inflate:         end of block\n"));
; 526  :                 state->mode = TYPE;

  009a6	8b ca		 mov	 ecx, edx
  009a8	c7 41 04 3f 3f
	00 00		 mov	 DWORD PTR [ecx+4], 16191 ; 00003f3fH

; 527  :                 break;

  009af	e9 03 03 00 00	 jmp	 $LN500@inflateBac
$LN315@inflateBac:

; 528  :             }
; 529  : 
; 530  :             /* invalid code */
; 531  :             if (here.op & 64) {

  009b4	a8 40		 test	 al, 64			; 00000040H
  009b6	74 18		 je	 SHORT $LN316@inflateBac

; 532  :                 strm->msg = (char *)"invalid literal/length code";

  009b8	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]

; 533  :                 state->mode = BAD;

  009bb	8b ca		 mov	 ecx, edx
  009bd	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@
  009c4	c7 41 04 51 3f
	00 00		 mov	 DWORD PTR [ecx+4], 16209 ; 00003f51H

; 534  :                 break;

  009cb	e9 e7 02 00 00	 jmp	 $LN500@inflateBac
$LN316@inflateBac:

; 535  :             }
; 536  : 
; 537  :             /* length code -- get extra bits, if any */
; 538  :             state->extra = (unsigned)(here.op) & 15;

  009d0	0f b6 c8	 movzx	 ecx, al
  009d3	83 e1 0f	 and	 ecx, 15			; 0000000fH
  009d6	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 539  :             if (state->extra != 0) {

  009d9	74 54		 je	 SHORT $LN204@inflateBac

; 540  :                 NEEDBITS(state->extra);

  009db	3b d9		 cmp	 ebx, ecx
  009dd	73 3f		 jae	 SHORT $LN192@inflateBac
  009df	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LL195@inflateBac:
  009e2	85 f6		 test	 esi, esi
  009e4	75 1d		 jne	 SHORT $LN200@inflateBac
  009e6	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  009e9	50		 push	 eax
  009ea	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  009ed	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  009f0	8b f0		 mov	 esi, eax
  009f2	83 c4 08	 add	 esp, 8
  009f5	85 f6		 test	 esi, esi
  009f7	0f 84 ec 02 00
	00		 je	 $LN369@inflateBac
  009fd	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00a00	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LN200@inflateBac:
  00a03	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00a06	8b cb		 mov	 ecx, ebx
  00a08	d3 e0		 shl	 eax, cl
  00a0a	83 c3 08	 add	 ebx, 8
  00a0d	03 f8		 add	 edi, eax
  00a0f	4e		 dec	 esi
  00a10	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00a13	40		 inc	 eax
  00a14	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00a17	8b 4a 4c	 mov	 ecx, DWORD PTR [edx+76]
  00a1a	3b d9		 cmp	 ebx, ecx
  00a1c	72 c4		 jb	 SHORT $LL195@inflateBac
$LN192@inflateBac:

; 541  :                 state->length += BITS(state->extra);

  00a1e	b8 01 00 00 00	 mov	 eax, 1
  00a23	d3 e0		 shl	 eax, cl
  00a25	48		 dec	 eax
  00a26	23 c7		 and	 eax, edi

; 542  :                 DROPBITS(state->extra);

  00a28	d3 ef		 shr	 edi, cl
  00a2a	01 42 44	 add	 DWORD PTR [edx+68], eax
  00a2d	2b d9		 sub	 ebx, ecx
$LN204@inflateBac:

; 543  :             }
; 544  :             Tracevv((stderr, "inflate:         length %u\n", state->length));
; 545  : 
; 546  :             /* get distance code */
; 547  :             for (;;) {
; 548  :                 here = state->distcode[BITS(state->distbits)];

  00a2f	8b 4a 5c	 mov	 ecx, DWORD PTR [edx+92]
  00a32	b8 01 00 00 00	 mov	 eax, 1
  00a37	d3 e0		 shl	 eax, cl
  00a39	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  00a3c	48		 dec	 eax
  00a3d	23 c7		 and	 eax, edi
  00a3f	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00a42	8b c8		 mov	 ecx, eax
  00a44	c1 e9 08	 shr	 ecx, 8
  00a47	0f b6 c9	 movzx	 ecx, cl

; 549  :                 if ((unsigned)(here.bits) <= bits) break;

  00a4a	3b cb		 cmp	 ecx, ebx
  00a4c	76 52		 jbe	 SHORT $LN490@inflateBac
  00a4e	66 90		 npad	 2
$LL206@inflateBac:

; 550  :                 PULLBYTE();

  00a50	85 f6		 test	 esi, esi
  00a52	75 1a		 jne	 SHORT $LN212@inflateBac
  00a54	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00a57	50		 push	 eax
  00a58	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00a5b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00a5e	8b f0		 mov	 esi, eax
  00a60	83 c4 08	 add	 esp, 8
  00a63	85 f6		 test	 esi, esi
  00a65	0f 84 7e 02 00
	00		 je	 $LN369@inflateBac
  00a6b	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN212@inflateBac:
  00a6e	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00a71	8b cb		 mov	 ecx, ebx
  00a73	83 c3 08	 add	 ebx, 8
  00a76	4e		 dec	 esi
  00a77	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00a7a	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  00a7d	d3 e0		 shl	 eax, cl
  00a7f	8b 4a 5c	 mov	 ecx, DWORD PTR [edx+92]
  00a82	03 f8		 add	 edi, eax
  00a84	b8 01 00 00 00	 mov	 eax, 1
  00a89	d3 e0		 shl	 eax, cl
  00a8b	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  00a8e	48		 dec	 eax
  00a8f	23 c7		 and	 eax, edi
  00a91	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00a94	8b c8		 mov	 ecx, eax
  00a96	c1 e9 08	 shr	 ecx, 8
  00a99	0f b6 c9	 movzx	 ecx, cl
  00a9c	3b cb		 cmp	 ecx, ebx
  00a9e	77 b0		 ja	 SHORT $LL206@inflateBac
$LN490@inflateBac:

; 551  :             }
; 552  :             if ((here.op & 0xf0) == 0) {

  00aa0	a8 f0		 test	 al, 240			; 000000f0H
  00aa2	0f 85 a6 00 00
	00		 jne	 $LN225@inflateBac

; 553  :                 last = here;

  00aa8	8b c8		 mov	 ecx, eax
  00aaa	c1 e9 08	 shr	 ecx, 8

; 554  :                 for (;;) {
; 555  :                     here = state->distcode[last.val +

  00aad	0f b6 c9	 movzx	 ecx, cl
  00ab0	89 4d f0	 mov	 DWORD PTR tv3444[ebp], ecx
  00ab3	8b c8		 mov	 ecx, eax
  00ab5	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00ab8	89 4d d8	 mov	 DWORD PTR tv3443[ebp], ecx
  00abb	0f b6 c8	 movzx	 ecx, al
  00abe	b8 01 00 00 00	 mov	 eax, 1
  00ac3	03 4d f0	 add	 ecx, DWORD PTR tv3444[ebp]
  00ac6	d3 e0		 shl	 eax, cl
  00ac8	8b 4d f0	 mov	 ecx, DWORD PTR tv3444[ebp]
  00acb	48		 dec	 eax
  00acc	89 45 dc	 mov	 DWORD PTR tv3477[ebp], eax
  00acf	23 c7		 and	 eax, edi
  00ad1	d3 e8		 shr	 eax, cl
  00ad3	03 45 d8	 add	 eax, DWORD PTR tv3443[ebp]
  00ad6	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  00ad9	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00adc	8b c8		 mov	 ecx, eax
  00ade	c1 e9 08	 shr	 ecx, 8

; 556  :                             (BITS(last.bits + last.op) >> last.bits)];
; 557  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  00ae1	0f b6 c9	 movzx	 ecx, cl
  00ae4	03 4d f0	 add	 ecx, DWORD PTR tv3444[ebp]
  00ae7	3b cb		 cmp	 ecx, ebx
  00ae9	76 5c		 jbe	 SHORT $LN226@inflateBac
  00aeb	0f 1f 44 00 00	 npad	 5
$LL215@inflateBac:

; 558  :                     PULLBYTE();

  00af0	85 f6		 test	 esi, esi
  00af2	75 17		 jne	 SHORT $LN221@inflateBac
  00af4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00af7	50		 push	 eax
  00af8	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00afb	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00afe	8b f0		 mov	 esi, eax
  00b00	83 c4 08	 add	 esp, 8
  00b03	85 f6		 test	 esi, esi
  00b05	0f 84 de 01 00
	00		 je	 $LN369@inflateBac
$LN221@inflateBac:
  00b0b	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
  00b0e	8b cb		 mov	 ecx, ebx
  00b10	83 c3 08	 add	 ebx, 8
  00b13	4e		 dec	 esi
  00b14	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00b17	42		 inc	 edx
  00b18	d3 e0		 shl	 eax, cl
  00b1a	8b 4d f0	 mov	 ecx, DWORD PTR tv3444[ebp]
  00b1d	03 f8		 add	 edi, eax
  00b1f	8b 45 f8	 mov	 eax, DWORD PTR _state$1$[ebp]
  00b22	89 55 fc	 mov	 DWORD PTR _next$[ebp], edx
  00b25	8b 55 dc	 mov	 edx, DWORD PTR tv3477[ebp]
  00b28	23 d7		 and	 edx, edi
  00b2a	8b 40 54	 mov	 eax, DWORD PTR [eax+84]
  00b2d	d3 ea		 shr	 edx, cl
  00b2f	03 55 d8	 add	 edx, DWORD PTR tv3443[ebp]
  00b32	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00b35	8b c8		 mov	 ecx, eax
  00b37	c1 e9 08	 shr	 ecx, 8
  00b3a	0f b6 c9	 movzx	 ecx, cl
  00b3d	03 4d f0	 add	 ecx, DWORD PTR tv3444[ebp]
  00b40	3b cb		 cmp	 ecx, ebx
  00b42	77 ac		 ja	 SHORT $LL215@inflateBac
  00b44	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN226@inflateBac:

; 559  :                 }
; 560  :                 DROPBITS(last.bits);

  00b47	8b 4d f0	 mov	 ecx, DWORD PTR tv3444[ebp]
  00b4a	d3 ef		 shr	 edi, cl
  00b4c	2b d9		 sub	 ebx, ecx
$LN225@inflateBac:

; 561  :             }
; 562  :             DROPBITS(here.bits);

  00b4e	8b c8		 mov	 ecx, eax
  00b50	c1 e9 08	 shr	 ecx, 8
  00b53	0f b6 c9	 movzx	 ecx, cl
  00b56	d3 ef		 shr	 edi, cl
  00b58	2b d9		 sub	 ebx, ecx
  00b5a	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  00b5d	89 5d dc	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 563  :             if (here.op & 64) {

  00b60	a8 40		 test	 al, 64			; 00000040H
  00b62	74 19		 je	 SHORT $LN327@inflateBac

; 564  :                 strm->msg = (char *)"invalid distance code";

  00b64	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]

; 565  :                 state->mode = BAD;

  00b67	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  00b6a	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@LBKINIKP@invalid?5distance?5code@
  00b71	c7 41 04 51 3f
	00 00		 mov	 DWORD PTR [ecx+4], 16209 ; 00003f51H

; 566  :                 break;

  00b78	e9 3a 01 00 00	 jmp	 $LN500@inflateBac
$LN327@inflateBac:

; 567  :             }
; 568  :             state->offset = (unsigned)here.val;

  00b7d	8b c8		 mov	 ecx, eax
  00b7f	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00b82	89 4d d8	 mov	 DWORD PTR $T1[ebp], ecx
  00b85	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 569  : 
; 570  :             /* get distance extra bits, if any */
; 571  :             state->extra = (unsigned)(here.op) & 15;

  00b88	0f b6 c8	 movzx	 ecx, al
  00b8b	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00b8e	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 572  :             if (state->extra != 0) {

  00b91	74 66		 je	 SHORT $LN242@inflateBac

; 573  :                 NEEDBITS(state->extra);

  00b93	3b d9		 cmp	 ebx, ecx
  00b95	73 45		 jae	 SHORT $LN230@inflateBac
  00b97	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00b9a	66 0f 1f 44 00
	00		 npad	 6
$LL233@inflateBac:
  00ba0	85 f6		 test	 esi, esi
  00ba2	75 1d		 jne	 SHORT $LN238@inflateBac
  00ba4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00ba7	50		 push	 eax
  00ba8	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00bab	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00bae	8b f0		 mov	 esi, eax
  00bb0	83 c4 08	 add	 esp, 8
  00bb3	85 f6		 test	 esi, esi
  00bb5	0f 84 2e 01 00
	00		 je	 $LN369@inflateBac
  00bbb	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00bbe	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LN238@inflateBac:
  00bc1	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00bc4	8b cb		 mov	 ecx, ebx
  00bc6	d3 e0		 shl	 eax, cl
  00bc8	83 c3 08	 add	 ebx, 8
  00bcb	03 f8		 add	 edi, eax
  00bcd	4e		 dec	 esi
  00bce	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00bd1	40		 inc	 eax
  00bd2	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00bd5	8b 4a 4c	 mov	 ecx, DWORD PTR [edx+76]
  00bd8	3b d9		 cmp	 ebx, ecx
  00bda	72 c4		 jb	 SHORT $LL233@inflateBac
$LN230@inflateBac:

; 574  :                 state->offset += BITS(state->extra);

  00bdc	b8 01 00 00 00	 mov	 eax, 1
  00be1	d3 e0		 shl	 eax, cl
  00be3	48		 dec	 eax
  00be4	23 c7		 and	 eax, edi

; 575  :                 DROPBITS(state->extra);

  00be6	d3 ef		 shr	 edi, cl
  00be8	01 42 48	 add	 DWORD PTR [edx+72], eax
  00beb	2b d9		 sub	 ebx, ecx
  00bed	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00bf0	89 45 d8	 mov	 DWORD PTR $T1[ebp], eax
  00bf3	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  00bf6	89 5d dc	 mov	 DWORD PTR _bits$1$[ebp], ebx
$LN242@inflateBac:

; 576  :             }
; 577  :             if (state->offset > state->wsize - (state->whave < state->wsize ?

  00bf9	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00bfc	39 4a 30	 cmp	 DWORD PTR [edx+48], ecx
  00bff	1b c0		 sbb	 eax, eax
  00c01	23 45 ec	 and	 eax, DWORD PTR _left$1$[ebp]
  00c04	2b c8		 sub	 ecx, eax
  00c06	39 4d d8	 cmp	 DWORD PTR $T1[ebp], ecx
  00c09	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  00c0c	76 16		 jbe	 SHORT $LL246@inflateBac

; 578  :                                                 left : 0)) {
; 579  :                 strm->msg = (char *)"invalid distance too far back";

  00c0e	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00c11	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@

; 580  :                 state->mode = BAD;

  00c18	c7 41 04 51 3f
	00 00		 mov	 DWORD PTR [ecx+4], 16209 ; 00003f51H

; 581  :                 break;

  00c1f	e9 93 00 00 00	 jmp	 $LN500@inflateBac
$LL246@inflateBac:

; 582  :             }
; 583  :             Tracevv((stderr, "inflate:         distance %u\n", state->offset));
; 584  : 
; 585  :             /* copy match from window to output */
; 586  :             do {
; 587  :                 ROOM();

  00c24	8b 45 ec	 mov	 eax, DWORD PTR _left$1$[ebp]
  00c27	85 c0		 test	 eax, eax
  00c29	75 28		 jne	 SHORT $LN247@inflateBac
  00c2b	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00c2e	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  00c31	52		 push	 edx
  00c32	50		 push	 eax
  00c33	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00c36	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  00c39	89 55 ec	 mov	 DWORD PTR _left$1$[ebp], edx
  00c3c	89 51 30	 mov	 DWORD PTR [ecx+48], edx
  00c3f	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00c42	83 c4 0c	 add	 esp, 12			; 0000000cH
  00c45	85 c0		 test	 eax, eax
  00c47	0f 85 b6 00 00
	00		 jne	 $LN372@inflateBac
  00c4d	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  00c50	8b 45 ec	 mov	 eax, DWORD PTR _left$1$[ebp]
$LN247@inflateBac:

; 588  :                 copy = state->wsize - state->offset;

  00c53	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  00c56	8b 79 2c	 mov	 edi, DWORD PTR [ecx+44]

; 589  :                 if (copy < left) {
; 590  :                     from = put + copy;
; 591  :                     copy = left - copy;
; 592  :                 }
; 593  :                 else {
; 594  :                     from = put - state->offset;
; 595  :                     copy = left;
; 596  :                 }
; 597  :                 if (copy > state->length) copy = state->length;

  00c59	8b c8		 mov	 ecx, eax
  00c5b	2b fa		 sub	 edi, edx
  00c5d	89 45 e0	 mov	 DWORD PTR tv3427[ebp], eax
  00c60	2b cf		 sub	 ecx, edi
  00c62	3b f8		 cmp	 edi, eax
  00c64	0f 43 c8	 cmovae	 ecx, eax
  00c67	8b 45 f8	 mov	 eax, DWORD PTR _state$1$[ebp]
  00c6a	8b 40 44	 mov	 eax, DWORD PTR [eax+68]

; 598  :                 state->length -= copy;

  00c6d	3b c8		 cmp	 ecx, eax
  00c6f	8b d8		 mov	 ebx, eax
  00c71	0f 46 d9	 cmovbe	 ebx, ecx
  00c74	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  00c77	2b c3		 sub	 eax, ebx
  00c79	89 5d d8	 mov	 DWORD PTR _copy$3$[ebp], ebx
  00c7c	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 599  :                 left -= copy;

  00c7f	8b cb		 mov	 ecx, ebx
  00c81	8b 5d e8	 mov	 ebx, DWORD PTR _put$1$[ebp]
  00c84	8b c3		 mov	 eax, ebx
  00c86	29 4d ec	 sub	 DWORD PTR _left$1$[ebp], ecx
  00c89	2b c2		 sub	 eax, edx
  00c8b	3b 7d e0	 cmp	 edi, DWORD PTR tv3427[ebp]
  00c8e	8d 14 3b	 lea	 edx, DWORD PTR [ebx+edi]
  00c91	0f 43 d0	 cmovae	 edx, eax
  00c94	2b d3		 sub	 edx, ebx
$LL252@inflateBac:

; 600  :                 do {
; 601  :                     *put++ = *from++;

  00c96	8a 04 1a	 mov	 al, BYTE PTR [edx+ebx]
  00c99	88 03		 mov	 BYTE PTR [ebx], al
  00c9b	43		 inc	 ebx

; 602  :                 } while (--copy);

  00c9c	83 e9 01	 sub	 ecx, 1
  00c9f	75 f5		 jne	 SHORT $LL252@inflateBac

; 603  :             } while (state->length != 0);

  00ca1	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  00ca4	89 5d e8	 mov	 DWORD PTR _put$1$[ebp], ebx
  00ca7	83 79 44 00	 cmp	 DWORD PTR [ecx+68], 0
  00cab	0f 85 73 ff ff
	ff		 jne	 $LL246@inflateBac
  00cb1	8b 5d dc	 mov	 ebx, DWORD PTR _bits$1$[ebp]
$LN491@inflateBac:

; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  00cb4	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]
$LN500@inflateBac:
  00cb7	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
$LN504@inflateBac:
  00cba	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00cbd	2d 3f 3f 00 00	 sub	 eax, 16191		; 00003f3fH
  00cc2	89 55 f0	 mov	 DWORD PTR _next$6$[ebp], edx
  00cc5	83 f8 12	 cmp	 eax, 18			; 00000012H
  00cc8	0f 86 b2 f3 ff
	ff		 jbe	 $LL2@inflateBac
$LN341@inflateBac:

; 618  : 
; 619  :         default:                /* can't happen, but makes compilers happy */
; 620  :             ret = Z_STREAM_ERROR;

  00cce	bf fe ff ff ff	 mov	 edi, -2			; fffffffeH
$LN497@inflateBac:

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00cd3	8b 45 f0	 mov	 eax, DWORD PTR _next$6$[ebp]
$inf_leave$506:
  00cd6	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00cd9	89 01		 mov	 DWORD PTR [ecx], eax

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00cdb	8b c7		 mov	 eax, edi
  00cdd	5f		 pop	 edi
  00cde	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00ce1	5e		 pop	 esi
  00ce2	5b		 pop	 ebx

; 629  : }

  00ce3	8b e5		 mov	 esp, ebp
  00ce5	5d		 pop	 ebp
  00ce6	c2 14 00	 ret	 20			; 00000014H
$LN369@inflateBac:

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00ce9	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00cec	33 c0		 xor	 eax, eax
  00cee	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00cf3	89 01		 mov	 DWORD PTR [ecx], eax

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00cf5	8b c7		 mov	 eax, edi
  00cf7	5f		 pop	 edi
  00cf8	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00cfb	5e		 pop	 esi
  00cfc	5b		 pop	 ebx

; 629  : }

  00cfd	8b e5		 mov	 esp, ebp
  00cff	5d		 pop	 ebp
  00d00	c2 14 00	 ret	 20			; 00000014H
$LN372@inflateBac:

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00d03	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00d06	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00d0b	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00d0e	89 01		 mov	 DWORD PTR [ecx], eax

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00d10	8b c7		 mov	 eax, edi
  00d12	5f		 pop	 edi
  00d13	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00d16	5e		 pop	 esi
  00d17	5b		 pop	 ebx

; 629  : }

  00d18	8b e5		 mov	 esp, ebp
  00d1a	5d		 pop	 ebp
  00d1b	c2 14 00	 ret	 20			; 00000014H
$LN337@inflateBac:

; 604  :             break;
; 605  : 
; 606  :         case DONE:
; 607  :             /* inflate stream terminated properly -- write leftover output */
; 608  :             ret = Z_STREAM_END;
; 609  :             if (left < state->wsize) {

  00d1e	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00d21	bf 01 00 00 00	 mov	 edi, 1
  00d26	8b 55 ec	 mov	 edx, DWORD PTR _left$1$[ebp]
  00d29	3b d0		 cmp	 edx, eax
  00d2b	73 a6		 jae	 SHORT $LN497@inflateBac

; 610  :                 if (out(out_desc, state->window, state->wsize - left))

  00d2d	2b c2		 sub	 eax, edx
  00d2f	50		 push	 eax
  00d30	ff 71 38	 push	 DWORD PTR [ecx+56]
  00d33	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00d36	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00d39	83 c4 0c	 add	 esp, 12			; 0000000cH
  00d3c	85 c0		 test	 eax, eax
  00d3e	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00d41	74 93		 je	 SHORT $inf_leave$506

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00d43	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00d46	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00d4b	89 01		 mov	 DWORD PTR [ecx], eax

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00d4d	8b c7		 mov	 eax, edi
  00d4f	5f		 pop	 edi
  00d50	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00d53	5e		 pop	 esi
  00d54	5b		 pop	 ebx

; 629  : }

  00d55	8b e5		 mov	 esp, ebp
  00d57	5d		 pop	 ebp
  00d58	c2 14 00	 ret	 20			; 00000014H
$LN340@inflateBac:

; 611  :                     ret = Z_BUF_ERROR;
; 612  :             }
; 613  :             goto inf_leave;
; 614  : 
; 615  :         case BAD:
; 616  :             ret = Z_DATA_ERROR;

  00d5b	bf fd ff ff ff	 mov	 edi, -3			; fffffffdH

; 617  :             goto inf_leave;

  00d60	e9 6e ff ff ff	 jmp	 $LN497@inflateBac
$LN254@inflateBac:

; 274  :         return Z_STREAM_ERROR;

  00d65	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 629  : }

  00d6a	8b e5		 mov	 esp, ebp
  00d6c	5d		 pop	 ebp
  00d6d	c2 14 00	 ret	 20			; 00000014H
$LN482@inflateBac:
  00d70	00 00 00 00	 DD	 $LN255@inflateBac
  00d74	00 00 00 00	 DD	 $LN31@inflateBac
  00d78	00 00 00 00	 DD	 $LN56@inflateBac
  00d7c	00 00 00 00	 DD	 $LN302@inflateBac
  00d80	00 00 00 00	 DD	 $LN337@inflateBac
  00d84	00 00 00 00	 DD	 $LN340@inflateBac
  00d88	00 00 00 00	 DD	 $LN341@inflateBac
$LN481@inflateBac:
  00d8c	00		 DB	 0
  00d8d	06		 DB	 6
  00d8e	01		 DB	 1
  00d8f	06		 DB	 6
  00d90	06		 DB	 6
  00d91	02		 DB	 2
  00d92	06		 DB	 6
  00d93	06		 DB	 6
  00d94	06		 DB	 6
  00d95	03		 DB	 3
  00d96	06		 DB	 6
  00d97	06		 DB	 6
  00d98	06		 DB	 6
  00d99	06		 DB	 6
  00d9a	06		 DB	 6
  00d9b	06		 DB	 6
  00d9c	06		 DB	 6
  00d9d	04		 DB	 4
  00d9e	05		 DB	 5
  00d9f	90		 npad	 1
$LN483@inflateBac:
  00da0	00 00 00 00	 DD	 $LN259@inflateBac
  00da4	00 00 00 00	 DD	 $LN260@inflateBac
  00da8	00 00 00 00	 DD	 $LN261@inflateBac
  00dac	00 00 00 00	 DD	 $LN262@inflateBac
_inflateBack@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\infback.c
;	COMDAT _inflateBackEnd@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_inflateBackEnd@4 PROC					; COMDAT

; 633  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 634  :     if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)

  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 25		 je	 SHORT $LN3@inflateBac
  0000b	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0000e	85 c9		 test	 ecx, ecx
  00010	74 1e		 je	 SHORT $LN3@inflateBac
  00012	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00015	85 c0		 test	 eax, eax
  00017	74 17		 je	 SHORT $LN3@inflateBac

; 636  :     ZFREE(strm, strm->state);

  00019	51		 push	 ecx
  0001a	ff 76 28	 push	 DWORD PTR [esi+40]
  0001d	ff d0		 call	 eax
  0001f	83 c4 08	 add	 esp, 8

; 637  :     strm->state = Z_NULL;

  00022	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 638  :     Tracev((stderr, "inflate: end\n"));
; 639  :     return Z_OK;

  00029	33 c0		 xor	 eax, eax
  0002b	5e		 pop	 esi

; 640  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
$LN3@inflateBac:

; 635  :         return Z_STREAM_ERROR;

  00030	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00035	5e		 pop	 esi

; 640  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
_inflateBackEnd@4 ENDP
_TEXT	ENDS
END
