; Listing generated by Microsoft (R) Optimizing Compiler Version 19.31.31107.0 

	TITLE	c:\cpython\externals\zlib-1.2.11\contrib\vstudio\vc14\x86\zlibdllreleasewithoutasm\tmp\deflate.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

?my_version@?1??deflateInit2_@@9@9 DB '1.2.11', 00H	; `deflateInit2_'::`2'::my_version
	ORG $+1
_configuration_table DW 00H
	DW	00H
	DW	00H
	DW	00H
	DD	FLAT:_deflate_stored
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	05H
	DW	010H
	DW	08H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	06H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	04H
	DW	010H
	DW	010H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	080H
	DW	080H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	020H
	DW	080H
	DW	0100H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	080H
	DW	0102H
	DW	0400H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	0102H
	DW	0102H
	DW	01000H
	DD	FLAT:_deflate_slow
PUBLIC	_deflateCopy@8
PUBLIC	_deflateBound@8
PUBLIC	_deflateTune@20
PUBLIC	_deflateParams@12
PUBLIC	_deflatePrime@12
PUBLIC	_deflatePending@12
PUBLIC	_deflateSetHeader@8
PUBLIC	_deflateReset@4
PUBLIC	_deflateResetKeep@4
PUBLIC	_deflateGetDictionary@12
PUBLIC	_deflateSetDictionary@12
PUBLIC	_deflateInit2_@32
PUBLIC	_deflateInit_@16
PUBLIC	_deflateEnd@4
PUBLIC	_deflate@8
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflate@8
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -12						; size = 4
_beg$1$ = -8						; size = 4
_beg$1$ = -8						; size = 4
_beg$1$ = -8						; size = 4
$T3 = -4						; size = 4
$T4 = -4						; size = 4
_left$1$ = -4						; size = 4
$T5 = 8							; size = 4
_strm$ = 8						; size = 4
$T6 = 12						; size = 4
_flush$ = 12						; size = 4
_deflate@8 PROC						; COMDAT

; 766  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]

; 767  :     int old_flush; /* value of flush param for previous deflate call */
; 768  :     deflate_state *s;
; 769  : 
; 770  :     if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {

  0000b	8b cf		 mov	 ecx, edi
  0000d	e8 00 00 00 00	 call	 _deflateStateCheck
  00012	85 c0		 test	 eax, eax
  00014	0f 85 db 08 00
	00		 jne	 $LN29@deflate
  0001a	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  0001d	83 fb 05	 cmp	 ebx, 5
  00020	0f 87 cf 08 00
	00		 ja	 $LN29@deflate

; 772  :     }
; 773  :     s = strm->state;

  00026	56		 push	 esi
  00027	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]

; 774  : 
; 775  :     if (strm->next_out == Z_NULL ||
; 776  :         (strm->avail_in != 0 && strm->next_in == Z_NULL) ||

  0002a	39 47 0c	 cmp	 DWORD PTR [edi+12], eax
  0002d	0f 84 ac 08 00
	00		 je	 $LN31@deflate
  00033	39 47 04	 cmp	 DWORD PTR [edi+4], eax
  00036	74 08		 je	 SHORT $LN32@deflate
  00038	39 07		 cmp	 DWORD PTR [edi], eax
  0003a	0f 84 9f 08 00
	00		 je	 $LN31@deflate
$LN32@deflate:
  00040	81 7e 04 9a 02
	00 00		 cmp	 DWORD PTR [esi+4], 666	; 0000029aH
  00047	75 09		 jne	 SHORT $LN30@deflate
  00049	83 fb 04	 cmp	 ebx, 4
  0004c	0f 85 8d 08 00
	00		 jne	 $LN31@deflate
$LN30@deflate:

; 779  :     }
; 780  :     if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

  00052	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00056	74 63		 je	 SHORT $LN151@deflate

; 781  : 
; 782  :     old_flush = s->last_flush;
; 783  :     s->last_flush = flush;
; 784  : 
; 785  :     /* Flush as much pending output as possible */
; 786  :     if (s->pending != 0) {

  00058	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0005c	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  0005f	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00062	74 11		 je	 SHORT $LN34@deflate

; 787  :         flush_pending(strm);

  00064	e8 00 00 00 00	 call	 _flush_pending

; 788  :         if (strm->avail_out == 0) {

  00069	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  0006d	0f 84 5a 08 00
	00		 je	 $LN146@deflate
  00073	eb 32		 jmp	 SHORT $LN37@deflate
$LN34@deflate:

; 789  :             /* Since avail_out is 0, deflate will be called again with
; 790  :              * more output space, but possibly with both pending and
; 791  :              * avail_in equal to zero. There won't be anything to do,
; 792  :              * but this is not an error situation so make sure we
; 793  :              * return OK instead of BUF_ERROR at next call of deflate:
; 794  :              */
; 795  :             s->last_flush = -1;
; 796  :             return Z_OK;
; 797  :         }
; 798  : 
; 799  :     /* Make sure there is something to do and avoid duplicate consecutive
; 800  :      * flushes. For repeated and useless calls with Z_FINISH, we keep
; 801  :      * returning Z_STREAM_END instead of Z_BUF_ERROR.
; 802  :      */
; 803  :     } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&

  00075	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00079	75 2c		 jne	 SHORT $LN37@deflate
  0007b	33 c0		 xor	 eax, eax
  0007d	b9 09 00 00 00	 mov	 ecx, 9
  00082	83 fa 04	 cmp	 edx, 4
  00085	0f 4f c1	 cmovg	 eax, ecx
  00088	03 d2		 add	 edx, edx
  0008a	2b d0		 sub	 edx, eax
  0008c	33 c9		 xor	 ecx, ecx
  0008e	83 fb 04	 cmp	 ebx, 4
  00091	b8 09 00 00 00	 mov	 eax, 9
  00096	0f 4f c8	 cmovg	 ecx, eax
  00099	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  0009c	2b c1		 sub	 eax, ecx
  0009e	3b c2		 cmp	 eax, edx
  000a0	7f 05		 jg	 SHORT $LN37@deflate
  000a2	83 fb 04	 cmp	 ebx, 4
  000a5	75 14		 jne	 SHORT $LN151@deflate
$LN37@deflate:

; 804  :                flush != Z_FINISH) {
; 805  :         ERR_RETURN(strm, Z_BUF_ERROR);
; 806  :     }
; 807  : 
; 808  :     /* User must not provide more input after the first FINISH: */
; 809  :     if (s->status == FINISH_STATE && strm->avail_in != 0) {

  000a7	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000aa	3d 9a 02 00 00	 cmp	 eax, 666		; 0000029aH
  000af	75 20		 jne	 SHORT $LN38@deflate
  000b1	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  000b5	0f 84 d5 00 00
	00		 je	 $LN124@deflate
$LN151@deflate:

; 810  :         ERR_RETURN(strm, Z_BUF_ERROR);

  000bb	a1 1c 00 00 00	 mov	 eax, DWORD PTR _z_errmsg+28
  000c0	5e		 pop	 esi
  000c1	89 47 18	 mov	 DWORD PTR [edi+24], eax
  000c4	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  000c9	5f		 pop	 edi

; 1073 : }

  000ca	5b		 pop	 ebx
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c2 08 00	 ret	 8
$LN38@deflate:

; 811  :     }
; 812  : 
; 813  :     /* Write the header */
; 814  :     if (s->status == INIT_STATE) {

  000d1	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  000d4	0f 85 b6 00 00
	00		 jne	 $LN124@deflate

; 815  :         /* zlib header */
; 816  :         uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;

  000da	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  000dd	c1 e2 0c	 shl	 edx, 12			; 0000000cH
  000e0	81 c2 00 88 ff
	ff		 add	 edx, -30720		; ffff8800H

; 817  :         uInt level_flags;
; 818  : 
; 819  :         if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)

  000e6	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  000ed	7d 30		 jge	 SHORT $LN135@deflate
  000ef	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  000f5	83 f8 02	 cmp	 eax, 2
  000f8	7c 25		 jl	 SHORT $LN135@deflate

; 821  :         else if (s->level < 6)

  000fa	83 f8 06	 cmp	 eax, 6
  000fd	7d 0a		 jge	 SHORT $LN43@deflate

; 822  :             level_flags = 1;

  000ff	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00104	8d 48 20	 lea	 ecx, DWORD PTR [eax+32]
  00107	eb 1d		 jmp	 SHORT $LN46@deflate
$LN43@deflate:

; 823  :         else if (s->level == 6)

  00109	75 0a		 jne	 SHORT $LN45@deflate

; 824  :             level_flags = 2;

  0010b	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  00110	8d 48 20	 lea	 ecx, DWORD PTR [eax+32]
  00113	eb 11		 jmp	 SHORT $LN46@deflate
$LN45@deflate:

; 825  :         else
; 826  :             level_flags = 3;

  00115	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  0011a	8d 48 20	 lea	 ecx, DWORD PTR [eax+32]
  0011d	eb 07		 jmp	 SHORT $LN46@deflate
$LN135@deflate:

; 820  :             level_flags = 0;

  0011f	33 c0		 xor	 eax, eax
  00121	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
$LN46@deflate:

; 827  :         header |= (level_flags << 6);
; 828  :         if (s->strstart != 0) header |= PRESET_DICT;
; 829  :         header += 31 - (header % 31);

  00126	83 7e 6c 00	 cmp	 DWORD PTR [esi+108], 0
  0012a	0f 44 c8	 cmove	 ecx, eax
  0012d	b8 85 10 42 08	 mov	 eax, 138547333		; 08421085H
  00132	0b ca		 or	 ecx, edx
  00134	f7 e1		 mul	 ecx
  00136	2b ca		 sub	 ecx, edx
  00138	d1 e9		 shr	 ecx, 1
  0013a	03 ca		 add	 ecx, edx
  0013c	c1 e9 04	 shr	 ecx, 4
  0013f	41		 inc	 ecx
  00140	8b d1		 mov	 edx, ecx
  00142	c1 e2 05	 shl	 edx, 5
  00145	2b d1		 sub	 edx, ecx

; 830  : 
; 831  :         putShortMSB(s, header);

  00147	8b ce		 mov	 ecx, esi
  00149	e8 00 00 00 00	 call	 _putShortMSB

; 832  : 
; 833  :         /* Save the adler32 of the preset dictionary: */
; 834  :         if (s->strstart != 0) {

  0014e	83 7e 6c 00	 cmp	 DWORD PTR [esi+108], 0
  00152	74 16		 je	 SHORT $LN134@deflate

; 835  :             putShortMSB(s, (uInt)(strm->adler >> 16));

  00154	0f b7 57 32	 movzx	 edx, WORD PTR [edi+50]
  00158	8b ce		 mov	 ecx, esi
  0015a	e8 00 00 00 00	 call	 _putShortMSB

; 836  :             putShortMSB(s, (uInt)(strm->adler & 0xffff));

  0015f	0f b7 57 30	 movzx	 edx, WORD PTR [edi+48]
  00163	8b ce		 mov	 ecx, esi
  00165	e8 00 00 00 00	 call	 _putShortMSB
$LN134@deflate:

; 837  :         }
; 838  :         strm->adler = adler32(0L, Z_NULL, 0);

  0016a	6a 00		 push	 0
  0016c	6a 00		 push	 0
  0016e	6a 00		 push	 0
  00170	e8 00 00 00 00	 call	 _adler32@12
  00175	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 839  :         s->status = BUSY_STATE;
; 840  : 
; 841  :         /* Compression must start with an empty pending buffer */
; 842  :         flush_pending(strm);

  00178	8b cf		 mov	 ecx, edi
  0017a	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H
  00181	e8 00 00 00 00	 call	 _flush_pending

; 843  :         if (s->pending != 0) {

  00186	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0018a	0f 85 3d 07 00
	00		 jne	 $LN146@deflate
$LN124@deflate:

; 844  :             s->last_flush = -1;
; 845  :             return Z_OK;
; 846  :         }
; 847  :     }
; 848  : #ifdef GZIP
; 849  :     if (s->status == GZIP_STATE) {

  00190	83 7e 04 39	 cmp	 DWORD PTR [esi+4], 57	; 00000039H
  00194	0f 85 0d 02 00
	00		 jne	 $LN52@deflate

; 850  :         /* gzip header */
; 851  :         strm->adler = crc32(0L, Z_NULL, 0);

  0019a	6a 00		 push	 0
  0019c	6a 00		 push	 0
  0019e	6a 00		 push	 0
  001a0	e8 00 00 00 00	 call	 _crc32@12
  001a5	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 852  :         put_byte(s, 31);

  001a8	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  001ab	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001ae	c6 04 01 1f	 mov	 BYTE PTR [ecx+eax], 31	; 0000001fH
  001b2	ff 46 14	 inc	 DWORD PTR [esi+20]
  001b5	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 853  :         put_byte(s, 139);

  001b8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001bb	c6 04 01 8b	 mov	 BYTE PTR [ecx+eax], 139	; 0000008bH
  001bf	ff 46 14	 inc	 DWORD PTR [esi+20]
  001c2	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 854  :         put_byte(s, 8);

  001c5	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001c8	c6 04 01 08	 mov	 BYTE PTR [ecx+eax], 8
  001cc	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 855  :         if (s->gzhead == Z_NULL) {

  001cf	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  001d2	42		 inc	 edx
  001d3	89 56 14	 mov	 DWORD PTR [esi+20], edx
  001d6	85 c0		 test	 eax, eax
  001d8	0f 85 9c 00 00
	00		 jne	 $LN51@deflate

; 856  :             put_byte(s, 0);

  001de	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001e1	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0
  001e5	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 857  :             put_byte(s, 0);

  001e8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001eb	41		 inc	 ecx
  001ec	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  001ef	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  001f3	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 858  :             put_byte(s, 0);

  001f6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001f9	41		 inc	 ecx
  001fa	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  001fd	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  00201	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 859  :             put_byte(s, 0);

  00204	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00207	41		 inc	 ecx
  00208	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  0020b	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  0020f	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 860  :             put_byte(s, 0);

  00212	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00215	41		 inc	 ecx
  00216	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  00219	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  0021d	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 861  :             put_byte(s, s->level == 9 ? 2 :

  00220	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00226	42		 inc	 edx
  00227	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0022a	83 f8 09	 cmp	 eax, 9
  0022d	75 04		 jne	 SHORT $LN100@deflate
  0022f	b1 02		 mov	 cl, 2
  00231	eb 14		 jmp	 SHORT $LN99@deflate
$LN100@deflate:
  00233	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  0023a	7d 09		 jge	 SHORT $LN98@deflate
  0023c	83 f8 02	 cmp	 eax, 2
  0023f	7c 04		 jl	 SHORT $LN98@deflate
  00241	32 c9		 xor	 cl, cl
  00243	eb 02		 jmp	 SHORT $LN99@deflate
$LN98@deflate:
  00245	b1 04		 mov	 cl, 4
$LN99@deflate:
  00247	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0024a	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0024d	ff 46 14	 inc	 DWORD PTR [esi+20]
  00250	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 862  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 863  :                       4 : 0));
; 864  :             put_byte(s, OS_CODE);

  00253	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00256	c6 04 01 0a	 mov	 BYTE PTR [ecx+eax], 10	; 0000000aH

; 865  :             s->status = BUSY_STATE;
; 866  : 
; 867  :             /* Compression must start with an empty pending buffer */
; 868  :             flush_pending(strm);

  0025a	8b cf		 mov	 ecx, edi
  0025c	ff 46 14	 inc	 DWORD PTR [esi+20]
  0025f	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H
  00266	e8 00 00 00 00	 call	 _flush_pending

; 869  :             if (s->pending != 0) {

  0026b	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0026f	0f 85 58 06 00
	00		 jne	 $LN146@deflate
  00275	e9 2d 01 00 00	 jmp	 $LN52@deflate
$LN51@deflate:

; 870  :                 s->last_flush = -1;
; 871  :                 return Z_OK;
; 872  :             }
; 873  :         }
; 874  :         else {
; 875  :             put_byte(s, (s->gzhead->text ? 1 : 0) +

  0027a	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0027d	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  00280	f7 d9		 neg	 ecx
  00282	1a c9		 sbb	 cl, cl
  00284	80 e1 10	 and	 cl, 16			; 00000010H
  00287	f7 d8		 neg	 eax
  00289	1a c0		 sbb	 al, al
  0028b	24 02		 and	 al, 2
  0028d	02 c8		 add	 cl, al
  0028f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00292	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00295	f7 d8		 neg	 eax
  00297	1a c0		 sbb	 al, al
  00299	24 08		 and	 al, 8
  0029b	02 c8		 add	 cl, al
  0029d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002a0	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  002a3	f7 d8		 neg	 eax
  002a5	1a c0		 sbb	 al, al
  002a7	24 04		 and	 al, 4
  002a9	02 c8		 add	 cl, al
  002ab	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002ae	83 38 00	 cmp	 DWORD PTR [eax], 0
  002b1	0f 95 c0	 setne	 al
  002b4	02 c8		 add	 cl, al
  002b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  002b9	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  002bc	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 876  :                      (s->gzhead->hcrc ? 2 : 0) +
; 877  :                      (s->gzhead->extra == Z_NULL ? 0 : 4) +
; 878  :                      (s->gzhead->name == Z_NULL ? 0 : 8) +
; 879  :                      (s->gzhead->comment == Z_NULL ? 0 : 16)
; 880  :                      );
; 881  :             put_byte(s, (Byte)(s->gzhead->time & 0xff));

  002bf	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002c2	42		 inc	 edx
  002c3	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002c6	89 56 14	 mov	 DWORD PTR [esi+20], edx
  002c9	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  002cd	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002d0	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 882  :             put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));

  002d3	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002d6	42		 inc	 edx
  002d7	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002da	89 56 14	 mov	 DWORD PTR [esi+20], edx
  002dd	0f b6 40 05	 movzx	 eax, BYTE PTR [eax+5]
  002e1	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002e4	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 883  :             put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));

  002e7	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002ea	42		 inc	 edx
  002eb	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002ee	89 56 14	 mov	 DWORD PTR [esi+20], edx
  002f1	0f b6 40 06	 movzx	 eax, BYTE PTR [eax+6]
  002f5	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002f8	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 884  :             put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));

  002fb	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002fe	42		 inc	 edx
  002ff	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00302	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00305	0f b6 40 07	 movzx	 eax, BYTE PTR [eax+7]
  00309	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0030c	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 885  :             put_byte(s, s->level == 9 ? 2 :

  0030f	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00315	42		 inc	 edx
  00316	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00319	83 f8 09	 cmp	 eax, 9
  0031c	75 04		 jne	 SHORT $LN104@deflate
  0031e	b1 02		 mov	 cl, 2
  00320	eb 14		 jmp	 SHORT $LN103@deflate
$LN104@deflate:
  00322	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  00329	7d 09		 jge	 SHORT $LN102@deflate
  0032b	83 f8 02	 cmp	 eax, 2
  0032e	7c 04		 jl	 SHORT $LN102@deflate
  00330	32 c9		 xor	 cl, cl
  00332	eb 02		 jmp	 SHORT $LN103@deflate
$LN102@deflate:
  00334	b1 04		 mov	 cl, 4
$LN103@deflate:
  00336	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00339	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0033c	ff 46 14	 inc	 DWORD PTR [esi+20]

; 886  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 887  :                       4 : 0));
; 888  :             put_byte(s, s->gzhead->os & 0xff);

  0033f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00342	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00345	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00348	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  0034b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0034e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 889  :             if (s->gzhead->extra != Z_NULL) {

  00351	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00354	42		 inc	 edx
  00355	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00358	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0035c	74 23		 je	 SHORT $LN54@deflate

; 890  :                 put_byte(s, s->gzhead->extra_len & 0xff);

  0035e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00361	0f b6 40 14	 movzx	 eax, BYTE PTR [eax+20]
  00365	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00368	ff 46 14	 inc	 DWORD PTR [esi+20]

; 891  :                 put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);

  0036b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0036e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00371	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00374	0f b6 40 15	 movzx	 eax, BYTE PTR [eax+21]
  00378	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0037b	ff 46 14	 inc	 DWORD PTR [esi+20]
  0037e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
$LN54@deflate:

; 892  :             }
; 893  :             if (s->gzhead->hcrc)

  00381	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00384	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00388	74 0f		 je	 SHORT $LN55@deflate

; 894  :                 strm->adler = crc32(strm->adler, s->pending_buf,

  0038a	52		 push	 edx
  0038b	ff 76 08	 push	 DWORD PTR [esi+8]
  0038e	ff 77 30	 push	 DWORD PTR [edi+48]
  00391	e8 00 00 00 00	 call	 _crc32@12
  00396	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN55@deflate:

; 895  :                                     s->pending);
; 896  :             s->gzindex = 0;

  00399	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 897  :             s->status = EXTRA_STATE;

  003a0	c7 46 04 45 00
	00 00		 mov	 DWORD PTR [esi+4], 69	; 00000045H
$LN52@deflate:

; 898  :         }
; 899  :     }
; 900  :     if (s->status == EXTRA_STATE) {

  003a7	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  003aa	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  003ad	89 4d 08	 mov	 DWORD PTR $T5[ebp], ecx
  003b0	83 fa 45	 cmp	 edx, 69			; 00000045H
  003b3	0f 85 fe 00 00
	00		 jne	 $LN137@deflate

; 901  :         if (s->gzhead->extra != Z_NULL) {

  003b9	8b 01		 mov	 eax, DWORD PTR [ecx]
  003bb	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  003bf	0f 84 e9 00 00
	00		 je	 $LN138@deflate

; 902  :             ulg beg = s->pending;   /* start of bytes to update crc */
; 903  :             uInt left = (s->gzhead->extra_len & 0xffff) - s->gzindex;

  003c5	0f b7 40 14	 movzx	 eax, WORD PTR [eax+20]
  003c9	2b 46 20	 sub	 eax, DWORD PTR [esi+32]
  003cc	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 904  :             while (s->pending + left > s->pending_buf_size) {

  003cf	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  003d2	89 45 fc	 mov	 DWORD PTR _left$1$[ebp], eax
  003d5	03 c2		 add	 eax, edx
  003d7	89 55 f8	 mov	 DWORD PTR _beg$1$[ebp], edx
  003da	89 55 f4	 mov	 DWORD PTR $T1[ebp], edx
  003dd	3b c3		 cmp	 eax, ebx
  003df	76 78		 jbe	 SHORT $LN136@deflate
$LL2@deflate:

; 905  :                 uInt copy = s->pending_buf_size - s->pending;
; 906  :                 zmemcpy(s->pending_buf + s->pending,

  003e1	8b 01		 mov	 eax, DWORD PTR [ecx]
  003e3	2b da		 sub	 ebx, edx
  003e5	53		 push	 ebx
  003e6	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  003e9	03 46 20	 add	 eax, DWORD PTR [esi+32]
  003ec	50		 push	 eax
  003ed	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  003f0	03 c2		 add	 eax, edx
  003f2	50		 push	 eax
  003f3	e8 00 00 00 00	 call	 _memcpy

; 907  :                         s->gzhead->extra + s->gzindex, copy);
; 908  :                 s->pending = s->pending_buf_size;
; 909  :                 HCRC_UPDATE(beg);

  003f8	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  003fb	83 c4 0c	 add	 esp, 12			; 0000000cH
  003fe	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00401	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  00404	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00408	74 1b		 je	 SHORT $LN4@deflate
  0040a	8b 55 f8	 mov	 edx, DWORD PTR _beg$1$[ebp]
  0040d	3b ca		 cmp	 ecx, edx
  0040f	76 14		 jbe	 SHORT $LN4@deflate
  00411	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00414	2b ca		 sub	 ecx, edx
  00416	51		 push	 ecx
  00417	03 c2		 add	 eax, edx
  00419	50		 push	 eax
  0041a	ff 77 30	 push	 DWORD PTR [edi+48]
  0041d	e8 00 00 00 00	 call	 _crc32@12
  00422	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN4@deflate:

; 910  :                 s->gzindex += copy;

  00425	01 5e 20	 add	 DWORD PTR [esi+32], ebx

; 911  :                 flush_pending(strm);

  00428	8b cf		 mov	 ecx, edi
  0042a	e8 00 00 00 00	 call	 _flush_pending

; 912  :                 if (s->pending != 0) {

  0042f	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00432	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00435	85 c0		 test	 eax, eax
  00437	0f 85 90 04 00
	00		 jne	 $LN146@deflate

; 913  :                     s->last_flush = -1;
; 914  :                     return Z_OK;
; 915  :                 }
; 916  :                 beg = 0;

  0043d	89 45 f8	 mov	 DWORD PTR _beg$1$[ebp], eax
  00440	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]

; 917  :                 left -= copy;

  00443	8b 45 fc	 mov	 eax, DWORD PTR _left$1$[ebp]
  00446	33 d2		 xor	 edx, edx
  00448	2b c3		 sub	 eax, ebx
  0044a	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  0044d	89 45 fc	 mov	 DWORD PTR _left$1$[ebp], eax
  00450	3b c3		 cmp	 eax, ebx
  00452	77 8d		 ja	 SHORT $LL2@deflate

; 964  :                 put_byte(s, val);
; 965  :             } while (val != 0);

  00454	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00457	eb 03		 jmp	 SHORT $LN3@deflate
$LN136@deflate:
  00459	8b 45 fc	 mov	 eax, DWORD PTR _left$1$[ebp]
$LN3@deflate:

; 918  :             }
; 919  :             zmemcpy(s->pending_buf + s->pending,

  0045c	50		 push	 eax
  0045d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0045f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00462	03 46 20	 add	 eax, DWORD PTR [esi+32]
  00465	50		 push	 eax
  00466	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00469	03 45 f4	 add	 eax, DWORD PTR $T1[ebp]
  0046c	50		 push	 eax
  0046d	e8 00 00 00 00	 call	 _memcpy

; 920  :                     s->gzhead->extra + s->gzindex, left);
; 921  :             s->pending += left;

  00472	8b 5d fc	 mov	 ebx, DWORD PTR _left$1$[ebp]

; 922  :             HCRC_UPDATE(beg);

  00475	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00478	8b 01		 mov	 eax, DWORD PTR [ecx]
  0047a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0047d	03 5e 14	 add	 ebx, DWORD PTR [esi+20]
  00480	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00483	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00487	74 1e		 je	 SHORT $LN7@deflate
  00489	8b 55 f8	 mov	 edx, DWORD PTR _beg$1$[ebp]
  0048c	3b da		 cmp	 ebx, edx
  0048e	76 17		 jbe	 SHORT $LN7@deflate
  00490	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00493	2b da		 sub	 ebx, edx
  00495	53		 push	 ebx
  00496	03 c2		 add	 eax, edx
  00498	50		 push	 eax
  00499	ff 77 30	 push	 DWORD PTR [edi+48]
  0049c	e8 00 00 00 00	 call	 _crc32@12
  004a1	89 47 30	 mov	 DWORD PTR [edi+48], eax
  004a4	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
$LN7@deflate:

; 923  :             s->gzindex = 0;

  004a7	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN138@deflate:

; 924  :         }
; 925  :         s->status = NAME_STATE;

  004ae	c7 46 04 49 00
	00 00		 mov	 DWORD PTR [esi+4], 73	; 00000049H
  004b5	eb 09		 jmp	 SHORT $LN145@deflate
$LN137@deflate:

; 926  :     }
; 927  :     if (s->status == NAME_STATE) {

  004b7	83 fa 49	 cmp	 edx, 73			; 00000049H
  004ba	0f 85 cd 00 00
	00		 jne	 $LN140@deflate
$LN145@deflate:

; 928  :         if (s->gzhead->name != Z_NULL) {

  004c0	8b 01		 mov	 eax, DWORD PTR [ecx]
  004c2	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  004c6	0f 84 b0 00 00
	00		 je	 $LN139@deflate

; 929  :             ulg beg = s->pending;   /* start of bytes to update crc */

  004cc	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  004cf	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  004d2	89 55 f8	 mov	 DWORD PTR _beg$1$[ebp], edx
  004d5	8b da		 mov	 ebx, edx
$LL12@deflate:

; 930  :             int val;
; 931  :             do {
; 932  :                 if (s->pending == s->pending_buf_size) {

  004d7	89 45 fc	 mov	 DWORD PTR $T4[ebp], eax
  004da	3b 5e 0c	 cmp	 ebx, DWORD PTR [esi+12]
  004dd	75 3c		 jne	 SHORT $LN63@deflate

; 933  :                     HCRC_UPDATE(beg);

  004df	8b 01		 mov	 eax, DWORD PTR [ecx]
  004e1	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  004e5	74 1a		 je	 SHORT $LN13@deflate
  004e7	3b da		 cmp	 ebx, edx
  004e9	76 16		 jbe	 SHORT $LN13@deflate
  004eb	8b 45 fc	 mov	 eax, DWORD PTR $T4[ebp]
  004ee	2b da		 sub	 ebx, edx
  004f0	53		 push	 ebx
  004f1	8b 00		 mov	 eax, DWORD PTR [eax]
  004f3	03 c2		 add	 eax, edx
  004f5	50		 push	 eax
  004f6	ff 77 30	 push	 DWORD PTR [edi+48]
  004f9	e8 00 00 00 00	 call	 _crc32@12
  004fe	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN13@deflate:

; 934  :                     flush_pending(strm);

  00501	8b cf		 mov	 ecx, edi
  00503	e8 00 00 00 00	 call	 _flush_pending

; 935  :                     if (s->pending != 0) {

  00508	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0050c	0f 85 bb 03 00
	00		 jne	 $LN146@deflate

; 936  :                         s->last_flush = -1;
; 937  :                         return Z_OK;
; 938  :                     }
; 939  :                     beg = 0;

  00512	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _beg$1$[ebp], 0
  00519	33 db		 xor	 ebx, ebx
$LN63@deflate:

; 940  :                 }
; 941  :                 val = s->gzhead->name[s->gzindex++];

  0051b	8b 45 08	 mov	 eax, DWORD PTR $T5[ebp]
  0051e	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00521	8b 00		 mov	 eax, DWORD PTR [eax]
  00523	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00526	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  00529	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 942  :                 put_byte(s, val);
; 943  :             } while (val != 0);

  0052c	8b 4d 08	 mov	 ecx, DWORD PTR $T5[ebp]
  0052f	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00532	8b 45 fc	 mov	 eax, DWORD PTR $T4[ebp]
  00535	8b 00		 mov	 eax, DWORD PTR [eax]
  00537	88 14 03	 mov	 BYTE PTR [ebx+eax], dl
  0053a	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  0053d	43		 inc	 ebx
  0053e	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00541	84 d2		 test	 dl, dl
  00543	74 08		 je	 SHORT $LN117@deflate
  00545	8b 55 f8	 mov	 edx, DWORD PTR _beg$1$[ebp]
  00548	8b 45 fc	 mov	 eax, DWORD PTR $T4[ebp]
  0054b	eb 8a		 jmp	 SHORT $LL12@deflate
$LN117@deflate:

; 944  :             HCRC_UPDATE(beg);

  0054d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0054f	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00553	74 20		 je	 SHORT $LN16@deflate
  00555	8b 55 f8	 mov	 edx, DWORD PTR _beg$1$[ebp]
  00558	3b da		 cmp	 ebx, edx
  0055a	76 19		 jbe	 SHORT $LN16@deflate
  0055c	8b 45 fc	 mov	 eax, DWORD PTR $T4[ebp]
  0055f	2b da		 sub	 ebx, edx
  00561	53		 push	 ebx
  00562	8b 00		 mov	 eax, DWORD PTR [eax]
  00564	03 c2		 add	 eax, edx
  00566	50		 push	 eax
  00567	ff 77 30	 push	 DWORD PTR [edi+48]
  0056a	e8 00 00 00 00	 call	 _crc32@12
  0056f	8b 4d 08	 mov	 ecx, DWORD PTR $T5[ebp]
  00572	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN16@deflate:

; 945  :             s->gzindex = 0;

  00575	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN139@deflate:

; 946  :         }
; 947  :         s->status = COMMENT_STATE;

  0057c	8b d6		 mov	 edx, esi
  0057e	c7 46 04 5b 00
	00 00		 mov	 DWORD PTR [esi+4], 91	; 0000005bH
  00585	83 c2 0c	 add	 edx, 12			; 0000000cH
  00588	89 55 f4	 mov	 DWORD PTR $T2[ebp], edx
  0058b	eb 12		 jmp	 SHORT $LN144@deflate
$LN140@deflate:

; 948  :     }
; 949  :     if (s->status == COMMENT_STATE) {

  0058d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00590	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00593	89 55 f4	 mov	 DWORD PTR $T2[ebp], edx
  00596	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  00599	0f 85 c6 00 00
	00		 jne	 $LN141@deflate
$LN144@deflate:

; 950  :         if (s->gzhead->comment != Z_NULL) {

  0059f	8b 01		 mov	 eax, DWORD PTR [ecx]
  005a1	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  005a5	0f 84 ab 00 00
	00		 je	 $LN26@deflate

; 951  :             ulg beg = s->pending;   /* start of bytes to update crc */

  005ab	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  005ae	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  005b1	89 55 f8	 mov	 DWORD PTR _beg$1$[ebp], edx
  005b4	8b da		 mov	 ebx, edx
$LL21@deflate:

; 952  :             int val;
; 953  :             do {
; 954  :                 if (s->pending == s->pending_buf_size) {

  005b6	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
  005b9	8b 45 f4	 mov	 eax, DWORD PTR $T2[ebp]
  005bc	3b 18		 cmp	 ebx, DWORD PTR [eax]
  005be	75 3c		 jne	 SHORT $LN69@deflate

; 955  :                     HCRC_UPDATE(beg);

  005c0	8b 01		 mov	 eax, DWORD PTR [ecx]
  005c2	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  005c6	74 1a		 je	 SHORT $LN22@deflate
  005c8	3b da		 cmp	 ebx, edx
  005ca	76 16		 jbe	 SHORT $LN22@deflate
  005cc	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  005cf	2b da		 sub	 ebx, edx
  005d1	53		 push	 ebx
  005d2	8b 00		 mov	 eax, DWORD PTR [eax]
  005d4	03 c2		 add	 eax, edx
  005d6	50		 push	 eax
  005d7	ff 77 30	 push	 DWORD PTR [edi+48]
  005da	e8 00 00 00 00	 call	 _crc32@12
  005df	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN22@deflate:

; 956  :                     flush_pending(strm);

  005e2	8b cf		 mov	 ecx, edi
  005e4	e8 00 00 00 00	 call	 _flush_pending

; 957  :                     if (s->pending != 0) {

  005e9	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  005ed	0f 85 da 02 00
	00		 jne	 $LN146@deflate

; 958  :                         s->last_flush = -1;
; 959  :                         return Z_OK;
; 960  :                     }
; 961  :                     beg = 0;

  005f3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _beg$1$[ebp], 0
  005fa	33 db		 xor	 ebx, ebx
$LN69@deflate:

; 962  :                 }
; 963  :                 val = s->gzhead->comment[s->gzindex++];

  005fc	8b 45 08	 mov	 eax, DWORD PTR $T5[ebp]
  005ff	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00602	8b 00		 mov	 eax, DWORD PTR [eax]
  00604	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00607	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  0060a	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 964  :                 put_byte(s, val);
; 965  :             } while (val != 0);

  0060d	8b 4d 08	 mov	 ecx, DWORD PTR $T5[ebp]
  00610	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00613	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  00616	8b 00		 mov	 eax, DWORD PTR [eax]
  00618	88 14 03	 mov	 BYTE PTR [ebx+eax], dl
  0061b	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  0061e	43		 inc	 ebx
  0061f	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00622	84 d2		 test	 dl, dl
  00624	74 08		 je	 SHORT $LN119@deflate
  00626	8b 55 f8	 mov	 edx, DWORD PTR _beg$1$[ebp]
  00629	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  0062c	eb 88		 jmp	 SHORT $LL21@deflate
$LN119@deflate:

; 966  :             HCRC_UPDATE(beg);

  0062e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00630	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00634	74 20		 je	 SHORT $LN26@deflate
  00636	8b 55 f8	 mov	 edx, DWORD PTR _beg$1$[ebp]
  00639	3b da		 cmp	 ebx, edx
  0063b	76 19		 jbe	 SHORT $LN26@deflate
  0063d	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  00640	2b da		 sub	 ebx, edx
  00642	53		 push	 ebx
  00643	8b 00		 mov	 eax, DWORD PTR [eax]
  00645	03 c2		 add	 eax, edx
  00647	50		 push	 eax
  00648	ff 77 30	 push	 DWORD PTR [edi+48]
  0064b	e8 00 00 00 00	 call	 _crc32@12
  00650	8b 4d 08	 mov	 ecx, DWORD PTR $T5[ebp]
  00653	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN26@deflate:

; 967  :         }
; 968  :         s->status = HCRC_STATE;

  00656	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00659	8b 55 f4	 mov	 edx, DWORD PTR $T2[ebp]
  0065c	c7 46 04 67 00
	00 00		 mov	 DWORD PTR [esi+4], 103	; 00000067H
  00663	eb 05		 jmp	 SHORT $LN143@deflate
$LN141@deflate:

; 969  :     }
; 970  :     if (s->status == HCRC_STATE) {

  00665	83 f8 67	 cmp	 eax, 103		; 00000067H
  00668	75 70		 jne	 SHORT $LN130@deflate
$LN143@deflate:

; 971  :         if (s->gzhead->hcrc) {

  0066a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0066c	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00670	74 50		 je	 SHORT $LN74@deflate

; 972  :             if (s->pending + 2 > s->pending_buf_size) {

  00672	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00675	89 45 0c	 mov	 DWORD PTR $T6[ebp], eax
  00678	83 c0 02	 add	 eax, 2
  0067b	3b 02		 cmp	 eax, DWORD PTR [edx]
  0067d	76 15		 jbe	 SHORT $LN129@deflate

; 973  :                 flush_pending(strm);

  0067f	8b cf		 mov	 ecx, edi
  00681	e8 00 00 00 00	 call	 _flush_pending

; 974  :                 if (s->pending != 0) {

  00686	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00689	89 45 0c	 mov	 DWORD PTR $T6[ebp], eax
  0068c	85 c0		 test	 eax, eax
  0068e	0f 85 39 02 00
	00		 jne	 $LN146@deflate
$LN129@deflate:

; 975  :                     s->last_flush = -1;
; 976  :                     return Z_OK;
; 977  :                 }
; 978  :             }
; 979  :             put_byte(s, (Byte)(strm->adler & 0xff));

  00694	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00697	0f b6 47 30	 movzx	 eax, BYTE PTR [edi+48]
  0069b	8b 55 0c	 mov	 edx, DWORD PTR $T6[ebp]

; 980  :             put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
; 981  :             strm->adler = crc32(0L, Z_NULL, 0);

  0069e	6a 00		 push	 0
  006a0	6a 00		 push	 0
  006a2	6a 00		 push	 0
  006a4	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  006a7	ff 46 14	 inc	 DWORD PTR [esi+20]
  006aa	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  006ad	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  006b0	0f b6 47 31	 movzx	 eax, BYTE PTR [edi+49]
  006b4	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  006b7	ff 46 14	 inc	 DWORD PTR [esi+20]
  006ba	e8 00 00 00 00	 call	 _crc32@12
  006bf	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN74@deflate:

; 982  :         }
; 983  :         s->status = BUSY_STATE;
; 984  : 
; 985  :         /* Compression must start with an empty pending buffer */
; 986  :         flush_pending(strm);

  006c2	8b cf		 mov	 ecx, edi
  006c4	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H
  006cb	e8 00 00 00 00	 call	 _flush_pending

; 987  :         if (s->pending != 0) {

  006d0	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  006d4	0f 85 f3 01 00
	00		 jne	 $LN146@deflate
$LN130@deflate:

; 988  :             s->last_flush = -1;
; 989  :             return Z_OK;
; 990  :         }
; 991  :     }
; 992  : #endif
; 993  : 
; 994  :     /* Start a new block or continue the current one.
; 995  :      */
; 996  :     if (strm->avail_in != 0 || s->lookahead != 0 ||

  006da	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  006de	75 1b		 jne	 SHORT $LN79@deflate
  006e0	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  006e4	75 15		 jne	 SHORT $LN79@deflate
  006e6	85 db		 test	 ebx, ebx
  006e8	0f 84 e6 01 00
	00		 je	 $LN84@deflate
  006ee	81 7e 04 9a 02
	00 00		 cmp	 DWORD PTR [esi+4], 666	; 0000029aH
  006f5	0f 84 eb 00 00
	00		 je	 $LN91@deflate
$LN79@deflate:

; 997  :         (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {
; 998  :         block_state bstate;
; 999  : 
; 1000 :         bstate = s->level == 0 ? deflate_stored(s, flush) :

  006fb	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00701	85 c0		 test	 eax, eax
  00703	75 09		 jne	 SHORT $LN110@deflate
  00705	53		 push	 ebx
  00706	56		 push	 esi
  00707	e8 00 00 00 00	 call	 _deflate_stored
  0070c	eb 34		 jmp	 SHORT $LN156@deflate
$LN110@deflate:
  0070e	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00714	83 f9 02	 cmp	 ecx, 2
  00717	75 0b		 jne	 SHORT $LN108@deflate
  00719	8b d3		 mov	 edx, ebx
  0071b	8b ce		 mov	 ecx, esi
  0071d	e8 00 00 00 00	 call	 _deflate_huff
  00722	eb 21		 jmp	 SHORT $LN107@deflate
$LN108@deflate:
  00724	83 f9 03	 cmp	 ecx, 3
  00727	75 0b		 jne	 SHORT $LN106@deflate
  00729	8b d3		 mov	 edx, ebx
  0072b	8b ce		 mov	 ecx, esi
  0072d	e8 00 00 00 00	 call	 _deflate_rle
  00732	eb 11		 jmp	 SHORT $LN107@deflate
$LN106@deflate:
  00734	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00737	8b 04 85 08 00
	00 00		 mov	 eax, DWORD PTR _configuration_table[eax*4+8]
  0073e	53		 push	 ebx
  0073f	56		 push	 esi
  00740	ff d0		 call	 eax
$LN156@deflate:

; 1001 :                  s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
; 1002 :                  s->strategy == Z_RLE ? deflate_rle(s, flush) :
; 1003 :                  (*(configuration_table[s->level].func))(s, flush);
; 1004 : 
; 1005 :         if (bstate == finish_started || bstate == finish_done) {

  00742	83 c4 08	 add	 esp, 8
$LN107@deflate:
  00745	83 f8 02	 cmp	 eax, 2
  00748	74 05		 je	 SHORT $LN81@deflate
  0074a	83 f8 03	 cmp	 eax, 3
  0074d	75 07		 jne	 SHORT $LN80@deflate
$LN81@deflate:

; 1006 :             s->status = FINISH_STATE;

  0074f	c7 46 04 9a 02
	00 00		 mov	 DWORD PTR [esi+4], 666	; 0000029aH
$LN80@deflate:

; 1007 :         }
; 1008 :         if (bstate == need_more || bstate == finish_started) {

  00756	85 c0		 test	 eax, eax
  00758	0f 84 69 01 00
	00		 je	 $LN83@deflate
  0075e	83 f8 02	 cmp	 eax, 2
  00761	0f 84 60 01 00
	00		 je	 $LN83@deflate

; 1013 :             /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
; 1014 :              * of deflate should use the same flush parameter to make sure
; 1015 :              * that the flush is complete. So we don't have to output an
; 1016 :              * empty block here, this will be done at next call. This also
; 1017 :              * ensures that for a very small output buffer, we emit at most
; 1018 :              * one empty block.
; 1019 :              */
; 1020 :         }
; 1021 :         if (bstate == block_done) {

  00767	83 f8 01	 cmp	 eax, 1
  0076a	75 7a		 jne	 SHORT $LN91@deflate

; 1022 :             if (flush == Z_PARTIAL_FLUSH) {

  0076c	3b d8		 cmp	 ebx, eax
  0076e	75 09		 jne	 SHORT $LN86@deflate

; 1023 :                 _tr_align(s);

  00770	8b ce		 mov	 ecx, esi
  00772	e8 00 00 00 00	 call	 __tr_align
  00777	eb 5c		 jmp	 SHORT $LN90@deflate
$LN86@deflate:

; 1024 :             } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

  00779	83 fb 05	 cmp	 ebx, 5
  0077c	74 57		 je	 SHORT $LN90@deflate

; 1025 :                 _tr_stored_block(s, (char*)0, 0L, 0);

  0077e	6a 00		 push	 0
  00780	6a 00		 push	 0
  00782	33 d2		 xor	 edx, edx
  00784	8b ce		 mov	 ecx, esi
  00786	e8 00 00 00 00	 call	 __tr_stored_block
  0078b	83 c4 08	 add	 esp, 8

; 1026 :                 /* For a full flush, this empty block will be recognized
; 1027 :                  * as a special marker by inflate_sync().
; 1028 :                  */
; 1029 :                 if (flush == Z_FULL_FLUSH) {

  0078e	83 fb 03	 cmp	 ebx, 3
  00791	75 42		 jne	 SHORT $LN90@deflate

; 1030 :                     CLEAR_HASH(s);             /* forget history */

  00793	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00796	33 d2		 xor	 edx, edx
  00798	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  0079b	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  007a0	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  007a3	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  007aa	50		 push	 eax
  007ab	52		 push	 edx
  007ac	ff 76 44	 push	 DWORD PTR [esi+68]
  007af	e8 00 00 00 00	 call	 _memset
  007b4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1031 :                     if (s->lookahead == 0) {

  007b7	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  007bb	75 18		 jne	 SHORT $LN90@deflate

; 1032 :                         s->strstart = 0;

  007bd	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 1033 :                         s->block_start = 0L;

  007c4	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 1034 :                         s->insert = 0;

  007cb	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0
$LN90@deflate:

; 1035 :                     }
; 1036 :                 }
; 1037 :             }
; 1038 :             flush_pending(strm);

  007d5	8b cf		 mov	 ecx, edi
  007d7	e8 00 00 00 00	 call	 _flush_pending

; 1039 :             if (strm->avail_out == 0) {

  007dc	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  007e0	0f 84 e7 00 00
	00		 je	 $LN146@deflate
$LN91@deflate:

; 1040 :               s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */
; 1041 :               return Z_OK;
; 1042 :             }
; 1043 :         }
; 1044 :     }
; 1045 : 
; 1046 :     if (flush != Z_FINISH) return Z_OK;

  007e6	83 fb 04	 cmp	 ebx, 4
  007e9	0f 85 e5 00 00
	00		 jne	 $LN84@deflate

; 1047 :     if (s->wrap <= 0) return Z_STREAM_END;

  007ef	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  007f2	85 c0		 test	 eax, eax
  007f4	7f 0c		 jg	 SHORT $LN93@deflate
  007f6	5e		 pop	 esi
  007f7	5f		 pop	 edi
  007f8	8d 43 fd	 lea	 eax, DWORD PTR [ebx-3]

; 1073 : }

  007fb	5b		 pop	 ebx
  007fc	8b e5		 mov	 esp, ebp
  007fe	5d		 pop	 ebp
  007ff	c2 08 00	 ret	 8
$LN93@deflate:

; 1048 : 
; 1049 :     /* Write the trailer */
; 1050 : #ifdef GZIP
; 1051 :     if (s->wrap == 2) {

  00802	83 f8 02	 cmp	 eax, 2
  00805	0f 85 82 00 00
	00		 jne	 $LN94@deflate

; 1052 :         put_byte(s, (Byte)(strm->adler & 0xff));

  0080b	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0080e	0f b6 47 30	 movzx	 eax, BYTE PTR [edi+48]
  00812	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00815	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00818	ff 46 14	 inc	 DWORD PTR [esi+20]
  0081b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1053 :         put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

  0081e	0f b6 47 31	 movzx	 eax, BYTE PTR [edi+49]
  00822	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00825	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00828	ff 46 14	 inc	 DWORD PTR [esi+20]
  0082b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1054 :         put_byte(s, (Byte)((strm->adler >> 16) & 0xff));

  0082e	0f b6 47 32	 movzx	 eax, BYTE PTR [edi+50]
  00832	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00835	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00838	ff 46 14	 inc	 DWORD PTR [esi+20]
  0083b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1055 :         put_byte(s, (Byte)((strm->adler >> 24) & 0xff));

  0083e	0f b6 47 33	 movzx	 eax, BYTE PTR [edi+51]
  00842	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00845	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00848	ff 46 14	 inc	 DWORD PTR [esi+20]
  0084b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1056 :         put_byte(s, (Byte)(strm->total_in & 0xff));

  0084e	0f b6 47 08	 movzx	 eax, BYTE PTR [edi+8]
  00852	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00855	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00858	ff 46 14	 inc	 DWORD PTR [esi+20]
  0085b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1057 :         put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));

  0085e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00861	0f b6 47 09	 movzx	 eax, BYTE PTR [edi+9]
  00865	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00868	ff 46 14	 inc	 DWORD PTR [esi+20]
  0086b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1058 :         put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));

  0086e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00871	0f b6 47 0a	 movzx	 eax, BYTE PTR [edi+10]
  00875	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00878	ff 46 14	 inc	 DWORD PTR [esi+20]
  0087b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1059 :         put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));

  0087e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00881	0f b6 47 0b	 movzx	 eax, BYTE PTR [edi+11]
  00885	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00888	ff 46 14	 inc	 DWORD PTR [esi+20]

; 1060 :     }

  0088b	eb 16		 jmp	 SHORT $LN95@deflate
$LN94@deflate:

; 1061 :     else
; 1062 : #endif
; 1063 :     {
; 1064 :         putShortMSB(s, (uInt)(strm->adler >> 16));

  0088d	0f b7 57 32	 movzx	 edx, WORD PTR [edi+50]
  00891	8b ce		 mov	 ecx, esi
  00893	e8 00 00 00 00	 call	 _putShortMSB

; 1065 :         putShortMSB(s, (uInt)(strm->adler & 0xffff));

  00898	0f b7 57 30	 movzx	 edx, WORD PTR [edi+48]
  0089c	8b ce		 mov	 ecx, esi
  0089e	e8 00 00 00 00	 call	 _putShortMSB
$LN95@deflate:

; 1066 :     }
; 1067 :     flush_pending(strm);

  008a3	8b cf		 mov	 ecx, edi
  008a5	e8 00 00 00 00	 call	 _flush_pending

; 1068 :     /* If avail_out is zero, the application will call deflate again
; 1069 :      * to flush the rest.
; 1070 :      */
; 1071 :     if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */

  008aa	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  008ad	85 c0		 test	 eax, eax
  008af	7e 05		 jle	 SHORT $LN96@deflate
  008b1	f7 d8		 neg	 eax
  008b3	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN96@deflate:

; 1072 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;

  008b6	33 c0		 xor	 eax, eax
  008b8	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  008bb	5e		 pop	 esi
  008bc	5f		 pop	 edi
  008bd	0f 94 c0	 sete	 al

; 1073 : }

  008c0	5b		 pop	 ebx
  008c1	8b e5		 mov	 esp, ebp
  008c3	5d		 pop	 ebp
  008c4	c2 08 00	 ret	 8
$LN83@deflate:

; 1009 :             if (strm->avail_out == 0) {

  008c7	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  008cb	75 07		 jne	 SHORT $LN84@deflate
$LN146@deflate:

; 1010 :                 s->last_flush = -1; /* avoid BUF_ERROR next call, see above */

  008cd	c7 46 28 ff ff
	ff ff		 mov	 DWORD PTR [esi+40], -1
$LN84@deflate:
  008d4	5e		 pop	 esi
  008d5	5f		 pop	 edi

; 1011 :             }
; 1012 :             return Z_OK;

  008d6	33 c0		 xor	 eax, eax

; 1073 : }

  008d8	5b		 pop	 ebx
  008d9	8b e5		 mov	 esp, ebp
  008db	5d		 pop	 ebp
  008dc	c2 08 00	 ret	 8
$LN31@deflate:

; 777  :         (s->status == FINISH_STATE && flush != Z_FINISH)) {
; 778  :         ERR_RETURN(strm, Z_STREAM_ERROR);

  008df	a1 10 00 00 00	 mov	 eax, DWORD PTR _z_errmsg+16
  008e4	5e		 pop	 esi
  008e5	89 47 18	 mov	 DWORD PTR [edi+24], eax
  008e8	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  008ed	5f		 pop	 edi

; 1073 : }

  008ee	5b		 pop	 ebx
  008ef	8b e5		 mov	 esp, ebp
  008f1	5d		 pop	 ebp
  008f2	c2 08 00	 ret	 8
$LN29@deflate:
  008f5	5f		 pop	 edi

; 771  :         return Z_STREAM_ERROR;

  008f6	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1073 : }

  008fb	5b		 pop	 ebx
  008fc	8b e5		 mov	 esp, ebp
  008fe	5d		 pop	 ebp
  008ff	c2 08 00	 ret	 8
_deflate@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateEnd@4
_TEXT	SEGMENT
_status$1$ = 8						; size = 4
_strm$ = 8						; size = 4
_deflateEnd@4 PROC					; COMDAT

; 1078 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]

; 1079 :     int status;
; 1080 : 
; 1081 :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 _deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 0a		 je	 SHORT $LN2@deflateEnd
  00012	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00017	5e		 pop	 esi

; 1095 : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN2@deflateEnd:

; 1082 : 
; 1083 :     status = strm->state->status;

  0001c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0001f	53		 push	 ebx
  00020	57		 push	 edi
  00021	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1084 : 
; 1085 :     /* Deallocate in reverse order of allocations: */
; 1086 :     TRY_FREE(strm, strm->state->pending_buf);

  00024	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00027	89 4d 08	 mov	 DWORD PTR _status$1$[ebp], ecx
  0002a	85 c0		 test	 eax, eax
  0002c	74 0c		 je	 SHORT $LN8@deflateEnd
  0002e	50		 push	 eax
  0002f	ff 76 28	 push	 DWORD PTR [esi+40]
  00032	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00035	ff d0		 call	 eax
  00037	83 c4 08	 add	 esp, 8
$LN8@deflateEnd:

; 1087 :     TRY_FREE(strm, strm->state->head);

  0003a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0003d	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00040	85 c0		 test	 eax, eax
  00042	74 0c		 je	 SHORT $LN4@deflateEnd
  00044	50		 push	 eax
  00045	ff 76 28	 push	 DWORD PTR [esi+40]
  00048	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0004b	ff d0		 call	 eax
  0004d	83 c4 08	 add	 esp, 8
$LN4@deflateEnd:

; 1088 :     TRY_FREE(strm, strm->state->prev);

  00050	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00053	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  00056	85 c0		 test	 eax, eax
  00058	74 0c		 je	 SHORT $LN5@deflateEnd
  0005a	50		 push	 eax
  0005b	ff 76 28	 push	 DWORD PTR [esi+40]
  0005e	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00061	ff d0		 call	 eax
  00063	83 c4 08	 add	 esp, 8
$LN5@deflateEnd:

; 1089 :     TRY_FREE(strm, strm->state->window);

  00066	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00069	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  0006c	85 c0		 test	 eax, eax
  0006e	74 0c		 je	 SHORT $LN6@deflateEnd
  00070	50		 push	 eax
  00071	ff 76 28	 push	 DWORD PTR [esi+40]
  00074	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00077	ff d0		 call	 eax
  00079	83 c4 08	 add	 esp, 8
$LN6@deflateEnd:

; 1090 : 
; 1091 :     ZFREE(strm, strm->state);

  0007c	ff 76 1c	 push	 DWORD PTR [esi+28]
  0007f	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00082	ff 76 28	 push	 DWORD PTR [esi+40]
  00085	ff d0		 call	 eax
  00087	83 c4 08	 add	 esp, 8

; 1092 :     strm->state = Z_NULL;

  0008a	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 1093 : 
; 1094 :     return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;

  00091	33 c0		 xor	 eax, eax
  00093	b9 fd ff ff ff	 mov	 ecx, -3			; fffffffdH
  00098	83 7d 08 71	 cmp	 DWORD PTR _status$1$[ebp], 113 ; 00000071H
  0009c	5f		 pop	 edi
  0009d	5b		 pop	 ebx
  0009e	0f 44 c1	 cmove	 eax, ecx
  000a1	5e		 pop	 esi

; 1095 : }

  000a2	5d		 pop	 ebp
  000a3	c2 04 00	 ret	 4
_deflateEnd@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateInit_@16
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_deflateInit_@16 PROC					; COMDAT

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 234  :     return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,

  00003	ff 75 14	 push	 DWORD PTR _stream_size$[ebp]
  00006	ff 75 10	 push	 DWORD PTR _version$[ebp]
  00009	6a 00		 push	 0
  0000b	6a 08		 push	 8
  0000d	6a 0f		 push	 15			; 0000000fH
  0000f	6a 08		 push	 8
  00011	ff 75 0c	 push	 DWORD PTR _level$[ebp]
  00014	ff 75 08	 push	 DWORD PTR _strm$[ebp]
  00017	e8 00 00 00 00	 call	 _deflateInit2_@32

; 235  :                          Z_DEFAULT_STRATEGY, version, stream_size);
; 236  :     /* To do: ignore strm->next_in if we use it as window */
; 237  : }

  0001c	5d		 pop	 ebp
  0001d	c2 10 00	 ret	 16			; 00000010H
_deflateInit_@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _slide_hash
_TEXT	SEGMENT
tv243 = -4						; size = 4
_slide_hash PROC					; COMDAT
; _s$ = ecx

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 204  :     unsigned n, m;
; 205  :     Posf *p;
; 206  :     uInt wsize = s->w_size;
; 207  : 
; 208  :     n = s->hash_size;

  00009	8b 7b 4c	 mov	 edi, DWORD PTR [ebx+76]

; 209  :     p = &s->head[n];

  0000c	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]
  0000f	8b 53 2c	 mov	 edx, DWORD PTR [ebx+44]
  00012	8d 34 78	 lea	 esi, DWORD PTR [eax+edi*2]
$LL4@slide_hash:

; 210  :     do {
; 211  :         m = *--p;

  00015	0f b7 4e fe	 movzx	 ecx, WORD PTR [esi-2]
  00019	8d 76 fe	 lea	 esi, DWORD PTR [esi-2]

; 212  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  0001c	8b c1		 mov	 eax, ecx
  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv243[ebp], 0
  00025	2b c2		 sub	 eax, edx
  00027	3b ca		 cmp	 ecx, edx
  00029	0f b7 c0	 movzx	 eax, ax
  0002c	0f 42 45 fc	 cmovb	 eax, DWORD PTR tv243[ebp]
  00030	66 89 06	 mov	 WORD PTR [esi], ax

; 213  :     } while (--n);

  00033	83 ef 01	 sub	 edi, 1
  00036	75 dd		 jne	 SHORT $LL4@slide_hash

; 214  :     n = wsize;
; 215  : #ifndef FASTEST
; 216  :     p = &s->prev[n];

  00038	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]
  0003b	8b fa		 mov	 edi, edx
  0003d	8d 34 50	 lea	 esi, DWORD PTR [eax+edx*2]
$LL7@slide_hash:

; 217  :     do {
; 218  :         m = *--p;

  00040	0f b7 4e fe	 movzx	 ecx, WORD PTR [esi-2]
  00044	8d 76 fe	 lea	 esi, DWORD PTR [esi-2]

; 219  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  00047	8b c1		 mov	 eax, ecx
  00049	33 db		 xor	 ebx, ebx
  0004b	2b c2		 sub	 eax, edx
  0004d	3b ca		 cmp	 ecx, edx
  0004f	0f b7 c0	 movzx	 eax, ax
  00052	0f 42 c3	 cmovb	 eax, ebx
  00055	66 89 06	 mov	 WORD PTR [esi], ax

; 220  :         /* If n is not on any hash chain, prev[n] is garbage but
; 221  :          * its value will never be used.
; 222  :          */
; 223  :     } while (--n);

  00058	83 ef 01	 sub	 edi, 1
  0005b	75 e3		 jne	 SHORT $LL7@slide_hash

; 224  : #endif
; 225  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_slide_hash ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateInit2_@32
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_method$ = 16						; size = 4
_windowBits$ = 20					; size = 4
_memLevel$ = 24						; size = 4
_strategy$ = 28						; size = 4
tv460 = 32						; size = 4
_version$ = 32						; size = 4
_stream_size$ = 36					; size = 4
_deflateInit2_@32 PROC					; COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 251  :     deflate_state *s;
; 252  :     int wrap = 1;
; 253  :     static const char my_version[] = ZLIB_VERSION;
; 254  : 
; 255  :     ushf *overlay;
; 256  :     /* We overlay pending_buf and d_buf+l_buf. This works since the average
; 257  :      * output size for (length,distance) codes is <= 24 bits.
; 258  :      */
; 259  : 
; 260  :     if (version == Z_NULL || version[0] != my_version[0] ||

  00003	8b 45 20	 mov	 eax, DWORD PTR _version$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]
  00009	56		 push	 esi
  0000a	be 01 00 00 00	 mov	 esi, 1
  0000f	85 c0		 test	 eax, eax
  00011	0f 84 12 02 00
	00		 je	 $LN3@deflateIni
  00017	80 38 31	 cmp	 BYTE PTR [eax], 49	; 00000031H
  0001a	0f 85 09 02 00
	00		 jne	 $LN3@deflateIni
  00020	83 7d 24 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  00024	0f 85 ff 01 00
	00		 jne	 $LN3@deflateIni

; 263  :     }
; 264  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

  0002a	53		 push	 ebx
  0002b	57		 push	 edi
  0002c	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  0002f	85 ff		 test	 edi, edi
  00031	0f 84 e6 01 00
	00		 je	 $LN12@deflateIni

; 265  : 
; 266  :     strm->msg = Z_NULL;
; 267  :     if (strm->zalloc == (alloc_func)0) {

  00037	83 7f 20 00	 cmp	 DWORD PTR [edi+32], 0
  0003b	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00042	75 0e		 jne	 SHORT $LN5@deflateIni

; 268  : #ifdef Z_SOLO
; 269  :         return Z_STREAM_ERROR;
; 270  : #else
; 271  :         strm->zalloc = zcalloc;

  00044	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], OFFSET _zcalloc

; 272  :         strm->opaque = (voidpf)0;

  0004b	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
$LN5@deflateIni:

; 273  : #endif
; 274  :     }
; 275  :     if (strm->zfree == (free_func)0)

  00052	83 7f 24 00	 cmp	 DWORD PTR [edi+36], 0
  00056	75 07		 jne	 SHORT $LN6@deflateIni

; 276  : #ifdef Z_SOLO
; 277  :         return Z_STREAM_ERROR;
; 278  : #else
; 279  :         strm->zfree = zcfree;

  00058	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], OFFSET _zcfree
$LN6@deflateIni:

; 280  : #endif
; 281  : 
; 282  : #ifdef FASTEST
; 283  :     if (level != 0) level = 1;
; 284  : #else
; 285  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;
; 286  : #endif
; 287  : 
; 288  :     if (windowBits < 0) { /* suppress zlib wrapper */

  0005f	8b 5d 14	 mov	 ebx, DWORD PTR _windowBits$[ebp]
  00062	83 fa ff	 cmp	 edx, -1
  00065	b9 06 00 00 00	 mov	 ecx, 6
  0006a	0f 45 ca	 cmovne	 ecx, edx
  0006d	89 4d 20	 mov	 DWORD PTR tv460[ebp], ecx
  00070	85 db		 test	 ebx, ebx
  00072	79 06		 jns	 SHORT $LN8@deflateIni

; 289  :         wrap = 0;

  00074	33 f6		 xor	 esi, esi

; 290  :         windowBits = -windowBits;

  00076	f7 db		 neg	 ebx

; 291  :     }

  00078	eb 0d		 jmp	 SHORT $LN10@deflateIni
$LN8@deflateIni:

; 292  : #ifdef GZIP
; 293  :     else if (windowBits > 15) {

  0007a	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  0007d	7e 08		 jle	 SHORT $LN10@deflateIni

; 294  :         wrap = 2;       /* write gzip wrapper instead */

  0007f	be 02 00 00 00	 mov	 esi, 2

; 295  :         windowBits -= 16;

  00084	83 eb 10	 sub	 ebx, 16			; 00000010H
$LN10@deflateIni:

; 296  :     }
; 297  : #endif
; 298  :     if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
; 299  :         windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
; 300  :         strategy < 0 || strategy > Z_FIXED || (windowBits == 8 && wrap != 1)) {

  00087	8b 45 18	 mov	 eax, DWORD PTR _memLevel$[ebp]
  0008a	48		 dec	 eax
  0008b	83 f8 08	 cmp	 eax, 8
  0008e	0f 87 89 01 00
	00		 ja	 $LN12@deflateIni
  00094	83 7d 10 08	 cmp	 DWORD PTR _method$[ebp], 8
  00098	0f 85 7f 01 00
	00		 jne	 $LN12@deflateIni
  0009e	8d 43 f8	 lea	 eax, DWORD PTR [ebx-8]
  000a1	83 f8 07	 cmp	 eax, 7
  000a4	0f 87 73 01 00
	00		 ja	 $LN12@deflateIni
  000aa	83 f9 09	 cmp	 ecx, 9
  000ad	0f 87 6a 01 00
	00		 ja	 $LN12@deflateIni
  000b3	83 7d 1c 04	 cmp	 DWORD PTR _strategy$[ebp], 4
  000b7	0f 87 60 01 00
	00		 ja	 $LN12@deflateIni
  000bd	83 fb 08	 cmp	 ebx, 8
  000c0	75 0c		 jne	 SHORT $LN13@deflateIni
  000c2	83 fe 01	 cmp	 esi, 1
  000c5	0f 85 52 01 00
	00		 jne	 $LN12@deflateIni

; 302  :     }
; 303  :     if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */

  000cb	8d 5e 08	 lea	 ebx, DWORD PTR [esi+8]
$LN13@deflateIni:

; 304  :     s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));

  000ce	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000d1	68 c4 16 00 00	 push	 5828			; 000016c4H
  000d6	6a 01		 push	 1
  000d8	ff 77 28	 push	 DWORD PTR [edi+40]
  000db	ff d0		 call	 eax
  000dd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 305  :     if (s == Z_NULL) return Z_MEM_ERROR;

  000e0	85 c0		 test	 eax, eax
  000e2	0f 84 29 01 00
	00		 je	 $LN22@deflateIni

; 306  :     strm->state = (struct internal_state FAR *)s;

  000e8	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 307  :     s->strm = strm;
; 308  :     s->status = INIT_STATE;     /* to pass state test in deflateReset() */
; 309  : 
; 310  :     s->wrap = wrap;
; 311  :     s->gzhead = Z_NULL;
; 312  :     s->w_bits = (uInt)windowBits;
; 313  :     s->w_size = 1 << s->w_bits;

  000eb	8b cb		 mov	 ecx, ebx
  000ed	89 70 18	 mov	 DWORD PTR [eax+24], esi
  000f0	be 01 00 00 00	 mov	 esi, 1
  000f5	89 58 30	 mov	 DWORD PTR [eax+48], ebx
  000f8	8b d8		 mov	 ebx, eax
  000fa	d3 e6		 shl	 esi, cl

; 314  :     s->w_mask = s->w_size - 1;
; 315  : 
; 316  :     s->hash_bits = (uInt)memLevel + 7;

  000fc	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  000ff	89 38		 mov	 DWORD PTR [eax], edi
  00101	83 c1 07	 add	 ecx, 7
  00104	c7 40 04 2a 00
	00 00		 mov	 DWORD PTR [eax+4], 42	; 0000002aH
  0010b	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  00112	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00115	89 43 34	 mov	 DWORD PTR [ebx+52], eax

; 317  :     s->hash_size = 1 << s->hash_bits;

  00118	b8 01 00 00 00	 mov	 eax, 1
  0011d	d3 e0		 shl	 eax, cl
  0011f	89 43 4c	 mov	 DWORD PTR [ebx+76], eax

; 318  :     s->hash_mask = s->hash_size - 1;

  00122	48		 dec	 eax
  00123	89 43 54	 mov	 DWORD PTR [ebx+84], eax

; 319  :     s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);

  00126	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0012b	89 4b 50	 mov	 DWORD PTR [ebx+80], ecx
  0012e	83 c1 02	 add	 ecx, 2
  00131	f7 e1		 mul	 ecx

; 320  : 
; 321  :     s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));

  00133	6a 02		 push	 2
  00135	d1 ea		 shr	 edx, 1
  00137	89 73 2c	 mov	 DWORD PTR [ebx+44], esi
  0013a	89 53 58	 mov	 DWORD PTR [ebx+88], edx
  0013d	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00140	56		 push	 esi
  00141	ff 77 28	 push	 DWORD PTR [edi+40]
  00144	ff d0		 call	 eax

; 322  :     s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));

  00146	6a 02		 push	 2
  00148	ff 73 2c	 push	 DWORD PTR [ebx+44]
  0014b	89 43 38	 mov	 DWORD PTR [ebx+56], eax
  0014e	ff 77 28	 push	 DWORD PTR [edi+40]
  00151	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00154	ff d0		 call	 eax

; 323  :     s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

  00156	6a 02		 push	 2
  00158	ff 73 4c	 push	 DWORD PTR [ebx+76]
  0015b	89 43 40	 mov	 DWORD PTR [ebx+64], eax
  0015e	ff 77 28	 push	 DWORD PTR [edi+40]
  00161	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00164	ff d0		 call	 eax

; 324  : 
; 325  :     s->high_water = 0;      /* nothing written to s->window yet */
; 326  : 
; 327  :     s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  00166	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  00169	89 43 44	 mov	 DWORD PTR [ebx+68], eax
  0016c	b8 01 00 00 00	 mov	 eax, 1

; 328  : 
; 329  :     overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);

  00171	6a 04		 push	 4
  00173	c7 83 c0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+5824], 0
  0017d	8d 49 06	 lea	 ecx, DWORD PTR [ecx+6]
  00180	d3 e0		 shl	 eax, cl
  00182	50		 push	 eax
  00183	89 83 9c 16 00
	00		 mov	 DWORD PTR [ebx+5788], eax
  00189	ff 77 28	 push	 DWORD PTR [edi+40]
  0018c	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0018f	ff d0		 call	 eax

; 330  :     s->pending_buf = (uchf *) overlay;
; 331  :     s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);

  00191	8b b3 9c 16 00
	00		 mov	 esi, DWORD PTR [ebx+5788]
  00197	83 c4 30	 add	 esp, 48			; 00000030H

; 332  : 
; 333  :     if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||

  0019a	83 7b 38 00	 cmp	 DWORD PTR [ebx+56], 0
  0019e	8b d0		 mov	 edx, eax
  001a0	89 53 08	 mov	 DWORD PTR [ebx+8], edx
  001a3	8d 0c b5 00 00
	00 00		 lea	 ecx, DWORD PTR [esi*4]
  001aa	89 4b 0c	 mov	 DWORD PTR [ebx+12], ecx
  001ad	74 4d		 je	 SHORT $LN16@deflateIni
  001af	83 7b 40 00	 cmp	 DWORD PTR [ebx+64], 0
  001b3	74 47		 je	 SHORT $LN16@deflateIni
  001b5	83 7b 44 00	 cmp	 DWORD PTR [ebx+68], 0
  001b9	74 41		 je	 SHORT $LN16@deflateIni
  001bb	85 d2		 test	 edx, edx
  001bd	74 3d		 je	 SHORT $LN16@deflateIni

; 339  :     }
; 340  :     s->d_buf = overlay + s->lit_bufsize/sizeof(ush);

  001bf	8b c6		 mov	 eax, esi
  001c1	d1 e8		 shr	 eax, 1

; 341  :     s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
; 342  : 
; 343  :     s->level = level;
; 344  :     s->strategy = strategy;
; 345  :     s->method = (Byte)method;
; 346  : 
; 347  :     return deflateReset(strm);

  001c3	57		 push	 edi
  001c4	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  001c7	89 83 a4 16 00
	00		 mov	 DWORD PTR [ebx+5796], eax
  001cd	8d 04 72	 lea	 eax, DWORD PTR [edx+esi*2]
  001d0	03 c6		 add	 eax, esi
  001d2	89 83 98 16 00
	00		 mov	 DWORD PTR [ebx+5784], eax
  001d8	8b 45 20	 mov	 eax, DWORD PTR tv460[ebp]
  001db	89 83 84 00 00
	00		 mov	 DWORD PTR [ebx+132], eax
  001e1	8b 45 1c	 mov	 eax, DWORD PTR _strategy$[ebp]
  001e4	89 83 88 00 00
	00		 mov	 DWORD PTR [ebx+136], eax
  001ea	8b 45 10	 mov	 eax, DWORD PTR _method$[ebp]
  001ed	88 43 24	 mov	 BYTE PTR [ebx+36], al
  001f0	e8 00 00 00 00	 call	 _deflateReset@4
  001f5	5f		 pop	 edi
  001f6	5b		 pop	 ebx
  001f7	5e		 pop	 esi

; 348  : }

  001f8	5d		 pop	 ebp
  001f9	c2 20 00	 ret	 32			; 00000020H
$LN16@deflateIni:

; 334  :         s->pending_buf == Z_NULL) {
; 335  :         s->status = FINISH_STATE;
; 336  :         strm->msg = ERR_MSG(Z_MEM_ERROR);

  001fc	a1 18 00 00 00	 mov	 eax, DWORD PTR _z_errmsg+24
  00201	c7 43 04 9a 02
	00 00		 mov	 DWORD PTR [ebx+4], 666	; 0000029aH

; 337  :         deflateEnd (strm);

  00208	57		 push	 edi
  00209	89 47 18	 mov	 DWORD PTR [edi+24], eax
  0020c	e8 00 00 00 00	 call	 _deflateEnd@4
$LN22@deflateIni:

; 338  :         return Z_MEM_ERROR;

  00211	5f		 pop	 edi
  00212	5b		 pop	 ebx
  00213	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00218	5e		 pop	 esi

; 348  : }

  00219	5d		 pop	 ebp
  0021a	c2 20 00	 ret	 32			; 00000020H
$LN12@deflateIni:
  0021d	5f		 pop	 edi
  0021e	5b		 pop	 ebx

; 301  :         return Z_STREAM_ERROR;

  0021f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00224	5e		 pop	 esi

; 348  : }

  00225	5d		 pop	 ebp
  00226	c2 20 00	 ret	 32			; 00000020H
$LN3@deflateIni:

; 261  :         stream_size != sizeof(z_stream)) {
; 262  :         return Z_VERSION_ERROR;

  00229	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH
  0022e	5e		 pop	 esi

; 348  : }

  0022f	5d		 pop	 ebp
  00230	c2 20 00	 ret	 32			; 00000020H
_deflateInit2_@32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateStateCheck
_TEXT	SEGMENT
_deflateStateCheck PROC					; COMDAT
; _strm$ = ecx

; 356  :     deflate_state *s;
; 357  :     if (strm == Z_NULL ||
; 358  :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0)

  00000	85 c9		 test	 ecx, ecx
  00002	74 47		 je	 SHORT $LN3@deflateSta
  00004	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  00008	74 41		 je	 SHORT $LN3@deflateSta
  0000a	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  0000e	74 3b		 je	 SHORT $LN3@deflateSta

; 360  :     s = strm->state;

  00010	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]

; 361  :     if (s == Z_NULL || s->strm != strm || (s->status != INIT_STATE &&

  00013	85 c0		 test	 eax, eax
  00015	74 34		 je	 SHORT $LN3@deflateSta
  00017	39 08		 cmp	 DWORD PTR [eax], ecx
  00019	75 30		 jne	 SHORT $LN3@deflateSta
  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001e	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  00021	74 25		 je	 SHORT $LN4@deflateSta
  00023	83 f8 39	 cmp	 eax, 57			; 00000039H
  00026	74 20		 je	 SHORT $LN4@deflateSta
  00028	83 f8 45	 cmp	 eax, 69			; 00000045H
  0002b	74 1b		 je	 SHORT $LN4@deflateSta
  0002d	83 f8 49	 cmp	 eax, 73			; 00000049H
  00030	74 16		 je	 SHORT $LN4@deflateSta
  00032	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  00035	74 11		 je	 SHORT $LN4@deflateSta
  00037	83 f8 67	 cmp	 eax, 103		; 00000067H
  0003a	74 0c		 je	 SHORT $LN4@deflateSta
  0003c	83 f8 71	 cmp	 eax, 113		; 00000071H
  0003f	74 07		 je	 SHORT $LN4@deflateSta
  00041	3d 9a 02 00 00	 cmp	 eax, 666		; 0000029aH
  00046	75 03		 jne	 SHORT $LN3@deflateSta
$LN4@deflateSta:

; 362  : #ifdef GZIP
; 363  :                                            s->status != GZIP_STATE &&
; 364  : #endif
; 365  :                                            s->status != EXTRA_STATE &&
; 366  :                                            s->status != NAME_STATE &&
; 367  :                                            s->status != COMMENT_STATE &&
; 368  :                                            s->status != HCRC_STATE &&
; 369  :                                            s->status != BUSY_STATE &&
; 370  :                                            s->status != FINISH_STATE))
; 371  :         return 1;
; 372  :     return 0;

  00048	33 c0		 xor	 eax, eax

; 373  : }

  0004a	c3		 ret	 0
$LN3@deflateSta:

; 359  :         return 1;

  0004b	b8 01 00 00 00	 mov	 eax, 1

; 373  : }

  00050	c3		 ret	 0
_deflateStateCheck ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateSetDictionary@12
_TEXT	SEGMENT
_avail$1$ = -8						; size = 4
_wrap$1$ = -4						; size = 4
_strm$ = 8						; size = 4
_n$1$ = 12						; size = 4
_dictionary$ = 12					; size = 4
_next$1$ = 16						; size = 4
_dictLength$ = 16					; size = 4
_deflateSetDictionary@12 PROC				; COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  :     deflate_state *s;
; 382  :     uInt str, n;
; 383  :     int wrap;
; 384  :     unsigned avail;
; 385  :     z_const unsigned char *next;
; 386  : 
; 387  :     if (deflateStateCheck(strm) || dictionary == Z_NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _deflateStateCheck
  00010	85 c0		 test	 eax, eax
  00012	0f 85 77 01 00
	00		 jne	 $LN8@deflateSet
  00018	8b 5d 0c	 mov	 ebx, DWORD PTR _dictionary$[ebp]
  0001b	85 db		 test	 ebx, ebx
  0001d	0f 84 6c 01 00
	00		 je	 $LN8@deflateSet

; 389  :     s = strm->state;

  00023	8b 71 1c	 mov	 esi, DWORD PTR [ecx+28]

; 390  :     wrap = s->wrap;

  00026	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00029	89 45 fc	 mov	 DWORD PTR _wrap$1$[ebp], eax

; 391  :     if (wrap == 2 || (wrap == 1 && s->status != INIT_STATE) || s->lookahead)

  0002c	83 f8 02	 cmp	 eax, 2
  0002f	0f 84 5a 01 00
	00		 je	 $LN8@deflateSet
  00035	83 f8 01	 cmp	 eax, 1
  00038	75 0a		 jne	 SHORT $LN11@deflateSet
  0003a	83 7e 04 2a	 cmp	 DWORD PTR [esi+4], 42	; 0000002aH
  0003e	0f 85 4b 01 00
	00		 jne	 $LN8@deflateSet
$LN11@deflateSet:
  00044	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00048	0f 85 41 01 00
	00		 jne	 $LN8@deflateSet

; 392  :         return Z_STREAM_ERROR;
; 393  : 
; 394  :     /* when using zlib wrappers, compute Adler-32 for provided dictionary */
; 395  :     if (wrap == 1)

  0004e	57		 push	 edi
  0004f	8b 7d 10	 mov	 edi, DWORD PTR _dictLength$[ebp]
  00052	83 f8 01	 cmp	 eax, 1
  00055	75 13		 jne	 SHORT $LN12@deflateSet

; 396  :         strm->adler = adler32(strm->adler, dictionary, dictLength);

  00057	57		 push	 edi
  00058	53		 push	 ebx
  00059	ff 71 30	 push	 DWORD PTR [ecx+48]
  0005c	e8 00 00 00 00	 call	 _adler32@12
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00064	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  00067	8b 45 fc	 mov	 eax, DWORD PTR _wrap$1$[ebp]
$LN12@deflateSet:

; 397  :     s->wrap = 0;                    /* avoid computing Adler-32 in read_buf */

  0006a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 398  : 
; 399  :     /* if dictionary would fill window, just replace the history */
; 400  :     if (dictLength >= s->w_size) {

  00071	3b 7e 2c	 cmp	 edi, DWORD PTR [esi+44]
  00074	72 48		 jb	 SHORT $LN27@deflateSet

; 401  :         if (wrap == 0) {            /* already empty otherwise */

  00076	85 c0		 test	 eax, eax
  00078	75 3c		 jne	 SHORT $LN26@deflateSet

; 402  :             CLEAR_HASH(s);

  0007a	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0007d	33 d2		 xor	 edx, edx
  0007f	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00082	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  00087	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0008a	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  00091	50		 push	 eax
  00092	52		 push	 edx
  00093	ff 76 44	 push	 DWORD PTR [esi+68]
  00096	e8 00 00 00 00	 call	 _memset
  0009b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 403  :             s->strstart = 0;

  0009e	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 404  :             s->block_start = 0L;

  000a5	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 405  :             s->insert = 0;

  000ac	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0
$LN26@deflateSet:

; 406  :         }
; 407  :         dictionary += dictLength - s->w_size;  /* use the tail */

  000b6	2b 7e 2c	 sub	 edi, DWORD PTR [esi+44]
  000b9	03 df		 add	 ebx, edi

; 408  :         dictLength = s->w_size;

  000bb	8b 7e 2c	 mov	 edi, DWORD PTR [esi+44]
$LN27@deflateSet:

; 409  :     }
; 410  : 
; 411  :     /* insert dictionary into window and hash */
; 412  :     avail = strm->avail_in;

  000be	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000c1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c4	89 4d f8	 mov	 DWORD PTR _avail$1$[ebp], ecx

; 413  :     next = strm->next_in;

  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	89 4d 10	 mov	 DWORD PTR _next$1$[ebp], ecx

; 414  :     strm->avail_in = dictLength;
; 415  :     strm->next_in = (z_const Bytef *)dictionary;
; 416  :     fill_window(s);

  000cc	8b ce		 mov	 ecx, esi
  000ce	89 78 04	 mov	 DWORD PTR [eax+4], edi
  000d1	89 18		 mov	 DWORD PTR [eax], ebx
  000d3	e8 00 00 00 00	 call	 _fill_window

; 417  :     while (s->lookahead >= MIN_MATCH) {

  000d8	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  000db	83 f9 03	 cmp	 ecx, 3
  000de	72 65		 jb	 SHORT $LN3@deflateSet
$LL2@deflateSet:

; 418  :         str = s->strstart;

  000e0	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]

; 419  :         n = s->lookahead - (MIN_MATCH-1);

  000e3	83 c1 fe	 add	 ecx, -2			; fffffffeH
  000e6	89 4d 0c	 mov	 DWORD PTR _n$1$[ebp], ecx
  000e9	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@deflateSet:

; 420  :         do {
; 421  :             UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  000f0	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  000f3	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 422  : #ifndef FASTEST
; 423  :             s->prev[str & s->w_mask] = s->head[s->ins_h];

  000f6	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  000f9	23 d3		 and	 edx, ebx
  000fb	0f b6 7c 18 02	 movzx	 edi, BYTE PTR [eax+ebx+2]
  00100	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  00103	d3 e0		 shl	 eax, cl
  00105	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00108	33 f8		 xor	 edi, eax
  0010a	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  0010d	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00110	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  00113	66 8b 04 78	 mov	 ax, WORD PTR [eax+edi*2]
  00117	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 424  : #endif
; 425  :             s->head[s->ins_h] = (Pos)str;

  0011b	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0011e	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00121	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx

; 426  :             str++;

  00125	43		 inc	 ebx

; 427  :         } while (--n);

  00126	83 6d 0c 01	 sub	 DWORD PTR _n$1$[ebp], 1
  0012a	75 c4		 jne	 SHORT $LL6@deflateSet

; 428  :         s->strstart = str;
; 429  :         s->lookahead = MIN_MATCH-1;
; 430  :         fill_window(s);

  0012c	8b ce		 mov	 ecx, esi
  0012e	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  00131	c7 46 74 02 00
	00 00		 mov	 DWORD PTR [esi+116], 2
  00138	e8 00 00 00 00	 call	 _fill_window
  0013d	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  00140	83 f9 03	 cmp	 ecx, 3
  00143	73 9b		 jae	 SHORT $LL2@deflateSet
$LN3@deflateSet:

; 431  :     }
; 432  :     s->strstart += s->lookahead;

  00145	01 4e 6c	 add	 DWORD PTR [esi+108], ecx
  00148	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]

; 433  :     s->block_start = (long)s->strstart;
; 434  :     s->insert = s->lookahead;

  0014b	89 8e b4 16 00
	00		 mov	 DWORD PTR [esi+5812], ecx

; 435  :     s->lookahead = 0;
; 436  :     s->match_length = s->prev_length = MIN_MATCH-1;
; 437  :     s->match_available = 0;
; 438  :     strm->next_in = next;

  00151	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00154	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00157	8b 45 10	 mov	 eax, DWORD PTR _next$1$[ebp]
  0015a	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  00161	c7 46 78 02 00
	00 00		 mov	 DWORD PTR [esi+120], 2
  00168	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
  0016f	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  00176	89 01		 mov	 DWORD PTR [ecx], eax

; 439  :     strm->avail_in = avail;

  00178	8b 45 f8	 mov	 eax, DWORD PTR _avail$1$[ebp]
  0017b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 440  :     s->wrap = wrap;

  0017e	8b 45 fc	 mov	 eax, DWORD PTR _wrap$1$[ebp]

; 441  :     return Z_OK;

  00181	5f		 pop	 edi
  00182	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00185	33 c0		 xor	 eax, eax
  00187	5e		 pop	 esi

; 442  : }

  00188	5b		 pop	 ebx
  00189	8b e5		 mov	 esp, ebp
  0018b	5d		 pop	 ebp
  0018c	c2 0c 00	 ret	 12			; 0000000cH
$LN8@deflateSet:
  0018f	5e		 pop	 esi

; 388  :         return Z_STREAM_ERROR;

  00190	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 442  : }

  00195	5b		 pop	 ebx
  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c2 0c 00	 ret	 12			; 0000000cH
_deflateSetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateGetDictionary@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateGetDictionary@12 PROC				; COMDAT

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 450  :     deflate_state *s;
; 451  :     uInt len;
; 452  : 
; 453  :     if (deflateStateCheck(strm))

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 09		 je	 SHORT $LN2@deflateGet

; 454  :         return Z_STREAM_ERROR;

  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 464  : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
$LN2@deflateGet:

; 455  :     s = strm->state;

  00018	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0001b	56		 push	 esi

; 456  :     len = s->strstart + s->lookahead;

  0001c	8b 4a 74	 mov	 ecx, DWORD PTR [edx+116]
  0001f	03 4a 6c	 add	 ecx, DWORD PTR [edx+108]

; 457  :     if (len > s->w_size)

  00022	8b 72 2c	 mov	 esi, DWORD PTR [edx+44]

; 458  :         len = s->w_size;
; 459  :     if (dictionary != Z_NULL && len)

  00025	3b ce		 cmp	 ecx, esi
  00027	0f 46 f1	 cmovbe	 esi, ecx
  0002a	83 7d 0c 00	 cmp	 DWORD PTR _dictionary$[ebp], 0
  0002e	74 18		 je	 SHORT $LN4@deflateGet
  00030	85 f6		 test	 esi, esi
  00032	74 14		 je	 SHORT $LN4@deflateGet

; 460  :         zmemcpy(dictionary, s->window + s->strstart + s->lookahead - len, len);

  00034	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00037	2b c6		 sub	 eax, esi
  00039	56		 push	 esi
  0003a	03 c1		 add	 eax, ecx
  0003c	50		 push	 eax
  0003d	ff 75 0c	 push	 DWORD PTR _dictionary$[ebp]
  00040	e8 00 00 00 00	 call	 _memcpy
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@deflateGet:

; 461  :     if (dictLength != Z_NULL)

  00048	8b 45 10	 mov	 eax, DWORD PTR _dictLength$[ebp]
  0004b	85 c0		 test	 eax, eax
  0004d	74 02		 je	 SHORT $LN5@deflateGet

; 462  :         *dictLength = len;

  0004f	89 30		 mov	 DWORD PTR [eax], esi
$LN5@deflateGet:

; 463  :     return Z_OK;

  00051	33 c0		 xor	 eax, eax
  00053	5e		 pop	 esi

; 464  : }

  00054	5d		 pop	 ebp
  00055	c2 0c 00	 ret	 12			; 0000000cH
_deflateGetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateResetKeep@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateResetKeep@4 PROC				; COMDAT

; 469  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 470  :     deflate_state *s;
; 471  : 
; 472  :     if (deflateStateCheck(strm)) {

  00004	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  00007	8b cf		 mov	 ecx, edi
  00009	e8 00 00 00 00	 call	 _deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 0a		 je	 SHORT $LN2@deflateRes

; 473  :         return Z_STREAM_ERROR;

  00012	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00017	5f		 pop	 edi

; 502  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN2@deflateRes:
  0001c	56		 push	 esi

; 474  :     }
; 475  : 
; 476  :     strm->total_in = strm->total_out = 0;
; 477  :     strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */
; 478  :     strm->data_type = Z_UNKNOWN;
; 479  : 
; 480  :     s = (deflate_state *)strm->state;

  0001d	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]
  00020	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00027	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0002e	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00035	c7 47 2c 02 00
	00 00		 mov	 DWORD PTR [edi+44], 2

; 481  :     s->pending = 0;
; 482  :     s->pending_out = s->pending_buf;
; 483  : 
; 484  :     if (s->wrap < 0) {

  0003c	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0003f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00042	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00049	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0004c	85 c9		 test	 ecx, ecx
  0004e	79 05		 jns	 SHORT $LN3@deflateRes

; 485  :         s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */

  00050	f7 d9		 neg	 ecx
  00052	89 4e 18	 mov	 DWORD PTR [esi+24], ecx
$LN3@deflateRes:

; 486  :     }
; 487  :     s->status =

  00055	6a 00		 push	 0
  00057	6a 00		 push	 0
  00059	6a 00		 push	 0
  0005b	83 f9 02	 cmp	 ecx, 2
  0005e	75 0e		 jne	 SHORT $LN5@deflateRes
  00060	c7 46 04 39 00
	00 00		 mov	 DWORD PTR [esi+4], 57	; 00000039H

; 488  : #ifdef GZIP
; 489  :         s->wrap == 2 ? GZIP_STATE :
; 490  : #endif
; 491  :         s->wrap ? INIT_STATE : BUSY_STATE;
; 492  :     strm->adler =

  00067	e8 00 00 00 00	 call	 _crc32@12
  0006c	eb 17		 jmp	 SHORT $LN8@deflateRes
$LN5@deflateRes:

; 486  :     }
; 487  :     s->status =

  0006e	85 c9		 test	 ecx, ecx
  00070	ba 2a 00 00 00	 mov	 edx, 42			; 0000002aH
  00075	b8 71 00 00 00	 mov	 eax, 113		; 00000071H
  0007a	0f 45 c2	 cmovne	 eax, edx
  0007d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 488  : #ifdef GZIP
; 489  :         s->wrap == 2 ? GZIP_STATE :
; 490  : #endif
; 491  :         s->wrap ? INIT_STATE : BUSY_STATE;
; 492  :     strm->adler =

  00080	e8 00 00 00 00	 call	 _adler32@12
$LN8@deflateRes:
  00085	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 493  : #ifdef GZIP
; 494  :         s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
; 495  : #endif
; 496  :         adler32(0L, Z_NULL, 0);
; 497  :     s->last_flush = Z_NO_FLUSH;
; 498  : 
; 499  :     _tr_init(s);

  00088	8b ce		 mov	 ecx, esi
  0008a	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  00091	e8 00 00 00 00	 call	 __tr_init

; 500  : 
; 501  :     return Z_OK;

  00096	5e		 pop	 esi
  00097	33 c0		 xor	 eax, eax
  00099	5f		 pop	 edi

; 502  : }

  0009a	5d		 pop	 ebp
  0009b	c2 04 00	 ret	 4
_deflateResetKeep@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateReset@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateReset@4 PROC					; COMDAT

; 507  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 508  :     int ret;
; 509  : 
; 510  :     ret = deflateResetKeep(strm);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  00008	57		 push	 edi
  00009	e8 00 00 00 00	 call	 _deflateResetKeep@4
  0000e	8b f0		 mov	 esi, eax

; 511  :     if (ret == Z_OK)

  00010	85 f6		 test	 esi, esi
  00012	75 0a		 jne	 SHORT $LN2@deflateRes

; 512  :         lm_init(strm->state);

  00014	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  00017	e8 00 00 00 00	 call	 _lm_init

; 513  :     return ret;

  0001c	8b c6		 mov	 eax, esi
$LN2@deflateRes:

; 514  : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
_deflateReset@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateSetHeader@8
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_deflateSetHeader@8 PROC				; COMDAT

; 520  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 521  :     if (deflateStateCheck(strm) || strm->state->wrap != 2)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	75 15		 jne	 SHORT $LN3@deflateSet
  0000f	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00012	83 79 18 02	 cmp	 DWORD PTR [ecx+24], 2
  00016	75 0c		 jne	 SHORT $LN3@deflateSet

; 523  :     strm->state->gzhead = head;

  00018	8b 45 0c	 mov	 eax, DWORD PTR _head$[ebp]
  0001b	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 524  :     return Z_OK;

  0001e	33 c0		 xor	 eax, eax

; 525  : }

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
$LN3@deflateSet:

; 522  :         return Z_STREAM_ERROR;

  00024	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 525  : }

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
_deflateSetHeader@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflatePending@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_pending$ = 12						; size = 4
_bits$ = 16						; size = 4
_deflatePending@12 PROC					; COMDAT

; 532  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]

; 533  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 09		 je	 SHORT $LN2@deflatePen
  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 539  : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
$LN2@deflatePen:

; 534  :     if (pending != Z_NULL)

  00018	8b 55 0c	 mov	 edx, DWORD PTR _pending$[ebp]
  0001b	85 d2		 test	 edx, edx
  0001d	74 08		 je	 SHORT $LN6@deflatePen

; 535  :         *pending = strm->state->pending;

  0001f	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00022	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00025	89 02		 mov	 DWORD PTR [edx], eax
$LN6@deflatePen:

; 536  :     if (bits != Z_NULL)

  00027	8b 55 10	 mov	 edx, DWORD PTR _bits$[ebp]
  0002a	85 d2		 test	 edx, edx
  0002c	74 0b		 je	 SHORT $LN4@deflatePen

; 537  :         *bits = strm->state->bi_valid;

  0002e	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00031	8b 80 bc 16 00
	00		 mov	 eax, DWORD PTR [eax+5820]
  00037	89 02		 mov	 DWORD PTR [edx], eax
$LN4@deflatePen:

; 538  :     return Z_OK;

  00039	33 c0		 xor	 eax, eax

; 539  : }

  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
_deflatePending@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflatePrime@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_deflatePrime@12 PROC					; COMDAT

; 546  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 547  :     deflate_state *s;
; 548  :     int put;
; 549  : 
; 550  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 09		 je	 SHORT $LN5@deflatePri
  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 565  : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
$LN5@deflatePri:
  00018	56		 push	 esi

; 551  :     s = strm->state;

  00019	8b 71 1c	 mov	 esi, DWORD PTR [ecx+28]

; 552  :     if ((Bytef *)(s->d_buf) < s->pending_out + ((Buf_size + 7) >> 3))

  0001c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0001f	83 c0 02	 add	 eax, 2
  00022	39 86 a4 16 00
	00		 cmp	 DWORD PTR [esi+5796], eax
  00028	73 0a		 jae	 SHORT $LN11@deflatePri

; 553  :         return Z_BUF_ERROR;

  0002a	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  0002f	5e		 pop	 esi

; 565  : }

  00030	5d		 pop	 ebp
  00031	c2 0c 00	 ret	 12			; 0000000cH
$LN11@deflatePri:
  00034	53		 push	 ebx
  00035	8b 5d 0c	 mov	 ebx, DWORD PTR _bits$[ebp]
  00038	57		 push	 edi
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@deflatePri:

; 554  :     do {
; 555  :         put = Buf_size - s->bi_valid;

  00040	8b 96 bc 16 00
	00		 mov	 edx, DWORD PTR [esi+5820]
  00046	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0004b	2b c2		 sub	 eax, edx

; 556  :         if (put > bits)
; 557  :             put = bits;
; 558  :         s->bi_buf |= (ush)((value & ((1 << put) - 1)) << s->bi_valid);

  0004d	8b fb		 mov	 edi, ebx
  0004f	3b c3		 cmp	 eax, ebx
  00051	0f 4e f8	 cmovle	 edi, eax
  00054	b8 01 00 00 00	 mov	 eax, 1
  00059	8b cf		 mov	 ecx, edi
  0005b	66 d3 e0	 shl	 ax, cl
  0005e	8b ca		 mov	 ecx, edx
  00060	66 48		 dec	 ax
  00062	66 23 45 10	 and	 ax, WORD PTR _value$[ebp]
  00066	66 d3 e0	 shl	 ax, cl

; 559  :         s->bi_valid += put;
; 560  :         _tr_flush_bits(s);

  00069	8b ce		 mov	 ecx, esi
  0006b	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  00072	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]
  00075	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  0007b	e8 00 00 00 00	 call	 __tr_flush_bits

; 561  :         value >>= put;

  00080	8b cf		 mov	 ecx, edi
  00082	d3 7d 10	 sar	 DWORD PTR _value$[ebp], cl

; 562  :         bits -= put;

  00085	2b df		 sub	 ebx, edi

; 563  :     } while (bits);

  00087	75 b7		 jne	 SHORT $LL4@deflatePri

; 564  :     return Z_OK;

  00089	5f		 pop	 edi
  0008a	5b		 pop	 ebx
  0008b	33 c0		 xor	 eax, eax
  0008d	5e		 pop	 esi

; 565  : }

  0008e	5d		 pop	 ebp
  0008f	c2 0c 00	 ret	 12			; 0000000cH
_deflatePrime@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateParams@12
_TEXT	SEGMENT
tv376 = -4						; size = 4
_strm$ = 8						; size = 4
$T1 = 12						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_deflateParams@12 PROC					; COMDAT

; 572  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 573  :     deflate_state *s;
; 574  :     compress_func func;
; 575  : 
; 576  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00004	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00007	8b ca		 mov	 ecx, edx
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR _level$[ebp]
  0000f	e8 00 00 00 00	 call	 _deflateStateCheck
  00014	85 c0		 test	 eax, eax
  00016	0f 85 2c 01 00
	00		 jne	 $LN5@deflatePar

; 577  :     s = strm->state;

  0001c	8b 72 1c	 mov	 esi, DWORD PTR [edx+28]

; 578  : 
; 579  : #ifdef FASTEST
; 580  :     if (level != 0) level = 1;
; 581  : #else
; 582  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;
; 583  : #endif
; 584  :     if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {

  0001f	83 ff ff	 cmp	 edi, -1
  00022	bb 06 00 00 00	 mov	 ebx, 6
  00027	0f 45 df	 cmovne	 ebx, edi
  0002a	83 fb 09	 cmp	 ebx, 9
  0002d	0f 87 15 01 00
	00		 ja	 $LN5@deflatePar
  00033	8b 45 10	 mov	 eax, DWORD PTR _strategy$[ebp]
  00036	83 f8 04	 cmp	 eax, 4
  00039	0f 87 09 01 00
	00		 ja	 $LN5@deflatePar

; 588  : 
; 589  :     if ((strategy != s->strategy || func != configuration_table[level].func) &&

  0003f	8d 3c 5b	 lea	 edi, DWORD PTR [ebx+ebx*2]
  00042	c1 e7 02	 shl	 edi, 2
  00045	8d 8e 84 00 00
	00		 lea	 ecx, DWORD PTR [esi+132]
  0004b	3b 86 88 00 00
	00		 cmp	 eax, DWORD PTR [esi+136]
  00051	75 17		 jne	 SHORT $LN15@deflatePar

; 585  :         return Z_STREAM_ERROR;
; 586  :     }
; 587  :     func = configuration_table[s->level].func;

  00053	8b 01		 mov	 eax, DWORD PTR [ecx]
  00055	89 4d 0c	 mov	 DWORD PTR $T1[ebp], ecx
  00058	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]

; 588  : 
; 589  :     if ((strategy != s->strategy || func != configuration_table[level].func) &&

  0005b	8b 04 85 08 00
	00 00		 mov	 eax, DWORD PTR _configuration_table[eax*4+8]
  00062	3b 87 08 00 00
	00		 cmp	 eax, DWORD PTR _configuration_table[edi+8]
  00068	74 3f		 je	 SHORT $LN9@deflatePar
$LN15@deflatePar:
  0006a	83 be c0 16 00
	00 00		 cmp	 DWORD PTR [esi+5824], 0
  00071	8b c1		 mov	 eax, ecx
  00073	89 45 fc	 mov	 DWORD PTR tv376[ebp], eax
  00076	89 4d 0c	 mov	 DWORD PTR $T1[ebp], ecx
  00079	74 2e		 je	 SHORT $LN9@deflatePar

; 590  :         s->high_water) {
; 591  :         /* Flush the last buffer: */
; 592  :         int err = deflate(strm, Z_BLOCK);

  0007b	6a 05		 push	 5
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 _deflate@8

; 593  :         if (err == Z_STREAM_ERROR)

  00083	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  00086	0f 84 bc 00 00
	00		 je	 $LN5@deflatePar

; 594  :             return err;
; 595  :         if (strm->avail_out == 0)

  0008c	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR tv376[ebp]
  00092	89 4d 0c	 mov	 DWORD PTR $T1[ebp], ecx
  00095	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00099	75 0e		 jne	 SHORT $LN9@deflatePar

; 614  : }

  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  000a2	5b		 pop	 ebx
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c2 0c 00	 ret	 12			; 0000000cH
$LN9@deflatePar:

; 596  :             return Z_BUF_ERROR;
; 597  :     }
; 598  :     if (s->level != level) {

  000a9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ab	3b c3		 cmp	 eax, ebx
  000ad	0f 84 81 00 00
	00		 je	 $LN10@deflatePar

; 599  :         if (s->level == 0 && s->matches != 0) {

  000b3	85 c0		 test	 eax, eax
  000b5	75 4a		 jne	 SHORT $LN11@deflatePar
  000b7	8b 86 b0 16 00
	00		 mov	 eax, DWORD PTR [esi+5808]
  000bd	85 c0		 test	 eax, eax
  000bf	74 40		 je	 SHORT $LN11@deflatePar

; 600  :             if (s->matches == 1)

  000c1	83 f8 01	 cmp	 eax, 1
  000c4	75 09		 jne	 SHORT $LN12@deflatePar

; 601  :                 slide_hash(s);

  000c6	8b ce		 mov	 ecx, esi
  000c8	e8 00 00 00 00	 call	 _slide_hash
  000cd	eb 0d		 jmp	 SHORT $LN13@deflatePar
$LN12@deflatePar:

; 602  :             else
; 603  :                 CLEAR_HASH(s);

  000cf	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  000d2	33 d2		 xor	 edx, edx
  000d4	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000d7	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
$LN13@deflatePar:
  000dc	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  000df	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  000e6	50		 push	 eax
  000e7	6a 00		 push	 0
  000e9	ff 76 44	 push	 DWORD PTR [esi+68]
  000ec	e8 00 00 00 00	 call	 _memset
  000f1	8b 4d 0c	 mov	 ecx, DWORD PTR $T1[ebp]
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 604  :             s->matches = 0;

  000f7	c7 86 b0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5808], 0
$LN11@deflatePar:

; 605  :         }
; 606  :         s->level = level;

  00101	89 19		 mov	 DWORD PTR [ecx], ebx

; 607  :         s->max_lazy_match   = configuration_table[level].max_lazy;

  00103	0f b7 87 02 00
	00 00		 movzx	 eax, WORD PTR _configuration_table[edi+2]
  0010a	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax

; 608  :         s->good_match       = configuration_table[level].good_length;

  00110	0f b7 87 00 00
	00 00		 movzx	 eax, WORD PTR _configuration_table[edi]
  00117	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax

; 609  :         s->nice_match       = configuration_table[level].nice_length;

  0011d	0f b7 87 04 00
	00 00		 movzx	 eax, WORD PTR _configuration_table[edi+4]
  00124	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 610  :         s->max_chain_length = configuration_table[level].max_chain;

  0012a	0f b7 87 06 00
	00 00		 movzx	 eax, WORD PTR _configuration_table[edi+6]
  00131	89 46 7c	 mov	 DWORD PTR [esi+124], eax
$LN10@deflatePar:

; 611  :     }
; 612  :     s->strategy = strategy;

  00134	8b 45 10	 mov	 eax, DWORD PTR _strategy$[ebp]
  00137	5f		 pop	 edi
  00138	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax

; 613  :     return Z_OK;

  0013e	33 c0		 xor	 eax, eax

; 614  : }

  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c2 0c 00	 ret	 12			; 0000000cH
$LN5@deflatePar:
  00148	5f		 pop	 edi
  00149	5e		 pop	 esi
  0014a	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0014f	5b		 pop	 ebx
  00150	8b e5		 mov	 esp, ebp
  00152	5d		 pop	 ebp
  00153	c2 0c 00	 ret	 12			; 0000000cH
_deflateParams@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateTune@20
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_good_length$ = 12					; size = 4
_max_lazy$ = 16						; size = 4
_nice_length$ = 20					; size = 4
_max_chain$ = 24					; size = 4
_deflateTune@20 PROC					; COMDAT

; 623  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 624  :     deflate_state *s;
; 625  : 
; 626  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 09		 je	 SHORT $LN2@deflateTun
  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 633  : }

  00014	5d		 pop	 ebp
  00015	c2 14 00	 ret	 20			; 00000014H
$LN2@deflateTun:

; 627  :     s = strm->state;

  00018	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]

; 628  :     s->good_match = (uInt)good_length;

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _good_length$[ebp]
  0001e	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 629  :     s->max_lazy_match = (uInt)max_lazy;

  00024	8b 45 10	 mov	 eax, DWORD PTR _max_lazy$[ebp]
  00027	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax

; 630  :     s->nice_match = nice_length;

  0002d	8b 45 14	 mov	 eax, DWORD PTR _nice_length$[ebp]
  00030	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 631  :     s->max_chain_length = (uInt)max_chain;

  00036	8b 45 18	 mov	 eax, DWORD PTR _max_chain$[ebp]
  00039	89 41 7c	 mov	 DWORD PTR [ecx+124], eax

; 632  :     return Z_OK;

  0003c	33 c0		 xor	 eax, eax

; 633  : }

  0003e	5d		 pop	 ebp
  0003f	c2 14 00	 ret	 20			; 00000014H
_deflateTune@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateBound@8
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_complen$1$ = 12					; size = 4
_sourceLen$ = 12					; size = 4
_deflateBound@8 PROC					; COMDAT

; 655  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 656  :     deflate_state *s;
; 657  :     uLong complen, wraplen;
; 658  : 
; 659  :     /* conservative upper bound for compressed data */
; 660  :     complen = sourceLen +
; 661  :               ((sourceLen + 7) >> 3) + ((sourceLen + 63) >> 6) + 5;
; 662  : 
; 663  :     /* if can't get parameters, return conservative bound plus zlib wrapper */
; 664  :     if (deflateStateCheck(strm))

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 0c	 mov	 edi, DWORD PTR _sourceLen$[ebp]
  0000a	8d 57 3f	 lea	 edx, DWORD PTR [edi+63]
  0000d	8d 47 07	 lea	 eax, DWORD PTR [edi+7]
  00010	c1 ea 06	 shr	 edx, 6
  00013	c1 e8 03	 shr	 eax, 3
  00016	03 d7		 add	 edx, edi
  00018	83 c0 05	 add	 eax, 5
  0001b	03 d0		 add	 edx, eax
  0001d	89 55 0c	 mov	 DWORD PTR _complen$1$[ebp], edx
  00020	e8 00 00 00 00	 call	 _deflateStateCheck
  00025	85 c0		 test	 eax, eax
  00027	74 08		 je	 SHORT $LN10@deflateBou

; 665  :         return complen + 6;

  00029	8d 42 06	 lea	 eax, DWORD PTR [edx+6]
  0002c	5f		 pop	 edi

; 708  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 709  : }

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
$LN10@deflateBou:
  00031	53		 push	 ebx
  00032	56		 push	 esi

; 666  : 
; 667  :     /* compute wrapper length */
; 668  :     s = strm->state;

  00033	8b 71 1c	 mov	 esi, DWORD PTR [ecx+28]

; 669  :     switch (s->wrap) {

  00036	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00039	83 e8 00	 sub	 eax, 0
  0003c	74 6c		 je	 SHORT $LN11@deflateBou
  0003e	83 e8 01	 sub	 eax, 1
  00041	74 56		 je	 SHORT $LN12@deflateBou
  00043	83 e8 01	 sub	 eax, 1
  00046	74 07		 je	 SHORT $LN13@deflateBou

; 697  : #endif
; 698  :     default:                                /* for compiler happiness */
; 699  :         wraplen = 6;

  00048	bb 06 00 00 00	 mov	 ebx, 6
  0004d	eb 62		 jmp	 SHORT $LN2@deflateBou
$LN13@deflateBou:

; 676  : #ifdef GZIP
; 677  :     case 2:                                 /* gzip wrapper */
; 678  :         wraplen = 18;
; 679  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

  0004f	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00052	bb 12 00 00 00	 mov	 ebx, 18			; 00000012H
  00057	85 d2		 test	 edx, edx
  00059	74 53		 je	 SHORT $LN29@deflateBou

; 680  :             Bytef *str;
; 681  :             if (s->gzhead->extra != Z_NULL)

  0005b	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  0005f	74 06		 je	 SHORT $LN15@deflateBou

; 682  :                 wraplen += 2 + s->gzhead->extra_len;

  00061	8b 5a 14	 mov	 ebx, DWORD PTR [edx+20]
  00064	83 c3 14	 add	 ebx, 20			; 00000014H
$LN15@deflateBou:

; 683  :             str = s->gzhead->name;

  00067	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]

; 684  :             if (str != Z_NULL)

  0006a	85 c9		 test	 ecx, ecx
  0006c	74 0c		 je	 SHORT $LN5@deflateBou
  0006e	66 90		 npad	 2
$LL6@deflateBou:

; 685  :                 do {
; 686  :                     wraplen++;
; 687  :                 } while (*str++);

  00070	8a 01		 mov	 al, BYTE PTR [ecx]
  00072	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00075	43		 inc	 ebx
  00076	84 c0		 test	 al, al
  00078	75 f6		 jne	 SHORT $LL6@deflateBou
$LN5@deflateBou:

; 688  :             str = s->gzhead->comment;

  0007a	8b 4a 24	 mov	 ecx, DWORD PTR [edx+36]

; 689  :             if (str != Z_NULL)

  0007d	85 c9		 test	 ecx, ecx
  0007f	74 0a		 je	 SHORT $LN8@deflateBou
$LL9@deflateBou:

; 690  :                 do {
; 691  :                     wraplen++;
; 692  :                 } while (*str++);

  00081	8a 01		 mov	 al, BYTE PTR [ecx]
  00083	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00086	43		 inc	 ebx
  00087	84 c0		 test	 al, al
  00089	75 f6		 jne	 SHORT $LL9@deflateBou
$LN8@deflateBou:

; 693  :             if (s->gzhead->hcrc)

  0008b	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  0008f	8b 55 0c	 mov	 edx, DWORD PTR _complen$1$[ebp]
  00092	74 1d		 je	 SHORT $LN2@deflateBou

; 694  :                 wraplen += 2;

  00094	83 c3 02	 add	 ebx, 2

; 695  :         }
; 696  :         break;

  00097	eb 18		 jmp	 SHORT $LN2@deflateBou
$LN12@deflateBou:

; 672  :         break;
; 673  :     case 1:                                 /* zlib wrapper */
; 674  :         wraplen = 6 + (s->strstart ? 4 : 0);

  00099	33 db		 xor	 ebx, ebx
  0009b	39 5e 6c	 cmp	 DWORD PTR [esi+108], ebx
  0009e	0f 95 c3	 setne	 bl
  000a1	8d 1c 9d 06 00
	00 00		 lea	 ebx, DWORD PTR [ebx*4+6]

; 675  :         break;

  000a8	eb 07		 jmp	 SHORT $LN2@deflateBou
$LN11@deflateBou:

; 670  :     case 0:                                 /* raw deflate */
; 671  :         wraplen = 0;

  000aa	33 db		 xor	 ebx, ebx

; 676  : #ifdef GZIP
; 677  :     case 2:                                 /* gzip wrapper */
; 678  :         wraplen = 18;
; 679  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

  000ac	eb 03		 jmp	 SHORT $LN2@deflateBou
$LN29@deflateBou:
  000ae	8b 55 0c	 mov	 edx, DWORD PTR _complen$1$[ebp]
$LN2@deflateBou:

; 700  :     }
; 701  : 
; 702  :     /* if not default parameters, return conservative bound */
; 703  :     if (s->w_bits != 15 || s->hash_bits != 8 + 7)

  000b1	83 7e 30 0f	 cmp	 DWORD PTR [esi+48], 15	; 0000000fH
  000b5	75 27		 jne	 SHORT $LN21@deflateBou
  000b7	83 7e 50 0f	 cmp	 DWORD PTR [esi+80], 15	; 0000000fH
  000bb	75 21		 jne	 SHORT $LN21@deflateBou

; 705  : 
; 706  :     /* default settings: return tight bound for that case */
; 707  :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +

  000bd	8b cf		 mov	 ecx, edi
  000bf	8b d7		 mov	 edx, edi
  000c1	c1 e9 0e	 shr	 ecx, 14			; 0000000eH
  000c4	8b c7		 mov	 eax, edi
  000c6	03 cb		 add	 ecx, ebx
  000c8	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  000cb	c1 ea 19	 shr	 edx, 25			; 00000019H
  000ce	83 c0 07	 add	 eax, 7
  000d1	03 ca		 add	 ecx, edx
  000d3	5e		 pop	 esi
  000d4	03 c1		 add	 eax, ecx
  000d6	5b		 pop	 ebx
  000d7	03 c7		 add	 eax, edi
  000d9	5f		 pop	 edi

; 708  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 709  : }

  000da	5d		 pop	 ebp
  000db	c2 08 00	 ret	 8
$LN21@deflateBou:
  000de	5e		 pop	 esi

; 704  :         return complen + wraplen;

  000df	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
  000e2	5b		 pop	 ebx
  000e3	5f		 pop	 edi

; 708  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 709  : }

  000e4	5d		 pop	 ebp
  000e5	c2 08 00	 ret	 8
_deflateBound@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _putShortMSB
_TEXT	SEGMENT
_putShortMSB PROC					; COMDAT
; _s$ = ecx
; _b$ = edx

; 719  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 720  :     put_byte(s, (Byte)(b >> 8));

  00004	8b ca		 mov	 ecx, edx
  00006	c1 e9 08	 shr	 ecx, 8
  00009	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000c	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  0000f	88 0c 06	 mov	 BYTE PTR [esi+eax], cl
  00012	ff 47 14	 inc	 DWORD PTR [edi+20]
  00015	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]

; 721  :     put_byte(s, (Byte)(b & 0xff));

  00018	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0001b	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0001e	ff 47 14	 inc	 DWORD PTR [edi+20]
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 722  : }

  00023	c3		 ret	 0
_putShortMSB ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _flush_pending
_TEXT	SEGMENT
_flush_pending PROC					; COMDAT
; _strm$ = ecx

; 732  : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi
  00004	57		 push	 edi

; 733  :     unsigned len;
; 734  :     deflate_state *s = strm->state;

  00005	8b 73 1c	 mov	 esi, DWORD PTR [ebx+28]

; 735  : 
; 736  :     _tr_flush_bits(s);

  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 __tr_flush_bits

; 737  :     len = s->pending;
; 738  :     if (len > strm->avail_out) len = strm->avail_out;

  0000f	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]

; 739  :     if (len == 0) return;

  00012	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  00015	0f 46 7e 14	 cmovbe	 edi, DWORD PTR [esi+20]
  00019	85 ff		 test	 edi, edi
  0001b	74 26		 je	 SHORT $LN4@flush_pend

; 740  : 
; 741  :     zmemcpy(strm->next_out, s->pending_out, len);

  0001d	57		 push	 edi
  0001e	ff 76 10	 push	 DWORD PTR [esi+16]
  00021	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00024	e8 00 00 00 00	 call	 _memcpy

; 742  :     strm->next_out  += len;

  00029	01 7b 0c	 add	 DWORD PTR [ebx+12], edi
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 743  :     s->pending_out  += len;

  0002f	01 7e 10	 add	 DWORD PTR [esi+16], edi

; 744  :     strm->total_out += len;

  00032	01 7b 14	 add	 DWORD PTR [ebx+20], edi

; 745  :     strm->avail_out -= len;

  00035	29 7b 10	 sub	 DWORD PTR [ebx+16], edi

; 746  :     s->pending      -= len;

  00038	29 7e 14	 sub	 DWORD PTR [esi+20], edi

; 747  :     if (s->pending == 0) {

  0003b	75 06		 jne	 SHORT $LN4@flush_pend

; 748  :         s->pending_out = s->pending_buf;

  0003d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00040	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN4@flush_pend:

; 749  :     }
; 750  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	c3		 ret	 0
_flush_pending ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateCopy@8
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_overlay$1$ = 12					; size = 4
_source$ = 12						; size = 4
_deflateCopy@8 PROC					; COMDAT

; 1105 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1106 : #ifdef MAXSEG_64K
; 1107 :     return Z_STREAM_ERROR;
; 1108 : #else
; 1109 :     deflate_state *ds;
; 1110 :     deflate_state *ss;
; 1111 :     ushf *overlay;
; 1112 : 
; 1113 : 
; 1114 :     if (deflateStateCheck(source) || dest == Z_NULL) {

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  00006	56		 push	 esi
  00007	e8 00 00 00 00	 call	 _deflateStateCheck
  0000c	85 c0		 test	 eax, eax
  0000e	0f 85 7d 01 00
	00		 jne	 $LN3@deflateCop
  00014	8b 75 08	 mov	 esi, DWORD PTR _dest$[ebp]
  00017	85 f6		 test	 esi, esi
  00019	0f 84 72 01 00
	00		 je	 $LN3@deflateCop

; 1116 :     }
; 1117 : 
; 1118 :     ss = source->state;
; 1119 : 
; 1120 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));

  0001f	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00022	53		 push	 ebx
  00023	8b 59 1c	 mov	 ebx, DWORD PTR [ecx+28]
  00026	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00029	57		 push	 edi
  0002a	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]

; 1121 : 
; 1122 :     ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));

  0002e	68 c4 16 00 00	 push	 5828			; 000016c4H
  00033	6a 01		 push	 1
  00035	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  00039	0f 10 41 20	 movups	 xmm0, XMMWORD PTR [ecx+32]
  0003d	0f 11 46 20	 movups	 XMMWORD PTR [esi+32], xmm0
  00041	f3 0f 7e 41 30	 movq	 xmm0, QWORD PTR [ecx+48]
  00046	66 0f d6 46 30	 movq	 QWORD PTR [esi+48], xmm0
  0004b	ff 76 28	 push	 DWORD PTR [esi+40]
  0004e	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00051	ff d0		 call	 eax
  00053	8b f8		 mov	 edi, eax
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1123 :     if (ds == Z_NULL) return Z_MEM_ERROR;

  00058	85 ff		 test	 edi, edi
  0005a	0f 84 25 01 00
	00		 je	 $LN10@deflateCop

; 1124 :     dest->state = (struct internal_state FAR *) ds;
; 1125 :     zmemcpy((voidpf)ds, (voidpf)ss, sizeof(deflate_state));

  00060	68 c4 16 00 00	 push	 5828			; 000016c4H
  00065	53		 push	 ebx
  00066	57		 push	 edi
  00067	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  0006a	e8 00 00 00 00	 call	 _memcpy

; 1126 :     ds->strm = dest;
; 1127 : 
; 1128 :     ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));

  0006f	6a 02		 push	 2
  00071	ff 77 2c	 push	 DWORD PTR [edi+44]
  00074	89 37		 mov	 DWORD PTR [edi], esi
  00076	ff 76 28	 push	 DWORD PTR [esi+40]
  00079	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0007c	ff d0		 call	 eax

; 1129 :     ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));

  0007e	6a 02		 push	 2
  00080	ff 77 2c	 push	 DWORD PTR [edi+44]
  00083	89 47 38	 mov	 DWORD PTR [edi+56], eax
  00086	ff 76 28	 push	 DWORD PTR [esi+40]
  00089	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0008c	ff d0		 call	 eax

; 1130 :     ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));

  0008e	6a 02		 push	 2
  00090	ff 77 4c	 push	 DWORD PTR [edi+76]
  00093	89 47 40	 mov	 DWORD PTR [edi+64], eax
  00096	ff 76 28	 push	 DWORD PTR [esi+40]
  00099	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0009c	ff d0		 call	 eax

; 1131 :     overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);

  0009e	6a 04		 push	 4
  000a0	ff b7 9c 16 00
	00		 push	 DWORD PTR [edi+5788]
  000a6	89 47 44	 mov	 DWORD PTR [edi+68], eax
  000a9	ff 76 28	 push	 DWORD PTR [esi+40]
  000ac	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000af	ff d0		 call	 eax

; 1132 :     ds->pending_buf = (uchf *) overlay;
; 1133 : 
; 1134 :     if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||

  000b1	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  000b4	83 c4 3c	 add	 esp, 60			; 0000003cH
  000b7	89 45 0c	 mov	 DWORD PTR _overlay$1$[ebp], eax
  000ba	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000bd	85 c9		 test	 ecx, ecx
  000bf	0f 84 ba 00 00
	00		 je	 $LN6@deflateCop
  000c5	83 7f 40 00	 cmp	 DWORD PTR [edi+64], 0
  000c9	0f 84 b0 00 00
	00		 je	 $LN6@deflateCop
  000cf	83 7f 44 00	 cmp	 DWORD PTR [edi+68], 0
  000d3	0f 84 a6 00 00
	00		 je	 $LN6@deflateCop
  000d9	85 c0		 test	 eax, eax
  000db	0f 84 9e 00 00
	00		 je	 $LN6@deflateCop

; 1138 :     }
; 1139 :     /* following zmemcpy do not work for 16-bit MSDOS */
; 1140 :     zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));

  000e1	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  000e4	03 c0		 add	 eax, eax
  000e6	50		 push	 eax
  000e7	ff 73 38	 push	 DWORD PTR [ebx+56]
  000ea	51		 push	 ecx
  000eb	e8 00 00 00 00	 call	 _memcpy

; 1141 :     zmemcpy((voidpf)ds->prev, (voidpf)ss->prev, ds->w_size * sizeof(Pos));

  000f0	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  000f3	03 c0		 add	 eax, eax
  000f5	50		 push	 eax
  000f6	ff 73 40	 push	 DWORD PTR [ebx+64]
  000f9	ff 77 40	 push	 DWORD PTR [edi+64]
  000fc	e8 00 00 00 00	 call	 _memcpy

; 1142 :     zmemcpy((voidpf)ds->head, (voidpf)ss->head, ds->hash_size * sizeof(Pos));

  00101	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  00104	03 c0		 add	 eax, eax
  00106	50		 push	 eax
  00107	ff 73 44	 push	 DWORD PTR [ebx+68]
  0010a	ff 77 44	 push	 DWORD PTR [edi+68]
  0010d	e8 00 00 00 00	 call	 _memcpy

; 1143 :     zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

  00112	ff 77 0c	 push	 DWORD PTR [edi+12]
  00115	ff 73 08	 push	 DWORD PTR [ebx+8]
  00118	ff 77 08	 push	 DWORD PTR [edi+8]
  0011b	e8 00 00 00 00	 call	 _memcpy

; 1144 : 
; 1145 :     ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);

  00120	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00123	83 c4 30	 add	 esp, 48			; 00000030H
  00126	2b 43 08	 sub	 eax, DWORD PTR [ebx+8]
  00129	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  0012c	03 c2		 add	 eax, edx

; 1146 :     ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);

  0012e	8b 8f 9c 16 00
	00		 mov	 ecx, DWORD PTR [edi+5788]
  00134	8b 75 0c	 mov	 esi, DWORD PTR _overlay$1$[ebp]
  00137	89 47 10	 mov	 DWORD PTR [edi+16], eax
  0013a	8b c1		 mov	 eax, ecx
  0013c	d1 e8		 shr	 eax, 1
  0013e	8d 04 46	 lea	 eax, DWORD PTR [esi+eax*2]
  00141	89 87 a4 16 00
	00		 mov	 DWORD PTR [edi+5796], eax

; 1147 :     ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;

  00147	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0014a	03 c1		 add	 eax, ecx
  0014c	89 87 98 16 00
	00		 mov	 DWORD PTR [edi+5784], eax

; 1148 : 
; 1149 :     ds->l_desc.dyn_tree = ds->dyn_ltree;

  00152	8d 87 94 00 00
	00		 lea	 eax, DWORD PTR [edi+148]
  00158	89 87 18 0b 00
	00		 mov	 DWORD PTR [edi+2840], eax

; 1150 :     ds->d_desc.dyn_tree = ds->dyn_dtree;

  0015e	8d 87 88 09 00
	00		 lea	 eax, DWORD PTR [edi+2440]
  00164	89 87 24 0b 00
	00		 mov	 DWORD PTR [edi+2852], eax

; 1151 :     ds->bl_desc.dyn_tree = ds->bl_tree;

  0016a	8d 87 7c 0a 00
	00		 lea	 eax, DWORD PTR [edi+2684]
  00170	89 87 30 0b 00
	00		 mov	 DWORD PTR [edi+2864], eax

; 1152 : 
; 1153 :     return Z_OK;

  00176	33 c0		 xor	 eax, eax
  00178	5f		 pop	 edi
  00179	5b		 pop	 ebx
  0017a	5e		 pop	 esi

; 1154 : #endif /* MAXSEG_64K */
; 1155 : }

  0017b	5d		 pop	 ebp
  0017c	c2 08 00	 ret	 8
$LN6@deflateCop:

; 1135 :         ds->pending_buf == Z_NULL) {
; 1136 :         deflateEnd (dest);

  0017f	56		 push	 esi
  00180	e8 00 00 00 00	 call	 _deflateEnd@4
$LN10@deflateCop:

; 1137 :         return Z_MEM_ERROR;

  00185	5f		 pop	 edi
  00186	5b		 pop	 ebx
  00187	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0018c	5e		 pop	 esi

; 1154 : #endif /* MAXSEG_64K */
; 1155 : }

  0018d	5d		 pop	 ebp
  0018e	c2 08 00	 ret	 8
$LN3@deflateCop:

; 1115 :         return Z_STREAM_ERROR;

  00191	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00196	5e		 pop	 esi

; 1154 : #endif /* MAXSEG_64K */
; 1155 : }

  00197	5d		 pop	 ebp
  00198	c2 08 00	 ret	 8
_deflateCopy@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _read_buf
_TEXT	SEGMENT
_size$ = 8						; size = 4
_read_buf PROC						; COMDAT
; _strm$ = ecx
; _buf$ = edx

; 1168 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b da		 mov	 ebx, edx
  00009	57		 push	 edi

; 1169 :     unsigned len = strm->avail_in;

  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 1170 : 
; 1171 :     if (len > size) len = size;

  0000d	8b f9		 mov	 edi, ecx
  0000f	3b 4d 08	 cmp	 ecx, DWORD PTR _size$[ebp]
  00012	0f 47 7d 08	 cmova	 edi, DWORD PTR _size$[ebp]

; 1172 :     if (len == 0) return 0;

  00016	85 ff		 test	 edi, edi
  00018	75 07		 jne	 SHORT $LN3@read_buf

; 1189 : }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	33 c0		 xor	 eax, eax
  0001e	5b		 pop	 ebx
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN3@read_buf:

; 1173 : 
; 1174 :     strm->avail_in  -= len;
; 1175 : 
; 1176 :     zmemcpy(buf, strm->next_in, len);

  00021	57		 push	 edi
  00022	ff 36		 push	 DWORD PTR [esi]
  00024	2b cf		 sub	 ecx, edi
  00026	53		 push	 ebx
  00027	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0002a	e8 00 00 00 00	 call	 _memcpy

; 1177 :     if (strm->state->wrap == 1) {

  0002f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00038	83 f8 01	 cmp	 eax, 1
  0003b	75 19		 jne	 SHORT $LN4@read_buf

; 1178 :         strm->adler = adler32(strm->adler, buf, len);

  0003d	57		 push	 edi
  0003e	53		 push	 ebx
  0003f	ff 76 30	 push	 DWORD PTR [esi+48]
  00042	e8 00 00 00 00	 call	 _adler32@12

; 1183 :     }
; 1184 : #endif
; 1185 :     strm->next_in  += len;

  00047	01 3e		 add	 DWORD PTR [esi], edi

; 1186 :     strm->total_in += len;

  00049	01 7e 08	 add	 DWORD PTR [esi+8], edi
  0004c	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 1187 : 
; 1188 :     return len;

  0004f	8b c7		 mov	 eax, edi
  00051	5f		 pop	 edi

; 1189 : }

  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN4@read_buf:

; 1179 :     }
; 1180 : #ifdef GZIP
; 1181 :     else if (strm->state->wrap == 2) {

  00056	83 f8 02	 cmp	 eax, 2
  00059	75 0d		 jne	 SHORT $LN6@read_buf

; 1182 :         strm->adler = crc32(strm->adler, buf, len);

  0005b	57		 push	 edi
  0005c	53		 push	 ebx
  0005d	ff 76 30	 push	 DWORD PTR [esi+48]
  00060	e8 00 00 00 00	 call	 _crc32@12

; 1183 :     }
; 1184 : #endif
; 1185 :     strm->next_in  += len;

  00065	89 46 30	 mov	 DWORD PTR [esi+48], eax
$LN6@read_buf:
  00068	01 3e		 add	 DWORD PTR [esi], edi

; 1187 : 
; 1188 :     return len;

  0006a	8b c7		 mov	 eax, edi
  0006c	01 7e 08	 add	 DWORD PTR [esi+8], edi
  0006f	5f		 pop	 edi

; 1189 : }

  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_read_buf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _lm_init
_TEXT	SEGMENT
_lm_init PROC						; COMDAT
; _s$ = ecx

; 1196 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1197 :     s->window_size = (ulg)2L*s->w_size;
; 1198 : 
; 1199 :     CLEAR_HASH(s);

  00003	33 c9		 xor	 ecx, ecx
  00005	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00008	8b 56 4c	 mov	 edx, DWORD PTR [esi+76]
  0000b	03 c0		 add	 eax, eax
  0000d	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00010	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00013	66 89 4c 50 fe	 mov	 WORD PTR [eax+edx*2-2], cx
  00018	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0001b	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  00022	50		 push	 eax
  00023	51		 push	 ecx
  00024	ff 76 44	 push	 DWORD PTR [esi+68]
  00027	e8 00 00 00 00	 call	 _memset

; 1200 : 
; 1201 :     /* Set the default configuration parameters:
; 1202 :      */
; 1203 :     s->max_lazy_match   = configuration_table[s->level].max_lazy;

  0002c	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00038	0f b7 04 8d 02
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+2]
  00040	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax

; 1204 :     s->good_match       = configuration_table[s->level].good_length;

  00046	0f b7 04 8d 00
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4]
  0004e	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax

; 1205 :     s->nice_match       = configuration_table[s->level].nice_length;

  00054	0f b7 04 8d 04
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+4]
  0005c	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 1206 :     s->max_chain_length = configuration_table[s->level].max_chain;

  00062	0f b7 04 8d 06
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+6]
  0006a	89 46 7c	 mov	 DWORD PTR [esi+124], eax

; 1207 : 
; 1208 :     s->strstart = 0;

  0006d	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 1209 :     s->block_start = 0L;

  00074	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 1210 :     s->lookahead = 0;

  0007b	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 1211 :     s->insert = 0;

  00082	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 1212 :     s->match_length = s->prev_length = MIN_MATCH-1;

  0008c	c7 46 78 02 00
	00 00		 mov	 DWORD PTR [esi+120], 2
  00093	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2

; 1213 :     s->match_available = 0;

  0009a	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0

; 1214 :     s->ins_h = 0;

  000a1	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  000a8	5e		 pop	 esi

; 1215 : #ifndef FASTEST
; 1216 : #ifdef ASMV
; 1217 :     match_init(); /* initialize the asm code */
; 1218 : #endif
; 1219 : #endif
; 1220 : }

  000a9	c3		 ret	 0
_lm_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _longest_match
_TEXT	SEGMENT
tv487 = -44						; size = 4
_prev$1$ = -40						; size = 4
_wmask$1$ = -36						; size = 4
tv496 = -32						; size = 4
_best_len$1$ = -28					; size = 4
_limit$1$ = -24						; size = 4
_s$1$ = -20						; size = 4
_scan$3$ = -16						; size = 4
_nice_match$2$ = -12					; size = 4
_chain_length$1$ = -8					; size = 4
_scan_end$1$ = -2					; size = 1
_scan_end1$1$ = -1					; size = 1
_longest_match PROC					; COMDAT
; _s$ = ecx
; _cur_match$ = edx

; 1239 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	8b da		 mov	 ebx, edx
  0000d	89 7d ec	 mov	 DWORD PTR _s$1$[ebp], edi

; 1240 :     unsigned chain_length = s->max_chain_length;/* max hash chain length */
; 1241 :     register Bytef *scan = s->window + s->strstart; /* current string */

  00010	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  00013	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]

; 1242 :     register Bytef *match;                      /* matched string */
; 1243 :     register int len;                           /* length of current match */
; 1244 :     int best_len = (int)s->prev_length;         /* best match length so far */

  00016	8b 57 78	 mov	 edx, DWORD PTR [edi+120]
  00019	03 c1		 add	 eax, ecx
  0001b	8b 77 7c	 mov	 esi, DWORD PTR [edi+124]
  0001e	89 4d e0	 mov	 DWORD PTR tv496[ebp], ecx

; 1245 :     int nice_match = s->nice_match;             /* stop if match long enough */
; 1246 :     IPos limit = s->strstart > (IPos)MAX_DIST(s) ?

  00021	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  00024	89 45 f0	 mov	 DWORD PTR _scan$3$[ebp], eax
  00027	8b 87 90 00 00
	00		 mov	 eax, DWORD PTR [edi+144]
  0002d	89 45 f4	 mov	 DWORD PTR _nice_match$2$[ebp], eax
  00030	8d 81 fa fe ff
	ff		 lea	 eax, DWORD PTR [ecx-262]
  00036	89 55 e4	 mov	 DWORD PTR _best_len$1$[ebp], edx
  00039	39 47 6c	 cmp	 DWORD PTR [edi+108], eax
  0003c	76 0f		 jbe	 SHORT $LN18@longest_ma
  0003e	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  00041	2b c1		 sub	 eax, ecx
  00043	05 06 01 00 00	 add	 eax, 262		; 00000106H
  00048	89 45 e8	 mov	 DWORD PTR _limit$1$[ebp], eax
  0004b	eb 07		 jmp	 SHORT $LN19@longest_ma
$LN18@longest_ma:
  0004d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _limit$1$[ebp], 0
$LN19@longest_ma:

; 1247 :         s->strstart - (IPos)MAX_DIST(s) : NIL;
; 1248 :     /* Stop when cur_match becomes <= limit. To simplify the code,
; 1249 :      * we prevent matches with the string of window index 0.
; 1250 :      */
; 1251 :     Posf *prev = s->prev;
; 1252 :     uInt wmask = s->w_mask;
; 1253 : 
; 1254 : #ifdef UNALIGNED_OK
; 1255 :     /* Compare two bytes at a time. Note: this is not always beneficial.
; 1256 :      * Try with and without -DUNALIGNED_OK to check.
; 1257 :      */
; 1258 :     register Bytef *strend = s->window + s->strstart + MAX_MATCH - 1;
; 1259 :     register ush scan_start = *(ushf*)scan;
; 1260 :     register ush scan_end   = *(ushf*)(scan+best_len-1);
; 1261 : #else
; 1262 :     register Bytef *strend = s->window + s->strstart + MAX_MATCH;

  00054	8b 4d f0	 mov	 ecx, DWORD PTR _scan$3$[ebp]
  00057	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  0005a	89 45 d8	 mov	 DWORD PTR _prev$1$[ebp], eax
  0005d	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00060	89 45 dc	 mov	 DWORD PTR _wmask$1$[ebp], eax
  00063	8d b9 02 01 00
	00		 lea	 edi, DWORD PTR [ecx+258]

; 1263 :     register Byte scan_end1  = scan[best_len-1];

  00069	8a 44 0a ff	 mov	 al, BYTE PTR [edx+ecx-1]
  0006d	88 45 ff	 mov	 BYTE PTR _scan_end1$1$[ebp], al

; 1264 :     register Byte scan_end   = scan[best_len];

  00070	8a 04 0a	 mov	 al, BYTE PTR [edx+ecx]
  00073	88 45 fe	 mov	 BYTE PTR _scan_end$1$[ebp], al

; 1265 : #endif
; 1266 : 
; 1267 :     /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
; 1268 :      * It is easy to get rid of this optimization if necessary.
; 1269 :      */
; 1270 :     Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
; 1271 : 
; 1272 :     /* Do not waste too much time if we already have a good match: */
; 1273 :     if (s->prev_length >= s->good_match) {
; 1274 :         chain_length >>= 2;
; 1275 :     }
; 1276 :     /* Do not look for matches beyond the end of the input. This is necessary
; 1277 :      * to make deflate deterministic.
; 1278 :      */
; 1279 :     if ((uInt)nice_match > s->lookahead) nice_match = (int)s->lookahead;

  00076	8b c6		 mov	 eax, esi
  00078	c1 e8 02	 shr	 eax, 2
  0007b	89 45 f8	 mov	 DWORD PTR _chain_length$1$[ebp], eax
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _s$1$[ebp]
  00081	3b 90 8c 00 00
	00		 cmp	 edx, DWORD PTR [eax+140]
  00087	8b 55 f8	 mov	 edx, DWORD PTR _chain_length$1$[ebp]
  0008a	8b 40 74	 mov	 eax, DWORD PTR [eax+116]
  0008d	0f 42 d6	 cmovb	 edx, esi
  00090	8b 75 e4	 mov	 esi, DWORD PTR _best_len$1$[ebp]
  00093	89 55 f8	 mov	 DWORD PTR _chain_length$1$[ebp], edx
  00096	8b 55 f4	 mov	 edx, DWORD PTR _nice_match$2$[ebp]
  00099	3b d0		 cmp	 edx, eax
  0009b	89 45 d4	 mov	 DWORD PTR tv487[ebp], eax
  0009e	0f 47 d0	 cmova	 edx, eax
  000a1	89 55 f4	 mov	 DWORD PTR _nice_match$2$[ebp], edx
$LL4@longest_ma:

; 1280 : 
; 1281 :     Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
; 1282 : 
; 1283 :     do {
; 1284 :         Assert(cur_match < s->strstart, "no future");
; 1285 :         match = s->window + cur_match;

  000a4	8b 55 e0	 mov	 edx, DWORD PTR tv496[ebp]

; 1286 : 
; 1287 :         /* Skip to next match if the match length cannot increase
; 1288 :          * or if the match length is less than 2.  Note that the checks below
; 1289 :          * for insufficient lookahead only occur occasionally for performance
; 1290 :          * reasons.  Therefore uninitialized memory will be accessed, and
; 1291 :          * conditional jumps will be made that depend on those values.
; 1292 :          * However the length of the match is limited to the lookahead, so
; 1293 :          * the output of deflate is not affected by the uninitialized values.
; 1294 :          */
; 1295 : #if (defined(UNALIGNED_OK) && MAX_MATCH == 258)
; 1296 :         /* This code assumes sizeof(unsigned short) == 2. Do not use
; 1297 :          * UNALIGNED_OK if your compiler uses a different size.
; 1298 :          */
; 1299 :         if (*(ushf*)(match+best_len-1) != scan_end ||
; 1300 :             *(ushf*)match != scan_start) continue;
; 1301 : 
; 1302 :         /* It is not necessary to compare scan[2] and match[2] since they are
; 1303 :          * always equal when the other bytes match, given that the hash keys
; 1304 :          * are equal and that HASH_BITS >= 8. Compare 2 bytes at a time at
; 1305 :          * strstart+3, +5, ... up to strstart+257. We check for insufficient
; 1306 :          * lookahead only every 4th comparison; the 128th check will be made
; 1307 :          * at strstart+257. If MAX_MATCH-2 is not a multiple of 8, it is
; 1308 :          * necessary to put more guard bytes at the end of the window, or
; 1309 :          * to check more often for insufficient lookahead.
; 1310 :          */
; 1311 :         Assert(scan[2] == match[2], "scan[2]?");
; 1312 :         scan++, match++;
; 1313 :         do {
; 1314 :         } while (*(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
; 1315 :                  *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
; 1316 :                  *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
; 1317 :                  *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
; 1318 :                  scan < strend);
; 1319 :         /* The funny "do {}" generates better code on most compilers */
; 1320 : 
; 1321 :         /* Here, scan <= window+strstart+257 */
; 1322 :         Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
; 1323 :         if (*scan == *match) scan++;
; 1324 : 
; 1325 :         len = (MAX_MATCH - 1) - (int)(strend-scan);
; 1326 :         scan = strend - (MAX_MATCH-1);
; 1327 : 
; 1328 : #else /* UNALIGNED_OK */
; 1329 : 
; 1330 :         if (match[best_len]   != scan_end  ||
; 1331 :             match[best_len-1] != scan_end1 ||
; 1332 :             *match            != *scan     ||

  000a7	8a 45 fe	 mov	 al, BYTE PTR _scan_end$1$[ebp]
  000aa	03 d3		 add	 edx, ebx
  000ac	38 04 32	 cmp	 BYTE PTR [edx+esi], al
  000af	0f 85 a6 00 00
	00		 jne	 $LN2@longest_ma
  000b5	8a 45 ff	 mov	 al, BYTE PTR _scan_end1$1$[ebp]
  000b8	38 44 32 ff	 cmp	 BYTE PTR [edx+esi-1], al
  000bc	0f 85 99 00 00
	00		 jne	 $LN2@longest_ma
  000c2	8a 02		 mov	 al, BYTE PTR [edx]
  000c4	3a 01		 cmp	 al, BYTE PTR [ecx]
  000c6	0f 85 8f 00 00
	00		 jne	 $LN2@longest_ma
  000cc	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  000cf	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  000d2	0f 85 83 00 00
	00		 jne	 $LN2@longest_ma

; 1333 :             *++match          != scan[1])      continue;
; 1334 : 
; 1335 :         /* The check at best_len-1 can be removed because it will be made
; 1336 :          * again later. (This heuristic is not always a win.)
; 1337 :          * It is not necessary to compare scan[2] and match[2] since they
; 1338 :          * are always equal when the other bytes match, given that
; 1339 :          * the hash keys are equal and that HASH_BITS >= 8.
; 1340 :          */
; 1341 :         scan += 2, match++;

  000d8	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  000db	83 c2 02	 add	 edx, 2
  000de	66 90		 npad	 2
$LL7@longest_ma:

; 1342 :         Assert(*scan == *match, "match[2]?");
; 1343 : 
; 1344 :         /* We check for insufficient lookahead only every 8th comparison;
; 1345 :          * the 256th check will be made at strstart+258.
; 1346 :          */
; 1347 :         do {
; 1348 :         } while (*++scan == *++match && *++scan == *++match &&
; 1349 :                  *++scan == *++match && *++scan == *++match &&
; 1350 :                  *++scan == *++match && *++scan == *++match &&
; 1351 :                  *++scan == *++match && *++scan == *++match &&

  000e0	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000e3	40		 inc	 eax
  000e4	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  000e7	75 45		 jne	 SHORT $LN12@longest_ma
  000e9	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000ec	40		 inc	 eax
  000ed	3a 4a 02	 cmp	 cl, BYTE PTR [edx+2]
  000f0	75 3c		 jne	 SHORT $LN12@longest_ma
  000f2	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000f5	40		 inc	 eax
  000f6	3a 4a 03	 cmp	 cl, BYTE PTR [edx+3]
  000f9	75 33		 jne	 SHORT $LN12@longest_ma
  000fb	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000fe	40		 inc	 eax
  000ff	3a 4a 04	 cmp	 cl, BYTE PTR [edx+4]
  00102	75 2a		 jne	 SHORT $LN12@longest_ma
  00104	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00107	40		 inc	 eax
  00108	3a 4a 05	 cmp	 cl, BYTE PTR [edx+5]
  0010b	75 21		 jne	 SHORT $LN12@longest_ma
  0010d	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00110	40		 inc	 eax
  00111	3a 4a 06	 cmp	 cl, BYTE PTR [edx+6]
  00114	75 18		 jne	 SHORT $LN12@longest_ma
  00116	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00119	40		 inc	 eax
  0011a	3a 4a 07	 cmp	 cl, BYTE PTR [edx+7]
  0011d	75 0f		 jne	 SHORT $LN12@longest_ma
  0011f	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00122	40		 inc	 eax
  00123	83 c2 08	 add	 edx, 8
  00126	3a 0a		 cmp	 cl, BYTE PTR [edx]
  00128	75 04		 jne	 SHORT $LN12@longest_ma
  0012a	3b c7		 cmp	 eax, edi
  0012c	72 b2		 jb	 SHORT $LL7@longest_ma
$LN12@longest_ma:

; 1352 :                  scan < strend);
; 1353 : 
; 1354 :         Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
; 1355 : 
; 1356 :         len = MAX_MATCH - (int)(strend - scan);

  0012e	2b c7		 sub	 eax, edi
  00130	05 02 01 00 00	 add	 eax, 258		; 00000102H

; 1357 :         scan = strend - MAX_MATCH;
; 1358 : 
; 1359 : #endif /* UNALIGNED_OK */
; 1360 : 
; 1361 :         if (len > best_len) {

  00135	3b c6		 cmp	 eax, esi
  00137	7e 1f		 jle	 SHORT $LN29@longest_ma

; 1362 :             s->match_start = cur_match;
; 1363 :             best_len = len;

  00139	8b f0		 mov	 esi, eax
  0013b	8b 4d ec	 mov	 ecx, DWORD PTR _s$1$[ebp]
  0013e	89 59 70	 mov	 DWORD PTR [ecx+112], ebx

; 1364 :             if (len >= nice_match) break;

  00141	3b 45 f4	 cmp	 eax, DWORD PTR _nice_match$2$[ebp]
  00144	7d 30		 jge	 SHORT $LN3@longest_ma

; 1365 : #ifdef UNALIGNED_OK
; 1366 :             scan_end = *(ushf*)(scan+best_len-1);
; 1367 : #else
; 1368 :             scan_end1  = scan[best_len-1];

  00146	8b 4d f0	 mov	 ecx, DWORD PTR _scan$3$[ebp]
  00149	8a 54 08 ff	 mov	 dl, BYTE PTR [eax+ecx-1]

; 1369 :             scan_end   = scan[best_len];

  0014d	8a 04 08	 mov	 al, BYTE PTR [eax+ecx]
  00150	88 55 ff	 mov	 BYTE PTR _scan_end1$1$[ebp], dl
  00153	88 45 fe	 mov	 BYTE PTR _scan_end$1$[ebp], al
  00156	eb 03		 jmp	 SHORT $LN2@longest_ma
$LN29@longest_ma:

; 1357 :         scan = strend - MAX_MATCH;
; 1358 : 
; 1359 : #endif /* UNALIGNED_OK */
; 1360 : 
; 1361 :         if (len > best_len) {

  00158	8b 4d f0	 mov	 ecx, DWORD PTR _scan$3$[ebp]
$LN2@longest_ma:

; 1370 : #endif
; 1371 :         }
; 1372 :     } while ((cur_match = prev[cur_match & wmask]) > limit
; 1373 :              && --chain_length != 0);

  0015b	8b 45 dc	 mov	 eax, DWORD PTR _wmask$1$[ebp]
  0015e	8b 55 d8	 mov	 edx, DWORD PTR _prev$1$[ebp]
  00161	23 c3		 and	 eax, ebx
  00163	0f b7 1c 42	 movzx	 ebx, WORD PTR [edx+eax*2]
  00167	3b 5d e8	 cmp	 ebx, DWORD PTR _limit$1$[ebp]
  0016a	76 0a		 jbe	 SHORT $LN3@longest_ma
  0016c	83 6d f8 01	 sub	 DWORD PTR _chain_length$1$[ebp], 1
  00170	0f 85 2e ff ff
	ff		 jne	 $LL4@longest_ma
$LN3@longest_ma:

; 1374 : 
; 1375 :     if ((uInt)best_len <= s->lookahead) return (uInt)best_len;

  00176	8b 45 d4	 mov	 eax, DWORD PTR tv487[ebp]
  00179	3b f0		 cmp	 esi, eax
  0017b	5f		 pop	 edi
  0017c	0f 46 c6	 cmovbe	 eax, esi
  0017f	5e		 pop	 esi
  00180	5b		 pop	 ebx

; 1376 :     return s->lookahead;
; 1377 : }

  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c3		 ret	 0
_longest_match ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _fill_window
_TEXT	SEGMENT
_wsize$1$ = -4						; size = 4
_fill_window PROC					; COMDAT
; _s$ = ecx

; 1484 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 1485 :     unsigned n;
; 1486 :     unsigned more;    /* Amount of free space at the end of the window. */
; 1487 :     uInt wsize = s->w_size;

  00009	8b 5e 2c	 mov	 ebx, DWORD PTR [esi+44]
  0000c	89 5d fc	 mov	 DWORD PTR _wsize$1$[ebp], ebx
  0000f	90		 npad	 1
$LL4@fill_windo:

; 1488 : 
; 1489 :     Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
; 1490 : 
; 1491 :     do {
; 1492 :         more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);
; 1493 : 
; 1494 :         /* Deal with !@#$% 64K limit: */
; 1495 :         if (sizeof(int) <= 2) {
; 1496 :             if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
; 1497 :                 more = wsize;
; 1498 : 
; 1499 :             } else if (more == (unsigned)(-1)) {
; 1500 :                 /* Very unlikely, but possible on 16 bit machine if
; 1501 :                  * strstart == 0 && lookahead == 1 (input done a byte at time)
; 1502 :                  */
; 1503 :                 more--;
; 1504 :             }
; 1505 :         }
; 1506 : 
; 1507 :         /* If the window is almost full and there is insufficient lookahead,
; 1508 :          * move the upper half to the lower one to make room in the upper half.
; 1509 :          */
; 1510 :         if (s->strstart >= wsize+MAX_DIST(s)) {

  00010	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00013	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  00016	05 fa fe ff ff	 add	 eax, -262		; fffffefaH
  0001b	2b 7e 74	 sub	 edi, DWORD PTR [esi+116]
  0001e	03 c3		 add	 eax, ebx
  00020	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00023	2b f9		 sub	 edi, ecx
  00025	3b c8		 cmp	 ecx, eax
  00027	72 2a		 jb	 SHORT $LN11@fill_windo

; 1511 : 
; 1512 :             zmemcpy(s->window, s->window+wsize, (unsigned)wsize - more);

  00029	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0002c	8b c3		 mov	 eax, ebx
  0002e	2b c7		 sub	 eax, edi
  00030	50		 push	 eax
  00031	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00034	50		 push	 eax
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 _memcpy

; 1513 :             s->match_start -= wsize;

  0003b	29 5e 70	 sub	 DWORD PTR [esi+112], ebx
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1514 :             s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */

  00041	29 5e 6c	 sub	 DWORD PTR [esi+108], ebx

; 1515 :             s->block_start -= (long) wsize;
; 1516 :             slide_hash(s);

  00044	8b ce		 mov	 ecx, esi
  00046	29 5e 5c	 sub	 DWORD PTR [esi+92], ebx
  00049	e8 00 00 00 00	 call	 _slide_hash

; 1517 :             more += wsize;

  0004e	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00051	03 fb		 add	 edi, ebx
$LN11@fill_windo:

; 1518 :         }
; 1519 :         if (s->strm->avail_in == 0) break;

  00053	8b 06		 mov	 eax, DWORD PTR [esi]
  00055	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00059	0f 84 c0 00 00
	00		 je	 $LN3@fill_windo

; 1520 : 
; 1521 :         /* If there was no sliding:
; 1522 :          *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
; 1523 :          *    more == window_size - lookahead - strstart
; 1524 :          * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
; 1525 :          * => more >= window_size - 2*WSIZE + 2
; 1526 :          * In the BIG_MEM or MMAP case (not yet supported),
; 1527 :          *   window_size == input_size + MIN_LOOKAHEAD  &&
; 1528 :          *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
; 1529 :          * Otherwise, window_size == 2*WSIZE so more >= 2.
; 1530 :          * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
; 1531 :          */
; 1532 :         Assert(more >= 2, "more < 2");
; 1533 : 
; 1534 :         n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);

  0005f	8b 56 74	 mov	 edx, DWORD PTR [esi+116]
  00062	03 56 38	 add	 edx, DWORD PTR [esi+56]
  00065	03 d1		 add	 edx, ecx
  00067	8b c8		 mov	 ecx, eax
  00069	57		 push	 edi
  0006a	e8 00 00 00 00	 call	 _read_buf

; 1535 :         s->lookahead += n;

  0006f	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  00072	83 c4 04	 add	 esp, 4

; 1536 : 
; 1537 :         /* Initialize the hash value now that we have some input: */
; 1538 :         if (s->lookahead + s->insert >= MIN_MATCH) {

  00075	8b 8e b4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5812]
  0007b	03 f8		 add	 edi, eax
  0007d	89 7e 74	 mov	 DWORD PTR [esi+116], edi
  00080	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  00083	83 f8 03	 cmp	 eax, 3
  00086	0f 82 7f 00 00
	00		 jb	 $LN2@fill_windo

; 1539 :             uInt str = s->strstart - s->insert;

  0008c	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]

; 1540 :             s->ins_h = s->window[str];

  0008f	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00092	2b d9		 sub	 ebx, ecx

; 1541 :             UPDATE_HASH(s, s->ins_h, s->window[str + 1]);

  00094	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00097	0f b6 14 18	 movzx	 edx, BYTE PTR [eax+ebx]
  0009b	89 56 48	 mov	 DWORD PTR [esi+72], edx
  0009e	0f b6 44 18 01	 movzx	 eax, BYTE PTR [eax+ebx+1]
  000a3	d3 e2		 shl	 edx, cl
  000a5	33 d0		 xor	 edx, eax
  000a7	23 56 54	 and	 edx, DWORD PTR [esi+84]

; 1542 : #if MIN_MATCH != 3
; 1543 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1544 : #endif
; 1545 :             while (s->insert) {

  000aa	83 be b4 16 00
	00 00		 cmp	 DWORD PTR [esi+5812], 0
  000b1	89 56 48	 mov	 DWORD PTR [esi+72], edx
  000b4	74 52		 je	 SHORT $LN32@fill_windo
$LL5@fill_windo:

; 1546 :                 UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  000b6	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  000b9	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 1547 : #ifndef FASTEST
; 1548 :                 s->prev[str & s->w_mask] = s->head[s->ins_h];

  000bc	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  000bf	23 d3		 and	 edx, ebx
  000c1	0f b6 7c 18 02	 movzx	 edi, BYTE PTR [eax+ebx+2]
  000c6	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  000c9	d3 e0		 shl	 eax, cl
  000cb	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  000ce	33 f8		 xor	 edi, eax
  000d0	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  000d3	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000d6	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  000d9	66 8b 04 78	 mov	 ax, WORD PTR [eax+edi*2]
  000dd	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 1549 : #endif
; 1550 :                 s->head[s->ins_h] = (Pos)str;

  000e1	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  000e4	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000e7	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx

; 1551 :                 str++;

  000eb	43		 inc	 ebx

; 1552 :                 s->insert--;

  000ec	8b 8e b4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5812]

; 1553 :                 if (s->lookahead + s->insert < MIN_MATCH)

  000f2	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  000f5	49		 dec	 ecx
  000f6	89 8e b4 16 00
	00		 mov	 DWORD PTR [esi+5812], ecx
  000fc	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  000ff	83 f8 03	 cmp	 eax, 3
  00102	72 04		 jb	 SHORT $LN32@fill_windo

; 1542 : #if MIN_MATCH != 3
; 1543 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1544 : #endif
; 1545 :             while (s->insert) {

  00104	85 c9		 test	 ecx, ecx
  00106	75 ae		 jne	 SHORT $LL5@fill_windo
$LN32@fill_windo:

; 1554 :                     break;
; 1555 :             }
; 1556 :         }
; 1557 :         /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
; 1558 :          * but this is not important since only literal bytes will be emitted.
; 1559 :          */
; 1560 : 
; 1561 :     } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);

  00108	8b 5d fc	 mov	 ebx, DWORD PTR _wsize$1$[ebp]
$LN2@fill_windo:
  0010b	81 ff 06 01 00
	00		 cmp	 edi, 262		; 00000106H
  00111	73 0c		 jae	 SHORT $LN3@fill_windo
  00113	8b 06		 mov	 eax, DWORD PTR [esi]
  00115	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00119	0f 85 f1 fe ff
	ff		 jne	 $LL4@fill_windo
$LN3@fill_windo:

; 1562 : 
; 1563 :     /* If the WIN_INIT bytes after the end of the current data have never been
; 1564 :      * written, then zero those bytes in order to avoid memory check reports of
; 1565 :      * the use of uninitialized (or uninitialised as Julian writes) bytes by
; 1566 :      * the longest match routines.  Update the high water mark for the next
; 1567 :      * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
; 1568 :      * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
; 1569 :      */
; 1570 :     if (s->high_water < s->window_size) {

  0011f	8b 8e c0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5824]
  00125	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  00128	3b cf		 cmp	 ecx, edi
  0012a	73 67		 jae	 SHORT $LN20@fill_windo

; 1571 :         ulg curr = s->strstart + (ulg)(s->lookahead);

  0012c	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
  0012f	03 5e 74	 add	 ebx, DWORD PTR [esi+116]

; 1572 :         ulg init;
; 1573 : 
; 1574 :         if (s->high_water < curr) {

  00132	3b cb		 cmp	 ecx, ebx
  00134	73 2d		 jae	 SHORT $LN17@fill_windo

; 1575 :             /* Previous high water mark below current data -- zero WIN_INIT
; 1576 :              * bytes or up to end of window, whichever is less.
; 1577 :              */
; 1578 :             init = s->window_size - curr;
; 1579 :             if (init > WIN_INIT)

  00136	b8 02 01 00 00	 mov	 eax, 258		; 00000102H
  0013b	2b fb		 sub	 edi, ebx
  0013d	3b f8		 cmp	 edi, eax
  0013f	0f 47 f8	 cmova	 edi, eax

; 1580 :                 init = WIN_INIT;
; 1581 :             zmemzero(s->window + curr, (unsigned)init);

  00142	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00145	57		 push	 edi
  00146	03 c3		 add	 eax, ebx
  00148	6a 00		 push	 0
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 _memset
  00150	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1582 :             s->high_water = curr + init;

  00153	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  00156	89 86 c0 16 00
	00		 mov	 DWORD PTR [esi+5824], eax
  0015c	5f		 pop	 edi

; 1594 :         }
; 1595 :     }
; 1596 : 
; 1597 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1598 :            "not enough room for search");
; 1599 : }

  0015d	5e		 pop	 esi
  0015e	5b		 pop	 ebx
  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c3		 ret	 0
$LN17@fill_windo:

; 1583 :         }
; 1584 :         else if (s->high_water < (ulg)curr + WIN_INIT) {

  00163	8d 83 02 01 00
	00		 lea	 eax, DWORD PTR [ebx+258]
  00169	3b c8		 cmp	 ecx, eax
  0016b	73 26		 jae	 SHORT $LN20@fill_windo

; 1585 :             /* High water mark at or above current data, but below current data
; 1586 :              * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
; 1587 :              * to end of window, whichever is less.
; 1588 :              */
; 1589 :             init = (ulg)curr + WIN_INIT - s->high_water;

  0016d	2b d9		 sub	 ebx, ecx

; 1590 :             if (init > s->window_size - s->high_water)

  0016f	2b f9		 sub	 edi, ecx
  00171	8d 83 02 01 00
	00		 lea	 eax, DWORD PTR [ebx+258]

; 1591 :                 init = s->window_size - s->high_water;
; 1592 :             zmemzero(s->window + s->high_water, (unsigned)init);

  00177	3b c7		 cmp	 eax, edi
  00179	0f 46 f8	 cmovbe	 edi, eax
  0017c	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0017f	57		 push	 edi
  00180	03 c1		 add	 eax, ecx
  00182	6a 00		 push	 0
  00184	50		 push	 eax
  00185	e8 00 00 00 00	 call	 _memset
  0018a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1593 :             s->high_water += init;

  0018d	01 be c0 16 00
	00		 add	 DWORD PTR [esi+5824], edi
$LN20@fill_windo:

; 1594 :         }
; 1595 :     }
; 1596 : 
; 1597 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1598 :            "not enough room for search");
; 1599 : }

  00193	5f		 pop	 edi
  00194	5e		 pop	 esi
  00195	5b		 pop	 ebx
  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c3		 ret	 0
_fill_window ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflate_stored
_TEXT	SEGMENT
tv1338 = -12						; size = 4
_len$2$ = -8						; size = 4
_left$2$ = -4						; size = 4
tv1261 = 8						; size = 4
_len$4$ = 8						; size = 4
_used$2$ = 8						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_stored PROC					; COMDAT

; 1646 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1647 :     /* Smallest worthy block size when not flushing or finishing. By default
; 1648 :      * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
; 1649 :      * large input and output buffers, the stored block size will be larger.
; 1650 :      */
; 1651 :     unsigned min_block = MIN(s->pending_buf_size - 5, s->w_size);
; 1652 : 
; 1653 :     /* Copy as many min_block or larger stored blocks directly to next_out as
; 1654 :      * possible. If flushing, copy the remaining available input to next_out as
; 1655 :      * stored blocks, if there is enough space.
; 1656 :      */
; 1657 :     unsigned len, left, have, last = 0;
; 1658 :     unsigned used = s->strm->avail_in;

  00006	8b 55 0c	 mov	 edx, DWORD PTR _flush$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000e	57		 push	 edi
  0000f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00012	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00015	83 c0 fb	 add	 eax, -5			; fffffffbH
  00018	3b c1		 cmp	 eax, ecx
  0001a	0f 46 c8	 cmovbe	 ecx, eax
  0001d	8b 06		 mov	 eax, DWORD PTR [esi]
  0001f	89 4d f4	 mov	 DWORD PTR tv1338[ebp], ecx
  00022	33 ff		 xor	 edi, edi
  00024	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00027	89 4d 08	 mov	 DWORD PTR _used$2$[ebp], ecx
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL4@deflate_st:

; 1659 :     do {
; 1660 :         /* Set len to the maximum size block that we can copy directly with the
; 1661 :          * available input data and output space. Set left to how much of that
; 1662 :          * would be copied from what's left in the window.
; 1663 :          */
; 1664 :         len = MAX_STORED;       /* maximum deflate stored block length */
; 1665 :         have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  00030	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]

; 1666 :         if (s->strm->avail_out < have)          /* need room for header */

  00036	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00038	83 c0 2a	 add	 eax, 42			; 0000002aH
  0003b	c1 f8 03	 sar	 eax, 3
  0003e	c7 45 f8 ff ff
	00 00		 mov	 DWORD PTR _len$2$[ebp], 65535 ; 0000ffffH
  00045	8b 59 10	 mov	 ebx, DWORD PTR [ecx+16]
  00048	3b d8		 cmp	 ebx, eax
  0004a	0f 82 09 01 00
	00		 jb	 $LN3@deflate_st

; 1667 :             break;
; 1668 :             /* maximum stored block length that will fit in avail_out: */
; 1669 :         have = s->strm->avail_out - have;
; 1670 :         left = s->strstart - s->block_start;    /* bytes left in window */

  00050	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00053	2b d8		 sub	 ebx, eax
  00055	2b 4e 5c	 sub	 ecx, DWORD PTR [esi+92]

; 1671 :         if (len > (ulg)left + s->strm->avail_in)

  00058	8b 06		 mov	 eax, DWORD PTR [esi]
  0005a	89 4d fc	 mov	 DWORD PTR _left$2$[ebp], ecx
  0005d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00060	03 c1		 add	 eax, ecx
  00062	8b 4d f8	 mov	 ecx, DWORD PTR _len$2$[ebp]
  00065	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0006a	0f 42 c8	 cmovb	 ecx, eax

; 1672 :             len = left + s->strm->avail_in;     /* limit len to the input */
; 1673 :         if (len > have)
; 1674 :             len = have;                         /* limit len to the output */
; 1675 : 
; 1676 :         /* If the stored block would be less than min_block in length, or if
; 1677 :          * unable to copy all of the available input when flushing, then try
; 1678 :          * copying to the window and the pending buffer instead. Also don't
; 1679 :          * write an empty block when flushing -- deflate() does that.
; 1680 :          */
; 1681 :         if (len < min_block && ((len == 0 && flush != Z_FINISH) ||

  0006d	3b cb		 cmp	 ecx, ebx
  0006f	0f 46 d9	 cmovbe	 ebx, ecx
  00072	3b 5d f4	 cmp	 ebx, DWORD PTR tv1338[ebp]
  00075	73 1d		 jae	 SHORT $LN47@deflate_st
  00077	85 db		 test	 ebx, ebx
  00079	75 09		 jne	 SHORT $LN10@deflate_st
  0007b	83 fa 04	 cmp	 edx, 4
  0007e	0f 85 d5 00 00
	00		 jne	 $LN3@deflate_st
$LN10@deflate_st:
  00084	85 d2		 test	 edx, edx
  00086	0f 84 cd 00 00
	00		 je	 $LN3@deflate_st
  0008c	3b d8		 cmp	 ebx, eax
  0008e	0f 85 c5 00 00
	00		 jne	 $LN3@deflate_st
$LN47@deflate_st:

; 1682 :                                 flush == Z_NO_FLUSH ||
; 1683 :                                 len != left + s->strm->avail_in))
; 1684 :             break;
; 1685 : 
; 1686 :         /* Make a dummy stored block in pending to get the header bytes,
; 1687 :          * including any pending bits. This also updates the debugging counts.
; 1688 :          */
; 1689 :         last = flush == Z_FINISH && len == left + s->strm->avail_in ? 1 : 0;

  00094	83 fa 04	 cmp	 edx, 4
  00097	75 09		 jne	 SHORT $LN51@deflate_st
  00099	3b d8		 cmp	 ebx, eax
  0009b	75 05		 jne	 SHORT $LN51@deflate_st
  0009d	8d 7a fd	 lea	 edi, DWORD PTR [edx-3]
  000a0	eb 02		 jmp	 SHORT $LN34@deflate_st
$LN51@deflate_st:
  000a2	33 ff		 xor	 edi, edi
$LN34@deflate_st:

; 1690 :         _tr_stored_block(s, (char *)0, 0L, last);

  000a4	57		 push	 edi
  000a5	6a 00		 push	 0
  000a7	33 d2		 xor	 edx, edx
  000a9	8b ce		 mov	 ecx, esi
  000ab	e8 00 00 00 00	 call	 __tr_stored_block

; 1691 : 
; 1692 :         /* Replace the lengths in the dummy stored block with len. */
; 1693 :         s->pending_buf[s->pending - 4] = len;

  000b0	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1694 :         s->pending_buf[s->pending - 3] = len >> 8;

  000b3	8b d3		 mov	 edx, ebx
  000b5	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b8	83 c4 08	 add	 esp, 8
  000bb	c1 ea 08	 shr	 edx, 8
  000be	88 5c 01 fc	 mov	 BYTE PTR [ecx+eax-4], bl
  000c2	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000c5	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000c8	88 54 01 fd	 mov	 BYTE PTR [ecx+eax-3], dl

; 1695 :         s->pending_buf[s->pending - 2] = ~len;

  000cc	8a d3		 mov	 dl, bl
  000ce	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000d1	f6 d2		 not	 dl
  000d3	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000d6	88 54 01 fe	 mov	 BYTE PTR [ecx+eax-2], dl

; 1696 :         s->pending_buf[s->pending - 1] = ~len >> 8;

  000da	8b d3		 mov	 edx, ebx
  000dc	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000df	f7 d2		 not	 edx
  000e1	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000e4	c1 ea 08	 shr	 edx, 8
  000e7	88 54 01 ff	 mov	 BYTE PTR [ecx+eax-1], dl

; 1697 : 
; 1698 :         /* Write the stored block header bytes. */
; 1699 :         flush_pending(s->strm);

  000eb	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ed	e8 00 00 00 00	 call	 _flush_pending

; 1700 : 
; 1701 : #ifdef ZLIB_DEBUG
; 1702 :         /* Update debugging counts for the data about to be copied. */
; 1703 :         s->compressed_len += len << 3;
; 1704 :         s->bits_sent += len << 3;
; 1705 : #endif
; 1706 : 
; 1707 :         /* Copy uncompressed bytes from the window to next_out. */
; 1708 :         if (left) {

  000f2	8b 45 fc	 mov	 eax, DWORD PTR _left$2$[ebp]
  000f5	85 c0		 test	 eax, eax
  000f7	74 34		 je	 SHORT $LN46@deflate_st

; 1709 :             if (left > len)

  000f9	3b c3		 cmp	 eax, ebx
  000fb	0f 47 c3	 cmova	 eax, ebx

; 1710 :                 left = len;
; 1711 :             zmemcpy(s->strm->next_out, s->window + s->block_start, left);

  000fe	50		 push	 eax
  000ff	89 45 fc	 mov	 DWORD PTR _left$2$[ebp], eax
  00102	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00105	03 46 5c	 add	 eax, DWORD PTR [esi+92]
  00108	50		 push	 eax
  00109	8b 06		 mov	 eax, DWORD PTR [esi]
  0010b	ff 70 0c	 push	 DWORD PTR [eax+12]
  0010e	e8 00 00 00 00	 call	 _memcpy

; 1712 :             s->strm->next_out += left;

  00113	8b 06		 mov	 eax, DWORD PTR [esi]
  00115	83 c4 0c	 add	 esp, 12			; 0000000cH
  00118	8b 4d fc	 mov	 ecx, DWORD PTR _left$2$[ebp]
  0011b	01 48 0c	 add	 DWORD PTR [eax+12], ecx

; 1713 :             s->strm->avail_out -= left;

  0011e	8b 06		 mov	 eax, DWORD PTR [esi]
  00120	29 48 10	 sub	 DWORD PTR [eax+16], ecx

; 1714 :             s->strm->total_out += left;

  00123	8b 06		 mov	 eax, DWORD PTR [esi]
  00125	01 48 14	 add	 DWORD PTR [eax+20], ecx

; 1715 :             s->block_start += left;

  00128	01 4e 5c	 add	 DWORD PTR [esi+92], ecx

; 1716 :             len -= left;

  0012b	2b d9		 sub	 ebx, ecx
$LN46@deflate_st:

; 1717 :         }
; 1718 : 
; 1719 :         /* Copy uncompressed bytes directly from next_in to next_out, updating
; 1720 :          * the check value.
; 1721 :          */
; 1722 :         if (len) {

  0012d	85 db		 test	 ebx, ebx
  0012f	74 1d		 je	 SHORT $LN2@deflate_st

; 1723 :             read_buf(s->strm, s->strm->next_out, len);

  00131	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00133	53		 push	 ebx
  00134	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00137	e8 00 00 00 00	 call	 _read_buf

; 1724 :             s->strm->next_out += len;

  0013c	8b 06		 mov	 eax, DWORD PTR [esi]
  0013e	83 c4 04	 add	 esp, 4
  00141	01 58 0c	 add	 DWORD PTR [eax+12], ebx

; 1725 :             s->strm->avail_out -= len;

  00144	8b 06		 mov	 eax, DWORD PTR [esi]
  00146	29 58 10	 sub	 DWORD PTR [eax+16], ebx

; 1726 :             s->strm->total_out += len;

  00149	8b 06		 mov	 eax, DWORD PTR [esi]
  0014b	01 58 14	 add	 DWORD PTR [eax+20], ebx
$LN2@deflate_st:

; 1727 :         }
; 1728 :     } while (last == 0);

  0014e	8b 55 0c	 mov	 edx, DWORD PTR _flush$[ebp]
  00151	85 ff		 test	 edi, edi
  00153	0f 84 d7 fe ff
	ff		 je	 $LL4@deflate_st
$LN3@deflate_st:

; 1729 : 
; 1730 :     /* Update the sliding window with the last s->w_size bytes of the copied
; 1731 :      * data, or append all of the copied data to the existing window if less
; 1732 :      * than s->w_size bytes were copied. Also update the number of bytes to
; 1733 :      * insert in the hash tables, in the event that deflateParams() switches to
; 1734 :      * a non-zero compression level.
; 1735 :      */
; 1736 :     used -= s->strm->avail_in;      /* number of input bytes directly copied */

  00159	8b 06		 mov	 eax, DWORD PTR [esi]
  0015b	8b 5d 08	 mov	 ebx, DWORD PTR _used$2$[ebp]
  0015e	2b 58 04	 sub	 ebx, DWORD PTR [eax+4]
  00161	89 5d 08	 mov	 DWORD PTR _used$2$[ebp], ebx

; 1737 :     if (used) {

  00164	0f 84 9d 00 00
	00		 je	 $LN52@deflate_st

; 1738 :         /* If any input was used, then no unused input remains in the window,
; 1739 :          * therefore s->block_start == s->strstart.
; 1740 :          */
; 1741 :         if (used >= s->w_size) {    /* supplant the previous history */

  0016a	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0016d	3b da		 cmp	 ebx, edx
  0016f	72 23		 jb	 SHORT $LN15@deflate_st

; 1742 :             s->matches = 2;         /* clear hash */

  00171	c7 86 b0 16 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+5808], 2

; 1743 :             zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);

  0017b	8b 00		 mov	 eax, DWORD PTR [eax]
  0017d	52		 push	 edx
  0017e	2b c2		 sub	 eax, edx
  00180	50		 push	 eax
  00181	ff 76 38	 push	 DWORD PTR [esi+56]
  00184	e8 00 00 00 00	 call	 _memcpy

; 1744 :             s->strstart = s->w_size;

  00189	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0018c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0018f	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 1745 :         }

  00192	eb 55		 jmp	 SHORT $LN58@deflate_st
$LN15@deflate_st:

; 1746 :         else {
; 1747 :             if (s->window_size - s->strstart <= used) {

  00194	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00197	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
  0019a	2b c3		 sub	 eax, ebx
  0019c	3b 45 08	 cmp	 eax, DWORD PTR _used$2$[ebp]
  0019f	77 28		 ja	 SHORT $LN18@deflate_st

; 1748 :                 /* Slide the window down. */
; 1749 :                 s->strstart -= s->w_size;
; 1750 :                 zmemcpy(s->window, s->window + s->w_size, s->strstart);

  001a1	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001a4	2b da		 sub	 ebx, edx
  001a6	53		 push	 ebx
  001a7	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  001aa	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  001ad	50		 push	 eax
  001ae	51		 push	 ecx
  001af	e8 00 00 00 00	 call	 _memcpy

; 1751 :                 if (s->matches < 2)

  001b4	8b 86 b0 16 00
	00		 mov	 eax, DWORD PTR [esi+5808]
  001ba	83 c4 0c	 add	 esp, 12			; 0000000cH
  001bd	83 f8 02	 cmp	 eax, 2
  001c0	73 07		 jae	 SHORT $LN18@deflate_st

; 1752 :                     s->matches++;   /* add a pending slide_hash() */

  001c2	40		 inc	 eax
  001c3	89 86 b0 16 00
	00		 mov	 DWORD PTR [esi+5808], eax
$LN18@deflate_st:

; 1753 :             }
; 1754 :             zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);

  001c9	8b 06		 mov	 eax, DWORD PTR [esi]
  001cb	8b 5d 08	 mov	 ebx, DWORD PTR _used$2$[ebp]
  001ce	53		 push	 ebx
  001cf	8b 00		 mov	 eax, DWORD PTR [eax]
  001d1	2b c3		 sub	 eax, ebx
  001d3	50		 push	 eax
  001d4	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001d7	03 46 6c	 add	 eax, DWORD PTR [esi+108]
  001da	50		 push	 eax
  001db	e8 00 00 00 00	 call	 _memcpy
  001e0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1755 :             s->strstart += used;

  001e3	01 5e 6c	 add	 DWORD PTR [esi+108], ebx
  001e6	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
$LN58@deflate_st:

; 1756 :         }
; 1757 :         s->block_start = s->strstart;

  001e9	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  001ec	8d 4e 5c	 lea	 ecx, DWORD PTR [esi+92]

; 1758 :         s->insert += MIN(used, s->w_size - s->insert);

  001ef	8b 86 b4 16 00
	00		 mov	 eax, DWORD PTR [esi+5812]
  001f5	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  001f8	2b c8		 sub	 ecx, eax
  001fa	3b d9		 cmp	 ebx, ecx
  001fc	0f 46 cb	 cmovbe	 ecx, ebx
  001ff	03 c8		 add	 ecx, eax
  00201	89 8e b4 16 00
	00		 mov	 DWORD PTR [esi+5812], ecx
$LN52@deflate_st:

; 1759 :     }
; 1760 :     if (s->high_water < s->strstart)

  00207	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  0020a	39 96 c0 16 00
	00		 cmp	 DWORD PTR [esi+5824], edx
  00210	73 06		 jae	 SHORT $LN19@deflate_st

; 1761 :         s->high_water = s->strstart;

  00212	89 96 c0 16 00
	00		 mov	 DWORD PTR [esi+5824], edx
$LN19@deflate_st:

; 1762 : 
; 1763 :     /* If the last block was written to next_out, then done. */
; 1764 :     if (last)

  00218	85 ff		 test	 edi, edi
  0021a	74 0c		 je	 SHORT $LN20@deflate_st

; 1815 : }

  0021c	5f		 pop	 edi
  0021d	5e		 pop	 esi
  0021e	b8 03 00 00 00	 mov	 eax, 3
  00223	5b		 pop	 ebx
  00224	8b e5		 mov	 esp, ebp
  00226	5d		 pop	 ebp
  00227	c3		 ret	 0
$LN20@deflate_st:

; 1765 :         return finish_done;
; 1766 : 
; 1767 :     /* If flushing and all input has been consumed, then done. */
; 1768 :     if (flush != Z_NO_FLUSH && flush != Z_FINISH &&
; 1769 :         s->strm->avail_in == 0 && (long)s->strstart == s->block_start)

  00228	8b 45 0c	 mov	 eax, DWORD PTR _flush$[ebp]
  0022b	85 c0		 test	 eax, eax
  0022d	74 1e		 je	 SHORT $LN21@deflate_st
  0022f	83 f8 04	 cmp	 eax, 4
  00232	74 19		 je	 SHORT $LN21@deflate_st
  00234	8b 06		 mov	 eax, DWORD PTR [esi]
  00236	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0023a	75 11		 jne	 SHORT $LN21@deflate_st
  0023c	3b 56 5c	 cmp	 edx, DWORD PTR [esi+92]
  0023f	75 0c		 jne	 SHORT $LN21@deflate_st

; 1815 : }

  00241	5f		 pop	 edi
  00242	5e		 pop	 esi
  00243	b8 01 00 00 00	 mov	 eax, 1
  00248	5b		 pop	 ebx
  00249	8b e5		 mov	 esp, ebp
  0024b	5d		 pop	 ebp
  0024c	c3		 ret	 0
$LN21@deflate_st:

; 1770 :         return block_done;
; 1771 : 
; 1772 :     /* Fill the window with any remaining input. */
; 1773 :     have = s->window_size - s->strstart - 1;

  0024d	8b 5e 3c	 mov	 ebx, DWORD PTR [esi+60]

; 1774 :     if (s->strm->avail_in > have && s->block_start >= (long)s->w_size) {

  00250	8b ca		 mov	 ecx, edx
  00252	8b 06		 mov	 eax, DWORD PTR [esi]
  00254	2b da		 sub	 ebx, edx
  00256	4b		 dec	 ebx
  00257	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  0025a	76 43		 jbe	 SHORT $LN22@deflate_st
  0025c	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0025f	89 45 08	 mov	 DWORD PTR tv1261[ebp], eax
  00262	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00265	39 45 08	 cmp	 DWORD PTR tv1261[ebp], eax
  00268	7c 35		 jl	 SHORT $LN22@deflate_st

; 1775 :         /* Slide the window down. */
; 1776 :         s->block_start -= s->w_size;

  0026a	8b 4d 08	 mov	 ecx, DWORD PTR tv1261[ebp]

; 1777 :         s->strstart -= s->w_size;

  0026d	2b d0		 sub	 edx, eax
  0026f	2b c8		 sub	 ecx, eax
  00271	89 56 6c	 mov	 DWORD PTR [esi+108], edx
  00274	89 4e 5c	 mov	 DWORD PTR [esi+92], ecx

; 1778 :         zmemcpy(s->window, s->window + s->w_size, s->strstart);

  00277	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0027a	03 c1		 add	 eax, ecx
  0027c	52		 push	 edx
  0027d	50		 push	 eax
  0027e	51		 push	 ecx
  0027f	e8 00 00 00 00	 call	 _memcpy

; 1779 :         if (s->matches < 2)

  00284	8b 86 b0 16 00
	00		 mov	 eax, DWORD PTR [esi+5808]
  0028a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0028d	83 f8 02	 cmp	 eax, 2
  00290	73 07		 jae	 SHORT $LN23@deflate_st

; 1780 :             s->matches++;           /* add a pending slide_hash() */

  00292	40		 inc	 eax
  00293	89 86 b0 16 00
	00		 mov	 DWORD PTR [esi+5808], eax
$LN23@deflate_st:

; 1781 :         have += s->w_size;          /* more space now */

  00299	03 5e 2c	 add	 ebx, DWORD PTR [esi+44]
  0029c	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
$LN22@deflate_st:

; 1782 :     }
; 1783 :     if (have > s->strm->avail_in)

  0029f	8b 06		 mov	 eax, DWORD PTR [esi]
  002a1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002a4	3b d8		 cmp	 ebx, eax
  002a6	76 05		 jbe	 SHORT $LN53@deflate_st

; 1784 :         have = s->strm->avail_in;

  002a8	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  002ab	8b d8		 mov	 ebx, eax
$LN53@deflate_st:

; 1785 :     if (have) {

  002ad	85 db		 test	 ebx, ebx
  002af	74 16		 je	 SHORT $LN25@deflate_st

; 1786 :         read_buf(s->strm, s->window + s->strstart, have);

  002b1	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  002b4	03 d1		 add	 edx, ecx
  002b6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002b8	53		 push	 ebx
  002b9	e8 00 00 00 00	 call	 _read_buf
  002be	83 c4 04	 add	 esp, 4

; 1787 :         s->strstart += have;

  002c1	01 5e 6c	 add	 DWORD PTR [esi+108], ebx
  002c4	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
$LN25@deflate_st:

; 1788 :     }
; 1789 :     if (s->high_water < s->strstart)

  002c7	39 8e c0 16 00
	00		 cmp	 DWORD PTR [esi+5824], ecx
  002cd	73 06		 jae	 SHORT $LN26@deflate_st

; 1790 :         s->high_water = s->strstart;

  002cf	89 8e c0 16 00
	00		 mov	 DWORD PTR [esi+5824], ecx
$LN26@deflate_st:

; 1791 : 
; 1792 :     /* There was not enough avail_out to write a complete worthy or flushed
; 1793 :      * stored block to next_out. Write a stored block to pending instead, if we
; 1794 :      * have enough input for a worthy block, or if flushing and there is enough
; 1795 :      * room for the remaining input as a stored block in the pending buffer.
; 1796 :      */
; 1797 :     have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  002d5	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]

; 1798 :         /* maximum stored block length that will fit in pending: */
; 1799 :     have = MIN(s->pending_buf_size - have, MAX_STORED);

  002db	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  002de	83 c0 2a	 add	 eax, 42			; 0000002aH

; 1800 :     min_block = MIN(have, s->w_size);
; 1801 :     left = s->strstart - s->block_start;
; 1802 :     if (left >= min_block ||

  002e1	8b 55 0c	 mov	 edx, DWORD PTR _flush$[ebp]
  002e4	c1 f8 03	 sar	 eax, 3
  002e7	2b d8		 sub	 ebx, eax
  002e9	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  002ee	3b d8		 cmp	 ebx, eax
  002f0	0f 47 d8	 cmova	 ebx, eax
  002f3	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  002f6	2b 4e 5c	 sub	 ecx, DWORD PTR [esi+92]
  002f9	3b d8		 cmp	 ebx, eax
  002fb	0f 46 c3	 cmovbe	 eax, ebx
  002fe	3b c8		 cmp	 ecx, eax
  00300	73 19		 jae	 SHORT $LN54@deflate_st
  00302	85 c9		 test	 ecx, ecx
  00304	75 05		 jne	 SHORT $LN29@deflate_st
  00306	83 fa 04	 cmp	 edx, 4
  00309	75 54		 jne	 SHORT $LN27@deflate_st
$LN29@deflate_st:
  0030b	85 d2		 test	 edx, edx
  0030d	74 50		 je	 SHORT $LN27@deflate_st
  0030f	8b 06		 mov	 eax, DWORD PTR [esi]
  00311	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00315	75 48		 jne	 SHORT $LN27@deflate_st
  00317	3b cb		 cmp	 ecx, ebx
  00319	77 44		 ja	 SHORT $LN27@deflate_st
$LN54@deflate_st:

; 1803 :         ((left || flush == Z_FINISH) && flush != Z_NO_FLUSH &&
; 1804 :          s->strm->avail_in == 0 && left <= have)) {
; 1805 :         len = MIN(left, have);

  0031b	3b cb		 cmp	 ecx, ebx
  0031d	8b c1		 mov	 eax, ecx
  0031f	0f 47 c3	 cmova	 eax, ebx
  00322	89 45 08	 mov	 DWORD PTR _len$4$[ebp], eax

; 1806 :         last = flush == Z_FINISH && s->strm->avail_in == 0 &&

  00325	83 fa 04	 cmp	 edx, 4
  00328	75 14		 jne	 SHORT $LN41@deflate_st
  0032a	8b 06		 mov	 eax, DWORD PTR [esi]
  0032c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00330	8b 45 08	 mov	 eax, DWORD PTR _len$4$[ebp]
  00333	75 09		 jne	 SHORT $LN41@deflate_st
  00335	3b c1		 cmp	 eax, ecx
  00337	75 05		 jne	 SHORT $LN41@deflate_st
  00339	8d 7a fd	 lea	 edi, DWORD PTR [edx-3]
  0033c	eb 02		 jmp	 SHORT $LN42@deflate_st
$LN41@deflate_st:
  0033e	33 ff		 xor	 edi, edi
$LN42@deflate_st:

; 1807 :                len == left ? 1 : 0;
; 1808 :         _tr_stored_block(s, (charf *)s->window + s->block_start, len, last);

  00340	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00343	8b ce		 mov	 ecx, esi
  00345	03 56 5c	 add	 edx, DWORD PTR [esi+92]
  00348	57		 push	 edi
  00349	50		 push	 eax
  0034a	e8 00 00 00 00	 call	 __tr_stored_block

; 1809 :         s->block_start += len;

  0034f	8b 45 08	 mov	 eax, DWORD PTR _len$4$[ebp]
  00352	83 c4 08	 add	 esp, 8

; 1810 :         flush_pending(s->strm);

  00355	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00357	01 46 5c	 add	 DWORD PTR [esi+92], eax
  0035a	e8 00 00 00 00	 call	 _flush_pending
$LN27@deflate_st:

; 1811 :     }
; 1812 : 
; 1813 :     /* We've done all we can with the available input and output. */
; 1814 :     return last ? finish_started : need_more;

  0035f	f7 df		 neg	 edi
  00361	1b ff		 sbb	 edi, edi
  00363	83 e7 02	 and	 edi, 2
  00366	8b c7		 mov	 eax, edi
  00368	5f		 pop	 edi

; 1815 : }

  00369	5e		 pop	 esi
  0036a	5b		 pop	 ebx
  0036b	8b e5		 mov	 esp, ebp
  0036d	5d		 pop	 ebp
  0036e	c3		 ret	 0
_deflate_stored ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflate_fast
_TEXT	SEGMENT
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_fast PROC					; COMDAT

; 1827 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000b	57		 push	 edi
  0000c	0f 1f 40 00	 npad	 4
$LL2@deflate_fa:

; 1828 :     IPos hash_head;       /* head of the hash chain */
; 1829 :     int bflush;           /* set if current block must be flushed */
; 1830 : 
; 1831 :     for (;;) {
; 1832 :         /* Make sure that we always have enough lookahead, except
; 1833 :          * at the end of the input file. We need MAX_MATCH bytes
; 1834 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1835 :          * string following the next match.
; 1836 :          */
; 1837 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00010	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00013	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00018	73 21		 jae	 SHORT $LN10@deflate_fa

; 1838 :             fill_window(s);

  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 _fill_window

; 1839 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00021	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00024	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00029	73 08		 jae	 SHORT $LN9@deflate_fa
  0002b	85 db		 test	 ebx, ebx
  0002d	0f 84 2f 02 00
	00		 je	 $LN39@deflate_fa
$LN9@deflate_fa:

; 1840 :                 return need_more;
; 1841 :             }
; 1842 :             if (s->lookahead == 0) break; /* flush the current block */

  00033	85 c0		 test	 eax, eax
  00035	0f 84 2e 02 00
	00		 je	 $LN38@deflate_fa
$LN10@deflate_fa:

; 1843 :         }
; 1844 : 
; 1845 :         /* Insert the string window[strstart .. strstart+2] in the
; 1846 :          * dictionary, and set hash_head to the head of the hash chain:
; 1847 :          */
; 1848 :         hash_head = NIL;
; 1849 :         if (s->lookahead >= MIN_MATCH) {

  0003b	83 f8 03	 cmp	 eax, 3
  0003e	72 66		 jb	 SHORT $LN12@deflate_fa

; 1850 :             INSERT_STRING(s, s->strstart, hash_head);

  00040	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]
  00043	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00046	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  00049	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0004c	d3 e2		 shl	 edx, cl
  0004e	0f b6 44 38 02	 movzx	 eax, BYTE PTR [eax+edi+2]
  00053	23 7e 34	 and	 edi, DWORD PTR [esi+52]
  00056	33 d0		 xor	 edx, eax
  00058	23 56 54	 and	 edx, DWORD PTR [esi+84]
  0005b	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0005e	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00061	89 56 48	 mov	 DWORD PTR [esi+72], edx
  00064	66 8b 04 50	 mov	 ax, WORD PTR [eax+edx*2]
  00068	66 89 04 79	 mov	 WORD PTR [ecx+edi*2], ax
  0006c	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  0006f	8b ca		 mov	 ecx, edx
  00071	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  00074	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00077	0f b7 3c 48	 movzx	 edi, WORD PTR [eax+ecx*2]
  0007b	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0007e	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00081	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 1851 :         }
; 1852 : 
; 1853 :         /* Find the longest match, discarding those <= prev_length.
; 1854 :          * At this point we have always match_length < MIN_MATCH
; 1855 :          */
; 1856 :         if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {

  00085	85 ff		 test	 edi, edi
  00087	74 1d		 je	 SHORT $LN12@deflate_fa
  00089	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0008c	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0008f	2b cf		 sub	 ecx, edi
  00091	2d 06 01 00 00	 sub	 eax, 262		; 00000106H
  00096	3b c8		 cmp	 ecx, eax
  00098	77 0c		 ja	 SHORT $LN12@deflate_fa

; 1857 :             /* To simplify the code, we prevent matches with the string
; 1858 :              * of window index 0 (in particular we have to avoid a match
; 1859 :              * of the string with itself at the start of the input file).
; 1860 :              */
; 1861 :             s->match_length = longest_match (s, hash_head);

  0009a	8b d7		 mov	 edx, edi
  0009c	8b ce		 mov	 ecx, esi
  0009e	e8 00 00 00 00	 call	 _longest_match
  000a3	89 46 60	 mov	 DWORD PTR [esi+96], eax
$LN12@deflate_fa:

; 1862 :             /* longest_match() sets match_start */
; 1863 :         }
; 1864 :         if (s->match_length >= MIN_MATCH) {

  000a6	8b 5e 60	 mov	 ebx, DWORD PTR [esi+96]
  000a9	83 fb 03	 cmp	 ebx, 3
  000ac	0f 82 17 01 00
	00		 jb	 $LN13@deflate_fa

; 1865 :             check_match(s, s->strstart, s->match_start, s->match_length);
; 1866 : 
; 1867 :             _tr_tally_dist(s, s->strstart - s->match_start,

  000b2	66 8b 46 6c	 mov	 ax, WORD PTR [esi+108]
  000b6	80 eb 03	 sub	 bl, 3
  000b9	66 2b 46 70	 sub	 ax, WORD PTR [esi+112]
  000bd	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  000c3	0f b7 d0	 movzx	 edx, ax
  000c6	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  000cc	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  000d0	81 c2 ff ff 00
	00		 add	 edx, 65535		; 0000ffffH
  000d6	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  000dc	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  000e2	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  000e5	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  000ea	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  000f0	0f b6 c3	 movzx	 eax, bl
  000f3	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  000fa	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  00102	0f b7 c2	 movzx	 eax, dx
  00105	66 3b d1	 cmp	 dx, cx
  00108	73 08		 jae	 SHORT $LN24@deflate_fa
  0010a	8a 80 00 00 00
	00		 mov	 al, BYTE PTR __dist_code[eax]
  00110	eb 09		 jmp	 SHORT $LN25@deflate_fa
$LN24@deflate_fa:
  00112	c1 e8 07	 shr	 eax, 7
  00115	8a 80 00 01 00
	00		 mov	 al, BYTE PTR __dist_code[eax+256]
$LN25@deflate_fa:
  0011b	0f b6 c0	 movzx	 eax, al
  0011e	33 db		 xor	 ebx, ebx
  00120	66 ff 84 86 88
	09 00 00	 inc	 WORD PTR [esi+eax*4+2440]
  00128	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]

; 1868 :                            s->match_length - MIN_MATCH, bflush);
; 1869 : 
; 1870 :             s->lookahead -= s->match_length;

  0012e	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
  00131	48		 dec	 eax
  00132	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax
  00138	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  0013b	0f 94 c3	 sete	 bl
  0013e	2b c1		 sub	 eax, ecx
  00140	89 46 74	 mov	 DWORD PTR [esi+116], eax

; 1871 : 
; 1872 :             /* Insert new strings in the hash table only if the match length
; 1873 :              * is not too large. This saves time but degrades compression.
; 1874 :              */
; 1875 : #ifndef FASTEST
; 1876 :             if (s->match_length <= s->max_insert_length &&

  00143	3b 8e 80 00 00
	00		 cmp	 ecx, DWORD PTR [esi+128]
  00149	77 53		 ja	 SHORT $LN45@deflate_fa
  0014b	83 f8 03	 cmp	 eax, 3
  0014e	72 4e		 jb	 SHORT $LN45@deflate_fa

; 1877 :                 s->lookahead >= MIN_MATCH) {
; 1878 :                 s->match_length--; /* string at strstart already in table */

  00150	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00153	89 46 60	 mov	 DWORD PTR [esi+96], eax
$LL7@deflate_fa:

; 1879 :                 do {
; 1880 :                     s->strstart++;

  00156	ff 46 6c	 inc	 DWORD PTR [esi+108]
  00159	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]

; 1881 :                     INSERT_STRING(s, s->strstart, hash_head);

  0015c	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0015f	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00162	0f b6 54 07 02	 movzx	 edx, BYTE PTR [edi+eax+2]
  00167	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  0016a	23 7e 34	 and	 edi, DWORD PTR [esi+52]
  0016d	d3 e0		 shl	 eax, cl
  0016f	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00172	33 d0		 xor	 edx, eax
  00174	23 56 54	 and	 edx, DWORD PTR [esi+84]
  00177	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0017a	89 56 48	 mov	 DWORD PTR [esi+72], edx
  0017d	0f b7 04 50	 movzx	 eax, WORD PTR [eax+edx*2]
  00181	66 89 04 79	 mov	 WORD PTR [ecx+edi*2], ax
  00185	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  00188	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  0018b	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  0018f	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 1882 :                     /* strstart never exceeds WSIZE-MAX_MATCH, so there are
; 1883 :                      * always MIN_MATCH bytes ahead.
; 1884 :                      */
; 1885 :                 } while (--s->match_length != 0);

  00193	83 46 60 ff	 add	 DWORD PTR [esi+96], -1
  00197	75 bd		 jne	 SHORT $LL7@deflate_fa

; 1886 :                 s->strstart++;
; 1887 :             } else

  00199	e9 7b 00 00 00	 jmp	 $LN48@deflate_fa
$LN45@deflate_fa:

; 1888 : #endif
; 1889 :             {
; 1890 :                 s->strstart += s->match_length;

  0019e	01 4e 6c	 add	 DWORD PTR [esi+108], ecx
  001a1	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]

; 1891 :                 s->match_length = 0;
; 1892 :                 s->ins_h = s->window[s->strstart];

  001a4	8b 46 38	 mov	 eax, DWORD PTR [esi+56]

; 1893 :                 UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);

  001a7	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  001aa	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  001b1	0f b6 14 38	 movzx	 edx, BYTE PTR [eax+edi]
  001b5	89 56 48	 mov	 DWORD PTR [esi+72], edx
  001b8	0f b6 44 38 01	 movzx	 eax, BYTE PTR [eax+edi+1]
  001bd	d3 e2		 shl	 edx, cl
  001bf	33 d0		 xor	 edx, eax
  001c1	23 56 54	 and	 edx, DWORD PTR [esi+84]
  001c4	89 56 48	 mov	 DWORD PTR [esi+72], edx

; 1894 : #if MIN_MATCH != 3
; 1895 :                 Call UPDATE_HASH() MIN_MATCH-3 more times
; 1896 : #endif
; 1897 :                 /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
; 1898 :                  * matter since it will be recomputed at next deflate call.
; 1899 :                  */
; 1900 :             }
; 1901 :         } else {

  001c7	eb 56		 jmp	 SHORT $LN14@deflate_fa
$LN13@deflate_fa:

; 1902 :             /* No match, output a literal byte */
; 1903 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1904 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  001c9	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001cc	33 ff		 xor	 edi, edi
  001ce	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  001d1	33 db		 xor	 ebx, ebx
  001d3	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  001d6	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  001dc	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  001e2	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  001e6	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  001ec	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  001f2	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  001f5	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  001fb	0f b6 c2	 movzx	 eax, dl
  001fe	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  00206	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  0020c	48		 dec	 eax
  0020d	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax
  00213	0f 94 c3	 sete	 bl

; 1905 :             s->lookahead--;

  00216	ff 4e 74	 dec	 DWORD PTR [esi+116]
$LN48@deflate_fa:

; 1906 :             s->strstart++;
; 1907 :         }
; 1908 :         if (bflush) FLUSH_BLOCK(s, 0);

  00219	ff 46 6c	 inc	 DWORD PTR [esi+108]
  0021c	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]
$LN14@deflate_fa:
  0021f	85 db		 test	 ebx, ebx
  00221	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00224	0f 84 e6 fd ff
	ff		 je	 $LL2@deflate_fa
  0022a	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0022d	85 c0		 test	 eax, eax
  0022f	78 07		 js	 SHORT $LN26@deflate_fa
  00231	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00234	03 d0		 add	 edx, eax
  00236	eb 02		 jmp	 SHORT $LN27@deflate_fa
$LN26@deflate_fa:
  00238	33 d2		 xor	 edx, edx
$LN27@deflate_fa:
  0023a	2b f8		 sub	 edi, eax
  0023c	8b ce		 mov	 ecx, esi
  0023e	6a 00		 push	 0
  00240	57		 push	 edi
  00241	e8 00 00 00 00	 call	 __tr_flush_block
  00246	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00249	83 c4 08	 add	 esp, 8
  0024c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0024e	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00251	e8 00 00 00 00	 call	 _flush_pending
  00256	8b 06		 mov	 eax, DWORD PTR [esi]
  00258	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0025c	0f 85 ae fd ff
	ff		 jne	 $LL2@deflate_fa
$LN39@deflate_fa:
  00262	5f		 pop	 edi

; 1917 :     return block_done;
; 1918 : }

  00263	5e		 pop	 esi
  00264	33 c0		 xor	 eax, eax
  00266	5b		 pop	 ebx
  00267	5d		 pop	 ebp
  00268	c3		 ret	 0
$LN38@deflate_fa:

; 1909 :     }
; 1910 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  00269	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0026c	b8 02 00 00 00	 mov	 eax, 2
  00271	3b c8		 cmp	 ecx, eax
  00273	0f 42 c1	 cmovb	 eax, ecx
  00276	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax

; 1911 :     if (flush == Z_FINISH) {

  0027c	83 fb 04	 cmp	 ebx, 4
  0027f	75 3e		 jne	 SHORT $LN19@deflate_fa

; 1912 :         FLUSH_BLOCK(s, 1);

  00281	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00284	85 c0		 test	 eax, eax
  00286	78 07		 js	 SHORT $LN30@deflate_fa
  00288	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0028b	03 d0		 add	 edx, eax
  0028d	eb 02		 jmp	 SHORT $LN31@deflate_fa
$LN30@deflate_fa:
  0028f	33 d2		 xor	 edx, edx
$LN31@deflate_fa:
  00291	2b c8		 sub	 ecx, eax
  00293	6a 01		 push	 1
  00295	51		 push	 ecx
  00296	8b ce		 mov	 ecx, esi
  00298	e8 00 00 00 00	 call	 __tr_flush_block
  0029d	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002a0	83 c4 08	 add	 esp, 8
  002a3	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002a5	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  002a8	e8 00 00 00 00	 call	 _flush_pending
  002ad	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002af	33 c0		 xor	 eax, eax
  002b1	5f		 pop	 edi

; 1917 :     return block_done;
; 1918 : }

  002b2	5e		 pop	 esi
  002b3	5b		 pop	 ebx
  002b4	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  002b7	0f 95 c0	 setne	 al
  002ba	83 c0 02	 add	 eax, 2
  002bd	5d		 pop	 ebp
  002be	c3		 ret	 0
$LN19@deflate_fa:

; 1913 :         return finish_done;
; 1914 :     }
; 1915 :     if (s->last_lit)

  002bf	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  002c6	74 38		 je	 SHORT $LN22@deflate_fa

; 1916 :         FLUSH_BLOCK(s, 0);

  002c8	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  002cb	85 c0		 test	 eax, eax
  002cd	78 07		 js	 SHORT $LN32@deflate_fa
  002cf	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  002d2	03 d0		 add	 edx, eax
  002d4	eb 02		 jmp	 SHORT $LN33@deflate_fa
$LN32@deflate_fa:
  002d6	33 d2		 xor	 edx, edx
$LN33@deflate_fa:
  002d8	2b c8		 sub	 ecx, eax
  002da	6a 00		 push	 0
  002dc	51		 push	 ecx
  002dd	8b ce		 mov	 ecx, esi
  002df	e8 00 00 00 00	 call	 __tr_flush_block
  002e4	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002e7	83 c4 08	 add	 esp, 8
  002ea	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002ec	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  002ef	e8 00 00 00 00	 call	 _flush_pending
  002f4	8b 06		 mov	 eax, DWORD PTR [esi]
  002f6	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  002fa	0f 84 62 ff ff
	ff		 je	 $LN39@deflate_fa
$LN22@deflate_fa:
  00300	5f		 pop	 edi

; 1917 :     return block_done;
; 1918 : }

  00301	5e		 pop	 esi
  00302	b8 01 00 00 00	 mov	 eax, 1
  00307	5b		 pop	 ebx
  00308	5d		 pop	 ebp
  00309	c3		 ret	 0
_deflate_fast ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflate_slow
_TEXT	SEGMENT
tv1318 = -8						; size = 4
tv1294 = -4						; size = 4
_max_insert$1$ = 8					; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_slow PROC					; COMDAT

; 1929 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000b	57		 push	 edi
  0000c	0f 1f 40 00	 npad	 4
$LL60@deflate_sl:

; 1930 :     IPos hash_head;          /* head of hash chain */
; 1931 :     int bflush;              /* set if current block must be flushed */
; 1932 : 
; 1933 :     /* Process the input block. */
; 1934 :     for (;;) {
; 1935 :         /* Make sure that we always have enough lookahead, except
; 1936 :          * at the end of the input file. We need MAX_MATCH bytes
; 1937 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1938 :          * string following the next match.
; 1939 :          */
; 1940 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00010	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00013	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00016	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  0001b	73 21		 jae	 SHORT $LN10@deflate_sl

; 1941 :             fill_window(s);

  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 _fill_window

; 1942 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00024	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00027	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  0002c	73 08		 jae	 SHORT $LN9@deflate_sl
  0002e	85 db		 test	 ebx, ebx
  00030	0f 84 23 02 00
	00		 je	 $LN48@deflate_sl
$LN9@deflate_sl:

; 1943 :                 return need_more;
; 1944 :             }
; 1945 :             if (s->lookahead == 0) break; /* flush the current block */

  00036	85 c0		 test	 eax, eax
  00038	0f 84 d0 02 00
	00		 je	 $LN46@deflate_sl
$LN10@deflate_sl:

; 1946 :         }
; 1947 : 
; 1948 :         /* Insert the string window[strstart .. strstart+2] in the
; 1949 :          * dictionary, and set hash_head to the head of the hash chain:
; 1950 :          */
; 1951 :         hash_head = NIL;

  0003e	33 ff		 xor	 edi, edi

; 1952 :         if (s->lookahead >= MIN_MATCH) {

  00040	83 f8 03	 cmp	 eax, 3
  00043	72 45		 jb	 SHORT $LN11@deflate_sl

; 1953 :             INSERT_STRING(s, s->strstart, hash_head);

  00045	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]
  00048	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0004b	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  0004e	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00051	d3 e2		 shl	 edx, cl
  00053	0f b6 44 38 02	 movzx	 eax, BYTE PTR [eax+edi+2]
  00058	23 7e 34	 and	 edi, DWORD PTR [esi+52]
  0005b	33 d0		 xor	 edx, eax
  0005d	23 56 54	 and	 edx, DWORD PTR [esi+84]
  00060	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00063	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00066	89 56 48	 mov	 DWORD PTR [esi+72], edx
  00069	66 8b 04 50	 mov	 ax, WORD PTR [eax+edx*2]
  0006d	66 89 04 79	 mov	 WORD PTR [ecx+edi*2], ax
  00071	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  00074	8b ca		 mov	 ecx, edx
  00076	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  00079	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0007c	0f b7 3c 48	 movzx	 edi, WORD PTR [eax+ecx*2]
  00080	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00083	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00086	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN11@deflate_sl:

; 1954 :         }
; 1955 : 
; 1956 :         /* Find the longest match, discarding those <= prev_length.
; 1957 :          */
; 1958 :         s->prev_length = s->match_length, s->prev_match = s->match_start;

  0008a	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]

; 1959 :         s->match_length = MIN_MATCH-1;

  0008d	ba 02 00 00 00	 mov	 edx, 2
  00092	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  00095	89 4e 78	 mov	 DWORD PTR [esi+120], ecx
  00098	89 46 64	 mov	 DWORD PTR [esi+100], eax
  0009b	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2

; 1960 : 
; 1961 :         if (hash_head != NIL && s->prev_length < s->max_lazy_match &&

  000a2	85 ff		 test	 edi, edi
  000a4	74 53		 je	 SHORT $LN13@deflate_sl
  000a6	3b 8e 80 00 00
	00		 cmp	 ecx, DWORD PTR [esi+128]
  000ac	73 4b		 jae	 SHORT $LN13@deflate_sl
  000ae	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  000b1	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000b4	2b cf		 sub	 ecx, edi
  000b6	2d 06 01 00 00	 sub	 eax, 262		; 00000106H
  000bb	3b c8		 cmp	 ecx, eax
  000bd	77 3a		 ja	 SHORT $LN13@deflate_sl

; 1962 :             s->strstart - hash_head <= MAX_DIST(s)) {
; 1963 :             /* To simplify the code, we prevent matches with the string
; 1964 :              * of window index 0 (in particular we have to avoid a match
; 1965 :              * of the string with itself at the start of the input file).
; 1966 :              */
; 1967 :             s->match_length = longest_match (s, hash_head);

  000bf	8b d7		 mov	 edx, edi
  000c1	8b ce		 mov	 ecx, esi
  000c3	e8 00 00 00 00	 call	 _longest_match
  000c8	89 46 60	 mov	 DWORD PTR [esi+96], eax

; 1968 :             /* longest_match() sets match_start */
; 1969 : 
; 1970 :             if (s->match_length <= 5 && (s->strategy == Z_FILTERED

  000cb	8b d0		 mov	 edx, eax
  000cd	83 f8 05	 cmp	 eax, 5
  000d0	77 27		 ja	 SHORT $LN13@deflate_sl
  000d2	83 be 88 00 00
	00 01		 cmp	 DWORD PTR [esi+136], 1
  000d9	74 12		 je	 SHORT $LN14@deflate_sl
  000db	83 f8 03	 cmp	 eax, 3
  000de	75 19		 jne	 SHORT $LN13@deflate_sl
  000e0	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000e3	2b 46 70	 sub	 eax, DWORD PTR [esi+112]
  000e6	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000eb	76 0c		 jbe	 SHORT $LN13@deflate_sl
$LN14@deflate_sl:

; 1971 : #if TOO_FAR <= 32767
; 1972 :                 || (s->match_length == MIN_MATCH &&
; 1973 :                     s->strstart - s->match_start > TOO_FAR)
; 1974 : #endif
; 1975 :                 )) {
; 1976 : 
; 1977 :                 /* If prev_match is also MIN_MATCH, match_start is garbage
; 1978 :                  * but we will ignore the current match anyway.
; 1979 :                  */
; 1980 :                 s->match_length = MIN_MATCH-1;

  000ed	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
  000f4	ba 02 00 00 00	 mov	 edx, 2
$LN13@deflate_sl:

; 1981 :             }
; 1982 :         }
; 1983 :         /* If there was a match at the previous step and the current
; 1984 :          * match is not better, output the previous match:
; 1985 :          */
; 1986 :         if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {

  000f9	8b 5e 78	 mov	 ebx, DWORD PTR [esi+120]
  000fc	83 fb 03	 cmp	 ebx, 3
  000ff	0f 82 5d 01 00
	00		 jb	 $LN51@deflate_sl
  00105	3b d3		 cmp	 edx, ebx
  00107	0f 87 55 01 00
	00		 ja	 $LN51@deflate_sl

; 1987 :             uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;

  0010d	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]

; 1988 :             /* Do not insert strings in hash table beyond this. */
; 1989 : 
; 1990 :             check_match(s, s->strstart-1, s->prev_match, s->prev_length);
; 1991 : 
; 1992 :             _tr_tally_dist(s, s->strstart -1 - s->prev_match,

  00110	80 eb 03	 sub	 bl, 3
  00113	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00116	83 c7 fd	 add	 edi, -3			; fffffffdH
  00119	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  0011f	03 f9		 add	 edi, ecx
  00121	66 2b 4e 64	 sub	 cx, WORD PTR [esi+100]
  00125	66 49		 dec	 cx
  00127	89 7d 08	 mov	 DWORD PTR _max_insert$1$[ebp], edi
  0012a	0f b7 d1	 movzx	 edx, cx
  0012d	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00133	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  00137	81 c2 ff ff 00
	00		 add	 edx, 65535		; 0000ffffH
  0013d	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00143	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  00149	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  0014c	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00151	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00157	0f b6 c3	 movzx	 eax, bl
  0015a	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  00161	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  00169	0f b7 c2	 movzx	 eax, dx
  0016c	66 3b d1	 cmp	 dx, cx
  0016f	73 08		 jae	 SHORT $LN30@deflate_sl
  00171	8a 80 00 00 00
	00		 mov	 al, BYTE PTR __dist_code[eax]
  00177	eb 09		 jmp	 SHORT $LN31@deflate_sl
$LN30@deflate_sl:
  00179	c1 e8 07	 shr	 eax, 7
  0017c	8a 80 00 01 00
	00		 mov	 al, BYTE PTR __dist_code[eax+256]
$LN31@deflate_sl:
  00182	0f b6 c0	 movzx	 eax, al
  00185	66 ff 84 86 88
	09 00 00	 inc	 WORD PTR [esi+eax*4+2440]
  0018d	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]

; 1993 :                            s->prev_length - MIN_MATCH, bflush);
; 1994 : 
; 1995 :             /* Insert in hash table all strings up to the end of the match.
; 1996 :              * strstart-1 and strstart are already inserted. If there is not
; 1997 :              * enough lookahead, the last two strings are not inserted in
; 1998 :              * the hash table.
; 1999 :              */
; 2000 :             s->lookahead -= s->prev_length-1;

  00193	8b 4e 78	 mov	 ecx, DWORD PTR [esi+120]
  00196	48		 dec	 eax
  00197	89 45 f8	 mov	 DWORD PTR tv1318[ebp], eax
  0019a	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  001a0	89 45 fc	 mov	 DWORD PTR tv1294[ebp], eax
  001a3	b8 01 00 00 00	 mov	 eax, 1
  001a8	2b c1		 sub	 eax, ecx
  001aa	01 46 74	 add	 DWORD PTR [esi+116], eax

; 2001 :             s->prev_length -= 2;

  001ad	8d 41 fe	 lea	 eax, DWORD PTR [ecx-2]
  001b0	89 46 78	 mov	 DWORD PTR [esi+120], eax
$LL7@deflate_sl:

; 2002 :             do {
; 2003 :                 if (++s->strstart <= max_insert) {

  001b3	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
  001b6	43		 inc	 ebx
  001b7	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  001ba	3b df		 cmp	 ebx, edi
  001bc	77 3f		 ja	 SHORT $LN5@deflate_sl

; 2004 :                     INSERT_STRING(s, s->strstart, hash_head);

  001be	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001c1	8b 7e 48	 mov	 edi, DWORD PTR [esi+72]
  001c4	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  001c7	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  001ca	0f b6 44 18 02	 movzx	 eax, BYTE PTR [eax+ebx+2]
  001cf	d3 e7		 shl	 edi, cl
  001d1	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  001d4	33 f8		 xor	 edi, eax
  001d6	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  001d9	23 d3		 and	 edx, ebx
  001db	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  001de	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  001e1	0f b7 04 78	 movzx	 eax, WORD PTR [eax+edi*2]
  001e5	8b 7d 08	 mov	 edi, DWORD PTR _max_insert$1$[ebp]
  001e8	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  001ec	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  001ef	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  001f2	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  001f6	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  001fa	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
$LN5@deflate_sl:

; 2005 :                 }
; 2006 :             } while (--s->prev_length != 0);

  001fd	83 46 78 ff	 add	 DWORD PTR [esi+120], -1
  00201	75 b0		 jne	 SHORT $LL7@deflate_sl

; 2007 :             s->match_available = 0;
; 2008 :             s->match_length = MIN_MATCH-1;
; 2009 :             s->strstart++;
; 2010 : 
; 2011 :             if (bflush) FLUSH_BLOCK(s, 0);

  00203	8b 45 fc	 mov	 eax, DWORD PTR tv1294[ebp]
  00206	43		 inc	 ebx
  00207	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  0020e	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
  00215	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  00218	3b 45 f8	 cmp	 eax, DWORD PTR tv1318[ebp]
  0021b	0f 85 ef fd ff
	ff		 jne	 $LL60@deflate_sl
  00221	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00224	85 c0		 test	 eax, eax
  00226	78 07		 js	 SHORT $LN32@deflate_sl
  00228	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0022b	03 d0		 add	 edx, eax
  0022d	eb 02		 jmp	 SHORT $LN33@deflate_sl
$LN32@deflate_sl:
  0022f	33 d2		 xor	 edx, edx
$LN33@deflate_sl:
  00231	2b d8		 sub	 ebx, eax
  00233	8b ce		 mov	 ecx, esi
  00235	6a 00		 push	 0
  00237	53		 push	 ebx
  00238	e8 00 00 00 00	 call	 __tr_flush_block
  0023d	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00240	83 c4 08	 add	 esp, 8
  00243	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00245	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00248	e8 00 00 00 00	 call	 _flush_pending
  0024d	8b 06		 mov	 eax, DWORD PTR [esi]
  0024f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00253	0f 85 b7 fd ff
	ff		 jne	 $LL60@deflate_sl
$LN48@deflate_sl:
  00259	5f		 pop	 edi

; 2048 :     return block_done;
; 2049 : }

  0025a	5e		 pop	 esi
  0025b	33 c0		 xor	 eax, eax
  0025d	5b		 pop	 ebx
  0025e	8b e5		 mov	 esp, ebp
  00260	5d		 pop	 ebp
  00261	c3		 ret	 0
$LN51@deflate_sl:

; 2012 : 
; 2013 :         } else if (s->match_available) {

  00262	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00266	0f 84 90 00 00
	00		 je	 $LN20@deflate_sl

; 2014 :             /* If there was no match at the previous position, output a
; 2015 :              * single literal. If there was a match but the current match
; 2016 :              * is longer, truncate the previous match to a single literal.
; 2017 :              */
; 2018 :             Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 2019 :             _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  0026c	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0026f	33 ff		 xor	 edi, edi
  00271	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00274	8a 54 01 ff	 mov	 dl, BYTE PTR [ecx+eax-1]
  00278	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  0027e	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  00284	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  00288	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  0028e	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  00294	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00297	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  0029d	0f b6 c2	 movzx	 eax, dl
  002a0	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  002a8	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  002ae	48		 dec	 eax
  002af	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 2020 :             if (bflush) {

  002b5	75 2f		 jne	 SHORT $LN22@deflate_sl

; 2021 :                 FLUSH_BLOCK_ONLY(s, 0);

  002b7	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  002ba	85 c9		 test	 ecx, ecx
  002bc	78 07		 js	 SHORT $LN34@deflate_sl
  002be	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  002c1	03 d1		 add	 edx, ecx
  002c3	eb 02		 jmp	 SHORT $LN35@deflate_sl
$LN34@deflate_sl:
  002c5	33 d2		 xor	 edx, edx
$LN35@deflate_sl:
  002c7	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002ca	2b c1		 sub	 eax, ecx
  002cc	8b ce		 mov	 ecx, esi
  002ce	6a 00		 push	 0
  002d0	50		 push	 eax
  002d1	e8 00 00 00 00	 call	 __tr_flush_block
  002d6	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002d9	83 c4 08	 add	 esp, 8
  002dc	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002de	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  002e1	e8 00 00 00 00	 call	 _flush_pending
$LN22@deflate_sl:

; 2022 :             }
; 2023 :             s->strstart++;
; 2024 :             s->lookahead--;
; 2025 :             if (s->strm->avail_out == 0) return need_more;

  002e6	8b 06		 mov	 eax, DWORD PTR [esi]
  002e8	ff 46 6c	 inc	 DWORD PTR [esi+108]
  002eb	ff 4e 74	 dec	 DWORD PTR [esi+116]
  002ee	39 78 10	 cmp	 DWORD PTR [eax+16], edi
  002f1	0f 84 62 ff ff
	ff		 je	 $LN48@deflate_sl

; 2026 :         } else {

  002f7	e9 14 fd ff ff	 jmp	 $LL60@deflate_sl
$LN20@deflate_sl:

; 2027 :             /* There is no previous match to compare with, wait for
; 2028 :              * the next step to decide.
; 2029 :              */
; 2030 :             s->match_available = 1;
; 2031 :             s->strstart++;

  002fc	ff 46 6c	 inc	 DWORD PTR [esi+108]

; 2032 :             s->lookahead--;

  002ff	ff 4e 74	 dec	 DWORD PTR [esi+116]
  00302	c7 46 68 01 00
	00 00		 mov	 DWORD PTR [esi+104], 1

; 2033 :         }
; 2034 :     }

  00309	e9 02 fd ff ff	 jmp	 $LL60@deflate_sl
$LN46@deflate_sl:

; 2035 :     Assert (flush != Z_NO_FLUSH, "no flush?");
; 2036 :     if (s->match_available) {

  0030e	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00312	74 3f		 je	 SHORT $LN55@deflate_sl

; 2037 :         Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 2038 :         _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  00314	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00317	33 ff		 xor	 edi, edi
  00319	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0031c	8a 54 01 ff	 mov	 dl, BYTE PTR [ecx+eax-1]
  00320	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00326	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  0032c	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  00330	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00336	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  0033c	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0033f	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00345	0f b6 c2	 movzx	 eax, dl
  00348	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]

; 2039 :         s->match_available = 0;

  00350	89 7e 68	 mov	 DWORD PTR [esi+104], edi
$LN55@deflate_sl:

; 2040 :     }
; 2041 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  00353	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00356	b8 02 00 00 00	 mov	 eax, 2
  0035b	3b c8		 cmp	 ecx, eax
  0035d	0f 42 c1	 cmovb	 eax, ecx
  00360	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax

; 2042 :     if (flush == Z_FINISH) {

  00366	83 fb 04	 cmp	 ebx, 4
  00369	75 40		 jne	 SHORT $LN25@deflate_sl

; 2043 :         FLUSH_BLOCK(s, 1);

  0036b	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0036e	85 c0		 test	 eax, eax
  00370	78 07		 js	 SHORT $LN38@deflate_sl
  00372	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00375	03 d0		 add	 edx, eax
  00377	eb 02		 jmp	 SHORT $LN39@deflate_sl
$LN38@deflate_sl:
  00379	33 d2		 xor	 edx, edx
$LN39@deflate_sl:
  0037b	2b c8		 sub	 ecx, eax
  0037d	6a 01		 push	 1
  0037f	51		 push	 ecx
  00380	8b ce		 mov	 ecx, esi
  00382	e8 00 00 00 00	 call	 __tr_flush_block
  00387	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0038a	83 c4 08	 add	 esp, 8
  0038d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0038f	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00392	e8 00 00 00 00	 call	 _flush_pending
  00397	8b 06		 mov	 eax, DWORD PTR [esi]
  00399	33 c9		 xor	 ecx, ecx
  0039b	5f		 pop	 edi

; 2048 :     return block_done;
; 2049 : }

  0039c	5e		 pop	 esi
  0039d	5b		 pop	 ebx
  0039e	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
  003a1	0f 95 c1	 setne	 cl
  003a4	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  003a7	8b e5		 mov	 esp, ebp
  003a9	5d		 pop	 ebp
  003aa	c3		 ret	 0
$LN25@deflate_sl:

; 2044 :         return finish_done;
; 2045 :     }
; 2046 :     if (s->last_lit)

  003ab	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  003b2	74 38		 je	 SHORT $LN28@deflate_sl

; 2047 :         FLUSH_BLOCK(s, 0);

  003b4	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  003b7	85 c0		 test	 eax, eax
  003b9	78 07		 js	 SHORT $LN40@deflate_sl
  003bb	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  003be	03 d0		 add	 edx, eax
  003c0	eb 02		 jmp	 SHORT $LN41@deflate_sl
$LN40@deflate_sl:
  003c2	33 d2		 xor	 edx, edx
$LN41@deflate_sl:
  003c4	2b c8		 sub	 ecx, eax
  003c6	6a 00		 push	 0
  003c8	51		 push	 ecx
  003c9	8b ce		 mov	 ecx, esi
  003cb	e8 00 00 00 00	 call	 __tr_flush_block
  003d0	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  003d3	83 c4 08	 add	 esp, 8
  003d6	89 4e 5c	 mov	 DWORD PTR [esi+92], ecx
  003d9	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003db	e8 00 00 00 00	 call	 _flush_pending
  003e0	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003e2	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  003e6	0f 84 6d fe ff
	ff		 je	 $LN48@deflate_sl
$LN28@deflate_sl:
  003ec	5f		 pop	 edi

; 2048 :     return block_done;
; 2049 : }

  003ed	5e		 pop	 esi
  003ee	b8 01 00 00 00	 mov	 eax, 1
  003f3	5b		 pop	 ebx
  003f4	8b e5		 mov	 esp, ebp
  003f6	5d		 pop	 ebp
  003f7	c3		 ret	 0
_deflate_slow ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflate_rle
_TEXT	SEGMENT
_s$1$ = -12						; size = 4
_flush$1$ = -8						; size = 4
tv948 = -4						; size = 4
$T1 = -4						; size = 4
_deflate_rle PROC					; COMDAT
; _s$ = ecx
; _flush$ = edx

; 2060 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	89 55 f8	 mov	 DWORD PTR _flush$1$[ebp], edx
  0000d	57		 push	 edi
  0000e	89 75 f4	 mov	 DWORD PTR _s$1$[ebp], esi
  00011	8d 46 6c	 lea	 eax, DWORD PTR [esi+108]
  00014	8d be a0 16 00
	00		 lea	 edi, DWORD PTR [esi+5792]
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL2@deflate_rl:

; 2061 :     int bflush;             /* set if current block must be flushed */
; 2062 :     uInt prev;              /* byte at distance one to match */
; 2063 :     Bytef *scan, *strend;   /* scan goes up to strend for length of run */
; 2064 : 
; 2065 :     for (;;) {
; 2066 :         /* Make sure that we always have enough lookahead, except
; 2067 :          * at the end of the input file. We need MAX_MATCH bytes
; 2068 :          * for the longest run, plus one for the unrolled loop.
; 2069 :          */
; 2070 :         if (s->lookahead <= MAX_MATCH) {

  00020	8b 5e 74	 mov	 ebx, DWORD PTR [esi+116]
  00023	81 fb 02 01 00
	00		 cmp	 ebx, 258		; 00000102H
  00029	77 2e		 ja	 SHORT $LN10@deflate_rl

; 2071 :             fill_window(s);

  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 _fill_window

; 2072 :             if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {

  00032	8b 5e 74	 mov	 ebx, DWORD PTR [esi+116]
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _flush$1$[ebp]
  00038	81 fb 02 01 00
	00		 cmp	 ebx, 258		; 00000102H
  0003e	77 0e		 ja	 SHORT $LN9@deflate_rl
  00040	8d be a0 16 00
	00		 lea	 edi, DWORD PTR [esi+5792]
  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 28 02 00
	00		 je	 $LN37@deflate_rl
$LN9@deflate_rl:

; 2073 :                 return need_more;
; 2074 :             }
; 2075 :             if (s->lookahead == 0) break; /* flush the current block */

  0004e	8d 46 6c	 lea	 eax, DWORD PTR [esi+108]
  00051	85 db		 test	 ebx, ebx
  00053	0f 84 83 01 00
	00		 je	 $LN36@deflate_rl
$LN10@deflate_rl:

; 2076 :         }
; 2077 : 
; 2078 :         /* See how many times the previous byte repeats */
; 2079 :         s->match_length = 0;

  00059	33 d2		 xor	 edx, edx
  0005b	89 45 fc	 mov	 DWORD PTR tv948[ebp], eax
  0005e	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0

; 2080 :         if (s->lookahead >= MIN_MATCH && s->strstart > 0) {

  00065	83 fb 03	 cmp	 ebx, 3
  00068	72 70		 jb	 SHORT $LN14@deflate_rl
  0006a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006c	85 c9		 test	 ecx, ecx
  0006e	74 6a		 je	 SHORT $LN14@deflate_rl

; 2081 :             scan = s->window + s->strstart - 1;

  00070	8b 7e 38	 mov	 edi, DWORD PTR [esi+56]
  00073	03 f9		 add	 edi, ecx

; 2082 :             prev = *scan;
; 2083 :             if (prev == *++scan && prev == *++scan && prev == *++scan) {

  00075	8b c7		 mov	 eax, edi
  00077	8a 4f ff	 mov	 cl, BYTE PTR [edi-1]
  0007a	3a 08		 cmp	 cl, BYTE PTR [eax]
  0007c	75 5c		 jne	 SHORT $LN14@deflate_rl
  0007e	3a 48 01	 cmp	 cl, BYTE PTR [eax+1]
  00081	75 57		 jne	 SHORT $LN14@deflate_rl
  00083	83 c0 02	 add	 eax, 2
  00086	3a 08		 cmp	 cl, BYTE PTR [eax]
  00088	75 50		 jne	 SHORT $LN14@deflate_rl

; 2084 :                 strend = s->window + s->strstart + MAX_MATCH;

  0008a	8d 97 02 01 00
	00		 lea	 edx, DWORD PTR [edi+258]
$LL7@deflate_rl:

; 2085 :                 do {
; 2086 :                 } while (prev == *++scan && prev == *++scan &&
; 2087 :                          prev == *++scan && prev == *++scan &&
; 2088 :                          prev == *++scan && prev == *++scan &&
; 2089 :                          prev == *++scan && prev == *++scan &&

  00090	40		 inc	 eax
  00091	3a 08		 cmp	 cl, BYTE PTR [eax]
  00093	75 27		 jne	 SHORT $LN13@deflate_rl
  00095	40		 inc	 eax
  00096	3a 08		 cmp	 cl, BYTE PTR [eax]
  00098	75 22		 jne	 SHORT $LN13@deflate_rl
  0009a	40		 inc	 eax
  0009b	3a 08		 cmp	 cl, BYTE PTR [eax]
  0009d	75 1d		 jne	 SHORT $LN13@deflate_rl
  0009f	40		 inc	 eax
  000a0	3a 08		 cmp	 cl, BYTE PTR [eax]
  000a2	75 18		 jne	 SHORT $LN13@deflate_rl
  000a4	40		 inc	 eax
  000a5	3a 08		 cmp	 cl, BYTE PTR [eax]
  000a7	75 13		 jne	 SHORT $LN13@deflate_rl
  000a9	40		 inc	 eax
  000aa	3a 08		 cmp	 cl, BYTE PTR [eax]
  000ac	75 0e		 jne	 SHORT $LN13@deflate_rl
  000ae	40		 inc	 eax
  000af	3a 08		 cmp	 cl, BYTE PTR [eax]
  000b1	75 09		 jne	 SHORT $LN13@deflate_rl
  000b3	40		 inc	 eax
  000b4	3a 08		 cmp	 cl, BYTE PTR [eax]
  000b6	75 04		 jne	 SHORT $LN13@deflate_rl
  000b8	3b c2		 cmp	 eax, edx
  000ba	72 d4		 jb	 SHORT $LL7@deflate_rl
$LN13@deflate_rl:

; 2090 :                          scan < strend);
; 2091 :                 s->match_length = MAX_MATCH - (uInt)(strend - scan);

  000bc	2b c2		 sub	 eax, edx
  000be	8d 90 02 01 00
	00		 lea	 edx, DWORD PTR [eax+258]
  000c4	89 56 60	 mov	 DWORD PTR [esi+96], edx

; 2092 :                 if (s->match_length > s->lookahead)

  000c7	3b d3		 cmp	 edx, ebx
  000c9	76 0f		 jbe	 SHORT $LN14@deflate_rl

; 2093 :                     s->match_length = s->lookahead;

  000cb	8d be a0 16 00
	00		 lea	 edi, DWORD PTR [esi+5792]
  000d1	89 5e 60	 mov	 DWORD PTR [esi+96], ebx
  000d4	8b c7		 mov	 eax, edi
  000d6	8b d7		 mov	 edx, edi

; 2113 :         }
; 2114 :         if (bflush) FLUSH_BLOCK(s, 0);

  000d8	eb 11		 jmp	 SHORT $LN44@deflate_rl
$LN14@deflate_rl:

; 2094 :             }
; 2095 :             Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
; 2096 :         }
; 2097 : 
; 2098 :         /* Emit match if have run of MIN_MATCH or longer, else emit literal */
; 2099 :         if (s->match_length >= MIN_MATCH) {

  000da	8b da		 mov	 ebx, edx
  000dc	8d be a0 16 00
	00		 lea	 edi, DWORD PTR [esi+5792]
  000e2	8b c7		 mov	 eax, edi
  000e4	8b d7		 mov	 edx, edi
  000e6	83 fb 03	 cmp	 ebx, 3
  000e9	72 5f		 jb	 SHORT $LN15@deflate_rl
$LN44@deflate_rl:

; 2100 :             check_match(s, s->strstart, s->strstart - 1, s->match_length);
; 2101 : 
; 2102 :             _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);

  000eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ed	80 eb 03	 sub	 bl, 3
  000f0	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  000f6	be 01 00 00 00	 mov	 esi, 1
  000fb	66 89 34 48	 mov	 WORD PTR [eax+ecx*2], si
  000ff	8b 75 f4	 mov	 esi, DWORD PTR _s$1$[ebp]
  00102	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00104	33 d2		 xor	 edx, edx
  00106	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  0010c	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  0010f	ff 07		 inc	 DWORD PTR [edi]
  00111	0f b6 c3	 movzx	 eax, bl

; 2103 : 
; 2104 :             s->lookahead -= s->match_length;
; 2105 :             s->strstart += s->match_length;

  00114	8b 5d fc	 mov	 ebx, DWORD PTR tv948[ebp]
  00117	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  0011e	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  00126	66 ff 86 88 09
	00 00		 inc	 WORD PTR [esi+2440]
  0012d	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00133	48		 dec	 eax
  00134	39 07		 cmp	 DWORD PTR [edi], eax
  00136	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  00139	0f 94 c2	 sete	 dl

; 2106 :             s->match_length = 0;

  0013c	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  00143	29 46 74	 sub	 DWORD PTR [esi+116], eax
  00146	01 03		 add	 DWORD PTR [ebx], eax

; 2107 :         } else {

  00148	eb 47		 jmp	 SHORT $LN50@deflate_rl
$LN15@deflate_rl:

; 2108 :             /* No match, output a literal byte */
; 2109 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 2110 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  0014a	8b 5d fc	 mov	 ebx, DWORD PTR tv948[ebp]
  0014d	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00150	8b 03		 mov	 eax, DWORD PTR [ebx]
  00152	33 db		 xor	 ebx, ebx
  00154	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  00157	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00159	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  0015f	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx
  00163	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00165	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]

; 2111 :             s->lookahead--;
; 2112 :             s->strstart++;

  0016b	8b 5d fc	 mov	 ebx, DWORD PTR tv948[ebp]
  0016e	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00171	ff 07		 inc	 DWORD PTR [edi]
  00173	0f b6 c2	 movzx	 eax, dl
  00176	33 d2		 xor	 edx, edx
  00178	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  00180	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00186	48		 dec	 eax
  00187	39 07		 cmp	 DWORD PTR [edi], eax
  00189	0f 94 c2	 sete	 dl
  0018c	ff 4e 74	 dec	 DWORD PTR [esi+116]
  0018f	ff 03		 inc	 DWORD PTR [ebx]
$LN50@deflate_rl:

; 2113 :         }
; 2114 :         if (bflush) FLUSH_BLOCK(s, 0);

  00191	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00193	89 5d fc	 mov	 DWORD PTR $T1[ebp], ebx
  00196	85 d2		 test	 edx, edx
  00198	74 3a		 je	 SHORT $LN43@deflate_rl
  0019a	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0019d	85 c0		 test	 eax, eax
  0019f	78 07		 js	 SHORT $LN26@deflate_rl
  001a1	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  001a4	03 d0		 add	 edx, eax
  001a6	eb 02		 jmp	 SHORT $LN27@deflate_rl
$LN26@deflate_rl:
  001a8	33 d2		 xor	 edx, edx
$LN27@deflate_rl:
  001aa	2b c8		 sub	 ecx, eax
  001ac	6a 00		 push	 0
  001ae	51		 push	 ecx
  001af	8b ce		 mov	 ecx, esi
  001b1	e8 00 00 00 00	 call	 __tr_flush_block
  001b6	8b 03		 mov	 eax, DWORD PTR [ebx]
  001b8	83 c4 08	 add	 esp, 8
  001bb	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001bd	89 5d fc	 mov	 DWORD PTR $T1[ebp], ebx
  001c0	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  001c3	e8 00 00 00 00	 call	 _flush_pending
  001c8	8b 06		 mov	 eax, DWORD PTR [esi]
  001ca	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  001ce	0f 84 a2 00 00
	00		 je	 $LN37@deflate_rl
$LN43@deflate_rl:

; 2115 :     }

  001d4	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  001d7	e9 44 fe ff ff	 jmp	 $LL2@deflate_rl
$LN36@deflate_rl:

; 2116 :     s->insert = 0;

  001dc	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 2117 :     if (flush == Z_FINISH) {

  001e6	83 f9 04	 cmp	 ecx, 4
  001e9	75 43		 jne	 SHORT $LN19@deflate_rl

; 2118 :         FLUSH_BLOCK(s, 1);

  001eb	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  001ee	85 c9		 test	 ecx, ecx
  001f0	78 07		 js	 SHORT $LN28@deflate_rl
  001f2	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  001f5	03 d1		 add	 edx, ecx
  001f7	eb 02		 jmp	 SHORT $LN29@deflate_rl
$LN28@deflate_rl:
  001f9	33 d2		 xor	 edx, edx
$LN29@deflate_rl:
  001fb	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  001fe	2b c1		 sub	 eax, ecx
  00200	8b ce		 mov	 ecx, esi
  00202	6a 01		 push	 1
  00204	50		 push	 eax
  00205	e8 00 00 00 00	 call	 __tr_flush_block
  0020a	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0020d	83 c4 08	 add	 esp, 8
  00210	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00212	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00215	e8 00 00 00 00	 call	 _flush_pending
  0021a	8b 06		 mov	 eax, DWORD PTR [esi]
  0021c	33 c9		 xor	 ecx, ecx
  0021e	5f		 pop	 edi

; 2123 :     return block_done;
; 2124 : }

  0021f	5e		 pop	 esi
  00220	5b		 pop	 ebx
  00221	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
  00224	0f 95 c1	 setne	 cl
  00227	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  0022a	8b e5		 mov	 esp, ebp
  0022c	5d		 pop	 ebp
  0022d	c3		 ret	 0
$LN19@deflate_rl:

; 2119 :         return finish_done;
; 2120 :     }
; 2121 :     if (s->last_lit)

  0022e	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00231	74 37		 je	 SHORT $LN22@deflate_rl

; 2122 :         FLUSH_BLOCK(s, 0);

  00233	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00236	85 c9		 test	 ecx, ecx
  00238	78 07		 js	 SHORT $LN30@deflate_rl
  0023a	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0023d	03 d1		 add	 edx, ecx
  0023f	eb 02		 jmp	 SHORT $LN31@deflate_rl
$LN30@deflate_rl:
  00241	33 d2		 xor	 edx, edx
$LN31@deflate_rl:
  00243	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00246	2b c1		 sub	 eax, ecx
  00248	8b ce		 mov	 ecx, esi
  0024a	6a 00		 push	 0
  0024c	50		 push	 eax
  0024d	e8 00 00 00 00	 call	 __tr_flush_block
  00252	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00255	83 c4 08	 add	 esp, 8
  00258	89 4e 5c	 mov	 DWORD PTR [esi+92], ecx
  0025b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0025d	e8 00 00 00 00	 call	 _flush_pending
  00262	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00264	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00268	74 0c		 je	 SHORT $LN37@deflate_rl
$LN22@deflate_rl:
  0026a	5f		 pop	 edi

; 2123 :     return block_done;
; 2124 : }

  0026b	5e		 pop	 esi
  0026c	b8 01 00 00 00	 mov	 eax, 1
  00271	5b		 pop	 ebx
  00272	8b e5		 mov	 esp, ebp
  00274	5d		 pop	 ebp
  00275	c3		 ret	 0
$LN37@deflate_rl:
  00276	5f		 pop	 edi
  00277	5e		 pop	 esi
  00278	33 c0		 xor	 eax, eax
  0027a	5b		 pop	 ebx
  0027b	8b e5		 mov	 esp, ebp
  0027d	5d		 pop	 ebp
  0027e	c3		 ret	 0
_deflate_rle ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflate_huff
_TEXT	SEGMENT
_deflate_huff PROC					; COMDAT
; _s$ = ecx
; _flush$ = edx

; 2133 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b fa		 mov	 edi, edx
  00005	8b f1		 mov	 esi, ecx
$LL2@deflate_hu:

; 2134 :     int bflush;             /* set if current block must be flushed */
; 2135 : 
; 2136 :     for (;;) {
; 2137 :         /* Make sure that we have a literal to write. */
; 2138 :         if (s->lookahead == 0) {

  00007	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  0000b	75 11		 jne	 SHORT $LN6@deflate_hu

; 2139 :             fill_window(s);

  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 _fill_window

; 2140 :             if (s->lookahead == 0) {

  00014	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00018	0f 84 98 00 00
	00		 je	 $LN23@deflate_hu
$LN6@deflate_hu:

; 2142 :                     return need_more;
; 2143 :                 break;      /* flush the current block */
; 2144 :             }
; 2145 :         }
; 2146 : 
; 2147 :         /* Output a literal byte */
; 2148 :         s->match_length = 0;
; 2149 :         Tracevv((stderr,"%c", s->window[s->strstart]));
; 2150 :         _tr_tally_lit (s, s->window[s->strstart], bflush);

  0001e	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00021	33 db		 xor	 ebx, ebx
  00023	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00026	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  0002d	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  00030	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00036	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  0003c	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx
  00040	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00046	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  0004c	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0004f	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00055	0f b6 c2	 movzx	 eax, dl
  00058	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]

; 2151 :         s->lookahead--;
; 2152 :         s->strstart++;

  00060	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00063	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00069	41		 inc	 ecx
  0006a	ff 4e 74	 dec	 DWORD PTR [esi+116]
  0006d	48		 dec	 eax
  0006e	89 4e 6c	 mov	 DWORD PTR [esi+108], ecx
  00071	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 2153 :         if (bflush) FLUSH_BLOCK(s, 0);

  00077	75 8e		 jne	 SHORT $LL2@deflate_hu
  00079	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0007c	85 c0		 test	 eax, eax
  0007e	78 07		 js	 SHORT $LN15@deflate_hu
  00080	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00083	03 d0		 add	 edx, eax
  00085	eb 02		 jmp	 SHORT $LN16@deflate_hu
$LN15@deflate_hu:
  00087	33 d2		 xor	 edx, edx
$LN16@deflate_hu:
  00089	2b c8		 sub	 ecx, eax
  0008b	6a 00		 push	 0
  0008d	51		 push	 ecx
  0008e	8b ce		 mov	 ecx, esi
  00090	e8 00 00 00 00	 call	 __tr_flush_block
  00095	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00098	83 c4 08	 add	 esp, 8
  0009b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0009d	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  000a0	e8 00 00 00 00	 call	 _flush_pending
  000a5	8b 06		 mov	 eax, DWORD PTR [esi]
  000a7	39 58 10	 cmp	 DWORD PTR [eax+16], ebx
  000aa	0f 85 57 ff ff
	ff		 jne	 $LL2@deflate_hu
$LN24@deflate_hu:
  000b0	5f		 pop	 edi

; 2162 :     return block_done;
; 2163 : }

  000b1	5e		 pop	 esi
  000b2	33 c0		 xor	 eax, eax
  000b4	5b		 pop	 ebx
  000b5	c3		 ret	 0
$LN23@deflate_hu:

; 2141 :                 if (flush == Z_NO_FLUSH)

  000b6	85 ff		 test	 edi, edi
  000b8	74 f6		 je	 SHORT $LN24@deflate_hu

; 2154 :     }
; 2155 :     s->insert = 0;

  000ba	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 2156 :     if (flush == Z_FINISH) {

  000c4	83 ff 04	 cmp	 edi, 4
  000c7	75 40		 jne	 SHORT $LN10@deflate_hu

; 2157 :         FLUSH_BLOCK(s, 1);

  000c9	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  000cc	85 c9		 test	 ecx, ecx
  000ce	78 07		 js	 SHORT $LN17@deflate_hu
  000d0	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  000d3	03 d1		 add	 edx, ecx
  000d5	eb 02		 jmp	 SHORT $LN18@deflate_hu
$LN17@deflate_hu:
  000d7	33 d2		 xor	 edx, edx
$LN18@deflate_hu:
  000d9	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000dc	2b c1		 sub	 eax, ecx
  000de	8b ce		 mov	 ecx, esi
  000e0	6a 01		 push	 1
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 __tr_flush_block
  000e8	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000eb	83 c4 08	 add	 esp, 8
  000ee	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000f0	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  000f3	e8 00 00 00 00	 call	 _flush_pending
  000f8	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000fa	33 c0		 xor	 eax, eax
  000fc	5f		 pop	 edi

; 2162 :     return block_done;
; 2163 : }

  000fd	5e		 pop	 esi
  000fe	5b		 pop	 ebx
  000ff	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00102	0f 95 c0	 setne	 al
  00105	83 c0 02	 add	 eax, 2
  00108	c3		 ret	 0
$LN10@deflate_hu:

; 2158 :         return finish_done;
; 2159 :     }
; 2160 :     if (s->last_lit)

  00109	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  00110	74 3b		 je	 SHORT $LN13@deflate_hu

; 2161 :         FLUSH_BLOCK(s, 0);

  00112	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00115	85 c9		 test	 ecx, ecx
  00117	78 07		 js	 SHORT $LN19@deflate_hu
  00119	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0011c	03 d1		 add	 edx, ecx
  0011e	eb 02		 jmp	 SHORT $LN20@deflate_hu
$LN19@deflate_hu:
  00120	33 d2		 xor	 edx, edx
$LN20@deflate_hu:
  00122	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00125	2b c1		 sub	 eax, ecx
  00127	8b ce		 mov	 ecx, esi
  00129	6a 00		 push	 0
  0012b	50		 push	 eax
  0012c	e8 00 00 00 00	 call	 __tr_flush_block
  00131	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00134	83 c4 08	 add	 esp, 8
  00137	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00139	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0013c	e8 00 00 00 00	 call	 _flush_pending
  00141	8b 06		 mov	 eax, DWORD PTR [esi]
  00143	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00147	0f 84 63 ff ff
	ff		 je	 $LN24@deflate_hu
$LN13@deflate_hu:
  0014d	5f		 pop	 edi

; 2162 :     return block_done;
; 2163 : }

  0014e	5e		 pop	 esi
  0014f	b8 01 00 00 00	 mov	 eax, 1
  00154	5b		 pop	 ebx
  00155	c3		 ret	 0
_deflate_huff ENDP
_TEXT	ENDS
END
