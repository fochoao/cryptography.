; Listing generated by Microsoft (R) Optimizing Compiler Version 19.31.31107.0 

	TITLE	c:\cpython\externals\zlib-1.2.11\contrib\vstudio\vc14\x86\zlibdllreleasewithoutasm\tmp\gzlib.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO@		; `string'
PUBLIC	??_C@_0O@BNNCBLEN@out?5of?5memory@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_02LMMGGCAJ@?3?5@				; `string'
PUBLIC	??_C@_06DIJPEION@?$CFs?$CFs?$CFs@		; `string'
EXTRN	__imp__malloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__wcstombs:PROC
EXTRN	__imp___open:PROC
EXTRN	__imp___wopen:PROC
EXTRN	__imp___lseeki64:PROC
;	COMDAT ??_C@_06DIJPEION@?$CFs?$CFs?$CFs@
CONST	SEGMENT
??_C@_06DIJPEION@?$CFs?$CFs?$CFs@ DB '%s%s%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BNNCBLEN@out?5of?5memory@
CONST	SEGMENT
??_C@_0O@BNNCBLEN@out?5of?5memory@ DB 'out of memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO@
CONST	SEGMENT
??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO@ DB '<fd:%d>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
PUBLIC	_gz_error
PUBLIC	_gzclearerr@4
PUBLIC	_gzerror@8
PUBLIC	_gzeof@4
PUBLIC	_gzoffset@4
PUBLIC	_gzoffset64@4
PUBLIC	_gztell@4
PUBLIC	_gztell64@4
PUBLIC	_gzseek@12
PUBLIC	_gzseek64@16
PUBLIC	_gzrewind@4
PUBLIC	_gzbuffer@8
PUBLIC	_gzopen_w@8
PUBLIC	_gzdopen@8
PUBLIC	_gzopen@8
PUBLIC	_snprintf
PUBLIC	_vsnprintf
PUBLIC	___local_stdio_printf_options
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _vsnprintf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
__ArgList$ = 12						; size = 4
_vsnprintf PROC						; COMDAT
; __Buffer$ = ecx
; __BufferCount$ = edx

; 1438 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 1439 :         int const _Result = __stdio_common_vsprintf(

  00006	ff 75 0c	 push	 DWORD PTR __ArgList$[ebp]
  00009	6a 00		 push	 0
  0000b	ff 75 08	 push	 DWORD PTR __Format$[ebp]
  0000e	52		 push	 edx
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	ff 70 04	 push	 DWORD PTR [eax+4]
  0001a	83 c9 02	 or	 ecx, 2
  0001d	51		 push	 ecx
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf

; 1440 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1441 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1442 : 
; 1443 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1444 :     }

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
_vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_snprintf PROC						; COMDAT

; 1927 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 1439 :         int const _Result = __stdio_common_vsprintf(

  00006	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00015	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	ff 70 04	 push	 DWORD PTR [eax+4]
  0001f	83 c9 02	 or	 ecx, 2
  00022	51		 push	 ecx
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf

; 1440 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1441 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1442 : 
; 1443 :         return _Result < 0 ? -1 : _Result;

  00029	83 c9 ff	 or	 ecx, -1
  0002c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002f	85 c0		 test	 eax, eax
  00031	0f 48 c1	 cmovs	 eax, ecx

; 1928 :         int _Result;
; 1929 :         va_list _ArgList;
; 1930 :         __crt_va_start(_ArgList, _Format);
; 1931 :         _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1932 :         __crt_va_end(_ArgList);
; 1933 :         return _Result;
; 1934 :     }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\gzlib.c
;	COMDAT _gz_reset
_TEXT	SEGMENT
_gz_reset PROC						; COMDAT
; _state$ = ecx

; 77   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 78   :     state->x.have = 0;              /* no output data available */
; 79   :     if (state->mode == GZ_READ) {   /* for reading ... */

  00003	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00010	75 15		 jne	 SHORT $LN2@gz_reset

; 80   :         state->eof = 0;             /* not at end of file */

  00012	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0

; 81   :         state->past = 0;            /* have not read past end yet */

  00019	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 82   :         state->how = LOOK;          /* look for gzip header */

  00020	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN2@gz_reset:

; 83   :     }
; 84   :     state->seek = 0;                /* no seek request pending */
; 85   :     gz_error(state, Z_OK, NULL);    /* clear error */

  00027	6a 00		 push	 0
  00029	33 d2		 xor	 edx, edx
  0002b	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00032	e8 00 00 00 00	 call	 _gz_error
  00037	83 c4 04	 add	 esp, 4

; 86   :     state->x.pos = 0;               /* no uncompressed data yet */

  0003a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00041	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 87   :     state->strm.avail_in = 0;       /* no input data yet */

  00048	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  0004f	5e		 pop	 esi

; 88   : }

  00050	c3		 ret	 0
_gz_reset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\gzlib.c
;	COMDAT _gz_open
_TEXT	SEGMENT
_path$1$ = -8						; size = 4
_exclusive$1$ = -4					; size = 4
_mode$ = 8						; size = 4
_gz_open PROC						; COMDAT
; _path$ = ecx
; _fd$ = edx

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx

; 96   :     gz_statep state;
; 97   :     z_size_t len;
; 98   :     int oflag;
; 99   : #ifdef O_CLOEXEC
; 100  :     int cloexec = 0;
; 101  : #endif
; 102  : #ifdef O_EXCL
; 103  :     int exclusive = 0;

  0000d	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR _exclusive$1$[esp+20], 0
  00015	89 74 24 0c	 mov	 DWORD PTR _path$1$[esp+20], esi
  00019	8b da		 mov	 ebx, edx
  0001b	57		 push	 edi

; 104  : #endif
; 105  : 
; 106  :     /* check input */
; 107  :     if (path == NULL)

  0001c	85 f6		 test	 esi, esi
  0001e	0f 84 7e 02 00
	00		 je	 $LN51@gz_open

; 108  :         return NULL;
; 109  : 
; 110  :     /* allocate gzFile structure to return */
; 111  :     state = (gz_statep)malloc(sizeof(gz_state));

  00024	68 a0 00 00 00	 push	 160			; 000000a0H
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0002f	8b f8		 mov	 edi, eax
  00031	83 c4 04	 add	 esp, 4

; 112  :     if (state == NULL)

  00034	85 ff		 test	 edi, edi
  00036	0f 84 66 02 00
	00		 je	 $LN51@gz_open

; 113  :         return NULL;
; 114  :     state->size = 0;            /* no buffers allocated yet */
; 115  :     state->want = GZBUFSIZE;    /* requested buffer size */
; 116  :     state->msg = NULL;          /* no error message yet */
; 117  : 
; 118  :     /* interpret mode */
; 119  :     state->mode = GZ_NONE;
; 120  :     state->level = Z_DEFAULT_COMPRESSION;
; 121  :     state->strategy = Z_DEFAULT_STRATEGY;
; 122  :     state->direct = 0;
; 123  :     while (*mode) {

  0003c	8b 55 08	 mov	 edx, DWORD PTR _mode$[ebp]
  0003f	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0
  00046	c7 47 20 00 20
	00 00		 mov	 DWORD PTR [edi+32], 8192 ; 00002000H
  0004d	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0
  00054	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0005b	c7 47 48 ff ff
	ff ff		 mov	 DWORD PTR [edi+72], -1
  00062	c7 47 4c 00 00
	00 00		 mov	 DWORD PTR [edi+76], 0
  00069	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0
  00070	8a 02		 mov	 al, BYTE PTR [edx]
  00072	84 c0		 test	 al, al
  00074	0f 84 85 00 00
	00		 je	 $LN3@gz_open
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL2@gz_open:

; 124  :         if (*mode >= '0' && *mode <= '9')

  00080	0f be c8	 movsx	 ecx, al
  00083	2c 30		 sub	 al, 48			; 00000030H
  00085	3c 09		 cmp	 al, 9
  00087	77 08		 ja	 SHORT $LN8@gz_open

; 125  :             state->level = *mode - '0';

  00089	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  0008c	89 47 48	 mov	 DWORD PTR [edi+72], eax
  0008f	eb 66		 jmp	 SHORT $LN21@gz_open
$LN8@gz_open:

; 126  :         else
; 127  :             switch (*mode) {

  00091	8d 41 d5	 lea	 eax, DWORD PTR [ecx-43]
  00094	83 f8 4d	 cmp	 eax, 77			; 0000004dH
  00097	77 5e		 ja	 SHORT $LN21@gz_open
  00099	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN53@gz_open[eax]
  000a0	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN54@gz_open[eax*4]
$LN10@gz_open:

; 128  :             case 'r':
; 129  :                 state->mode = GZ_READ;

  000a7	c7 47 10 4f 1c
	00 00		 mov	 DWORD PTR [edi+16], 7247 ; 00001c4fH

; 130  :                 break;

  000ae	eb 47		 jmp	 SHORT $LN21@gz_open
$LN11@gz_open:

; 131  : #ifndef NO_GZCOMPRESS
; 132  :             case 'w':
; 133  :                 state->mode = GZ_WRITE;

  000b0	c7 47 10 b1 79
	00 00		 mov	 DWORD PTR [edi+16], 31153 ; 000079b1H

; 134  :                 break;

  000b7	eb 3e		 jmp	 SHORT $LN21@gz_open
$LN12@gz_open:

; 135  :             case 'a':
; 136  :                 state->mode = GZ_APPEND;

  000b9	c7 47 10 01 00
	00 00		 mov	 DWORD PTR [edi+16], 1

; 137  :                 break;

  000c0	eb 35		 jmp	 SHORT $LN21@gz_open
$LN15@gz_open:

; 138  : #endif
; 139  :             case '+':       /* can't read and write at the same time */
; 140  :                 free(state);
; 141  :                 return NULL;
; 142  :             case 'b':       /* ignore -- will request binary anyway */
; 143  :                 break;
; 144  : #ifdef O_CLOEXEC
; 145  :             case 'e':
; 146  :                 cloexec = 1;
; 147  :                 break;
; 148  : #endif
; 149  : #ifdef O_EXCL
; 150  :             case 'x':
; 151  :                 exclusive = 1;

  000c2	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR _exclusive$1$[esp+24], 1

; 152  :                 break;

  000ca	eb 2b		 jmp	 SHORT $LN21@gz_open
$LN16@gz_open:

; 153  : #endif
; 154  :             case 'f':
; 155  :                 state->strategy = Z_FILTERED;

  000cc	c7 47 4c 01 00
	00 00		 mov	 DWORD PTR [edi+76], 1

; 156  :                 break;

  000d3	eb 22		 jmp	 SHORT $LN21@gz_open
$LN17@gz_open:

; 157  :             case 'h':
; 158  :                 state->strategy = Z_HUFFMAN_ONLY;

  000d5	c7 47 4c 02 00
	00 00		 mov	 DWORD PTR [edi+76], 2

; 159  :                 break;

  000dc	eb 19		 jmp	 SHORT $LN21@gz_open
$LN18@gz_open:

; 160  :             case 'R':
; 161  :                 state->strategy = Z_RLE;

  000de	c7 47 4c 03 00
	00 00		 mov	 DWORD PTR [edi+76], 3

; 162  :                 break;

  000e5	eb 10		 jmp	 SHORT $LN21@gz_open
$LN19@gz_open:

; 163  :             case 'F':
; 164  :                 state->strategy = Z_FIXED;

  000e7	c7 47 4c 04 00
	00 00		 mov	 DWORD PTR [edi+76], 4

; 165  :                 break;

  000ee	eb 07		 jmp	 SHORT $LN21@gz_open
$LN20@gz_open:

; 166  :             case 'T':
; 167  :                 state->direct = 1;

  000f0	c7 47 2c 01 00
	00 00		 mov	 DWORD PTR [edi+44], 1
$LN21@gz_open:

; 113  :         return NULL;
; 114  :     state->size = 0;            /* no buffers allocated yet */
; 115  :     state->want = GZBUFSIZE;    /* requested buffer size */
; 116  :     state->msg = NULL;          /* no error message yet */
; 117  : 
; 118  :     /* interpret mode */
; 119  :     state->mode = GZ_NONE;
; 120  :     state->level = Z_DEFAULT_COMPRESSION;
; 121  :     state->strategy = Z_DEFAULT_STRATEGY;
; 122  :     state->direct = 0;
; 123  :     while (*mode) {

  000f7	8a 42 01	 mov	 al, BYTE PTR [edx+1]

; 168  :                 break;
; 169  :             default:        /* could consider as an error, but just ignore */
; 170  :                 ;
; 171  :             }
; 172  :         mode++;

  000fa	42		 inc	 edx
  000fb	84 c0		 test	 al, al
  000fd	75 81		 jne	 SHORT $LL2@gz_open
$LN3@gz_open:

; 173  :     }
; 174  : 
; 175  :     /* must provide an "r", "w", or "a" */
; 176  :     if (state->mode == GZ_NONE) {

  000ff	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00102	85 c0		 test	 eax, eax
  00104	0f 84 8e 01 00
	00		 je	 $LN48@gz_open

; 177  :         free(state);
; 178  :         return NULL;
; 179  :     }
; 180  : 
; 181  :     /* can't force transparent read */
; 182  :     if (state->mode == GZ_READ) {

  0010a	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  0010f	75 11		 jne	 SHORT $LN23@gz_open

; 183  :         if (state->direct) {

  00111	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0
  00115	0f 85 7d 01 00
	00		 jne	 $LN48@gz_open

; 184  :             free(state);
; 185  :             return NULL;
; 186  :         }
; 187  :         state->direct = 1;      /* for empty file */

  0011b	c7 47 2c 01 00
	00 00		 mov	 DWORD PTR [edi+44], 1
$LN23@gz_open:

; 188  :     }
; 189  : 
; 190  :     /* save the path name for error messages */
; 191  : #ifdef WIDECHAR
; 192  :     if (fd == -2) {

  00122	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00125	75 19		 jne	 SHORT $LN25@gz_open

; 193  :         len = wcstombs(NULL, path, 0);

  00127	6a 00		 push	 0
  00129	56		 push	 esi
  0012a	6a 00		 push	 0
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcstombs
  00132	8b f0		 mov	 esi, eax
  00134	83 c4 0c	 add	 esp, 12			; 0000000cH

; 194  :         if (len == (z_size_t)-1)

  00137	83 fe ff	 cmp	 esi, -1
  0013a	75 10		 jne	 SHORT $LN26@gz_open

; 195  :             len = 0;

  0013c	33 f6		 xor	 esi, esi

; 196  :     }

  0013e	eb 0c		 jmp	 SHORT $LN26@gz_open
$LN25@gz_open:

; 197  :     else
; 198  : #endif
; 199  :         len = strlen((const char *)path);

  00140	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL55@gz_open:
  00143	8a 06		 mov	 al, BYTE PTR [esi]
  00145	46		 inc	 esi
  00146	84 c0		 test	 al, al
  00148	75 f9		 jne	 SHORT $LL55@gz_open
  0014a	2b f1		 sub	 esi, ecx
$LN26@gz_open:

; 200  :     state->path = (char *)malloc(len + 1);

  0014c	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0014f	50		 push	 eax
  00150	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00156	83 c4 04	 add	 esp, 4
  00159	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 201  :     if (state->path == NULL) {

  0015c	85 c0		 test	 eax, eax
  0015e	0f 84 34 01 00
	00		 je	 $LN48@gz_open

; 203  :         return NULL;
; 204  :     }
; 205  : #ifdef WIDECHAR
; 206  :     if (fd == -2)

  00164	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00167	75 1d		 jne	 SHORT $LN29@gz_open

; 207  :         if (len)

  00169	85 f6		 test	 esi, esi
  0016b	74 14		 je	 SHORT $LN31@gz_open

; 208  :             wcstombs(state->path, path, len + 1);

  0016d	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00170	51		 push	 ecx
  00171	ff 74 24 14	 push	 DWORD PTR _path$1$[esp+28]
  00175	50		 push	 eax
  00176	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcstombs
  0017c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017f	eb 1b		 jmp	 SHORT $LN30@gz_open
$LN31@gz_open:

; 209  :         else
; 210  :             *(state->path) = 0;

  00181	c6 00 00	 mov	 BYTE PTR [eax], 0
  00184	eb 16		 jmp	 SHORT $LN30@gz_open
$LN29@gz_open:

; 211  :     else
; 212  : #endif
; 213  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 214  :         (void)snprintf(state->path, len + 1, "%s", (const char *)path);

  00186	ff 74 24 10	 push	 DWORD PTR _path$1$[esp+24]
  0018a	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0018d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00192	51		 push	 ecx
  00193	50		 push	 eax
  00194	e8 00 00 00 00	 call	 _snprintf
  00199	83 c4 10	 add	 esp, 16			; 00000010H
$LN30@gz_open:

; 215  : #else
; 216  :         strcpy(state->path, path);
; 217  : #endif
; 218  : 
; 219  :     /* compute the flags for open() */
; 220  :     oflag =

  0019c	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0019f	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  001a4	75 04		 jne	 SHORT $LN38@gz_open
  001a6	33 c9		 xor	 ecx, ecx
  001a8	eb 26		 jmp	 SHORT $LN39@gz_open
$LN38@gz_open:
  001aa	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  001af	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  001b4	b9 08 00 00 00	 mov	 ecx, 8
  001b9	b8 01 01 00 00	 mov	 eax, 257		; 00000101H
  001be	0f 44 ca	 cmove	 ecx, edx
  001c1	83 7c 24 14 00	 cmp	 DWORD PTR _exclusive$1$[esp+24], 0
  001c6	ba 01 05 00 00	 mov	 edx, 1281		; 00000501H
  001cb	0f 45 c2	 cmovne	 eax, edx
  001ce	0b c8		 or	 ecx, eax
$LN39@gz_open:
  001d0	81 c9 00 80 00
	00		 or	 ecx, 32768		; 00008000H

; 221  : #ifdef O_LARGEFILE
; 222  :         O_LARGEFILE |
; 223  : #endif
; 224  : #ifdef O_BINARY
; 225  :         O_BINARY |
; 226  : #endif
; 227  : #ifdef O_CLOEXEC
; 228  :         (cloexec ? O_CLOEXEC : 0) |
; 229  : #endif
; 230  :         (state->mode == GZ_READ ?
; 231  :          O_RDONLY :
; 232  :          (O_WRONLY | O_CREAT |
; 233  : #ifdef O_EXCL
; 234  :           (exclusive ? O_EXCL : 0) |
; 235  : #endif
; 236  :           (state->mode == GZ_WRITE ?
; 237  :            O_TRUNC :
; 238  :            O_APPEND)));
; 239  : 
; 240  :     /* open the file with the appropriate flags (or just use fd) */
; 241  :     state->fd = fd > -1 ? fd : (

  001d6	83 fb ff	 cmp	 ebx, -1
  001d9	7e 32		 jle	 SHORT $LN42@gz_open
  001db	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
$LN33@gz_open:

; 249  :         return NULL;
; 250  :     }
; 251  :     if (state->mode == GZ_APPEND) {

  001de	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  001e1	83 f8 01	 cmp	 eax, 1
  001e4	75 6e		 jne	 SHORT $LN34@gz_open

; 252  :         LSEEK(state->fd, 0, SEEK_END);  /* so gzoffset() is correct */

  001e6	6a 02		 push	 2
  001e8	6a 00		 push	 0
  001ea	6a 00		 push	 0
  001ec	53		 push	 ebx
  001ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lseeki64
  001f3	83 c4 10	 add	 esp, 16			; 00000010H

; 253  :         state->mode = GZ_WRITE;         /* simplify later checks */

  001f6	c7 47 10 b1 79
	00 00		 mov	 DWORD PTR [edi+16], 31153 ; 000079b1H

; 260  :     }
; 261  : 
; 262  :     /* initialize stream */
; 263  :     gz_reset(state);

  001fd	8b cf		 mov	 ecx, edi
  001ff	e8 00 00 00 00	 call	 _gz_reset

; 264  : 
; 265  :     /* return stream */
; 266  :     return (gzFile)state;

  00204	8b c7		 mov	 eax, edi

; 267  : }

  00206	5f		 pop	 edi
  00207	5e		 pop	 esi
  00208	5b		 pop	 ebx
  00209	8b e5		 mov	 esp, ebp
  0020b	5d		 pop	 ebp
  0020c	c3		 ret	 0
$LN42@gz_open:

; 221  : #ifdef O_LARGEFILE
; 222  :         O_LARGEFILE |
; 223  : #endif
; 224  : #ifdef O_BINARY
; 225  :         O_BINARY |
; 226  : #endif
; 227  : #ifdef O_CLOEXEC
; 228  :         (cloexec ? O_CLOEXEC : 0) |
; 229  : #endif
; 230  :         (state->mode == GZ_READ ?
; 231  :          O_RDONLY :
; 232  :          (O_WRONLY | O_CREAT |
; 233  : #ifdef O_EXCL
; 234  :           (exclusive ? O_EXCL : 0) |
; 235  : #endif
; 236  :           (state->mode == GZ_WRITE ?
; 237  :            O_TRUNC :
; 238  :            O_APPEND)));
; 239  : 
; 240  :     /* open the file with the appropriate flags (or just use fd) */
; 241  :     state->fd = fd > -1 ? fd : (

  0020d	68 b6 01 00 00	 push	 438			; 000001b6H
  00212	51		 push	 ecx
  00213	ff 74 24 18	 push	 DWORD PTR _path$1$[esp+32]
  00217	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  0021a	75 08		 jne	 SHORT $LN40@gz_open
  0021c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wopen
  00222	eb 06		 jmp	 SHORT $LN56@gz_open
$LN40@gz_open:
  00224	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___open
$LN56@gz_open:
  0022a	8b d8		 mov	 ebx, eax
  0022c	89 47 14	 mov	 DWORD PTR [edi+20], eax
  0022f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 242  : #ifdef WIDECHAR
; 243  :         fd == -2 ? _wopen(path, oflag, 0666) :
; 244  : #endif
; 245  :         open((const char *)path, oflag, 0666));
; 246  :     if (state->fd == -1) {

  00232	83 fb ff	 cmp	 ebx, -1
  00235	75 a7		 jne	 SHORT $LN33@gz_open

; 247  :         free(state->path);

  00237	ff 77 18	 push	 DWORD PTR [edi+24]
  0023a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__free
  00240	ff d6		 call	 esi
  00242	83 c4 04	 add	 esp, 4

; 248  :         free(state);

  00245	57		 push	 edi
  00246	ff d6		 call	 esi

; 267  : }

  00248	83 c4 04	 add	 esp, 4
  0024b	33 c0		 xor	 eax, eax
  0024d	5f		 pop	 edi
  0024e	5e		 pop	 esi
  0024f	5b		 pop	 ebx
  00250	8b e5		 mov	 esp, ebp
  00252	5d		 pop	 ebp
  00253	c3		 ret	 0
$LN34@gz_open:

; 254  :     }
; 255  : 
; 256  :     /* save the current position for rewinding (only if reading) */
; 257  :     if (state->mode == GZ_READ) {

  00254	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00259	75 2d		 jne	 SHORT $LN36@gz_open

; 258  :         state->start = LSEEK(state->fd, 0, SEEK_CUR);

  0025b	6a 01		 push	 1
  0025d	6a 00		 push	 0
  0025f	6a 00		 push	 0
  00261	ff 77 14	 push	 DWORD PTR [edi+20]
  00264	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lseeki64
  0026a	89 47 38	 mov	 DWORD PTR [edi+56], eax
  0026d	83 c4 10	 add	 esp, 16			; 00000010H

; 259  :         if (state->start == -1) state->start = 0;

  00270	23 c2		 and	 eax, edx
  00272	89 57 3c	 mov	 DWORD PTR [edi+60], edx
  00275	83 f8 ff	 cmp	 eax, -1
  00278	75 0e		 jne	 SHORT $LN36@gz_open
  0027a	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
  00281	c7 47 3c 00 00
	00 00		 mov	 DWORD PTR [edi+60], 0
$LN36@gz_open:

; 260  :     }
; 261  : 
; 262  :     /* initialize stream */
; 263  :     gz_reset(state);

  00288	8b cf		 mov	 ecx, edi
  0028a	e8 00 00 00 00	 call	 _gz_reset

; 264  : 
; 265  :     /* return stream */
; 266  :     return (gzFile)state;

  0028f	8b c7		 mov	 eax, edi

; 267  : }

  00291	5f		 pop	 edi
  00292	5e		 pop	 esi
  00293	5b		 pop	 ebx
  00294	8b e5		 mov	 esp, ebp
  00296	5d		 pop	 ebp
  00297	c3		 ret	 0
$LN48@gz_open:

; 202  :         free(state);

  00298	57		 push	 edi
  00299	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free

; 267  : }

  0029f	83 c4 04	 add	 esp, 4
$LN51@gz_open:
  002a2	5f		 pop	 edi
  002a3	5e		 pop	 esi
  002a4	33 c0		 xor	 eax, eax
  002a6	5b		 pop	 ebx
  002a7	8b e5		 mov	 esp, ebp
  002a9	5d		 pop	 ebp
  002aa	c3		 ret	 0
  002ab	90		 npad	 1
$LN54@gz_open:
  002ac	00 00 00 00	 DD	 $LN48@gz_open
  002b0	00 00 00 00	 DD	 $LN19@gz_open
  002b4	00 00 00 00	 DD	 $LN18@gz_open
  002b8	00 00 00 00	 DD	 $LN20@gz_open
  002bc	00 00 00 00	 DD	 $LN12@gz_open
  002c0	00 00 00 00	 DD	 $LN16@gz_open
  002c4	00 00 00 00	 DD	 $LN17@gz_open
  002c8	00 00 00 00	 DD	 $LN10@gz_open
  002cc	00 00 00 00	 DD	 $LN11@gz_open
  002d0	00 00 00 00	 DD	 $LN15@gz_open
  002d4	00 00 00 00	 DD	 $LN21@gz_open
$LN53@gz_open:
  002d8	00		 DB	 0
  002d9	0a		 DB	 10			; 0000000aH
  002da	0a		 DB	 10			; 0000000aH
  002db	0a		 DB	 10			; 0000000aH
  002dc	0a		 DB	 10			; 0000000aH
  002dd	0a		 DB	 10			; 0000000aH
  002de	0a		 DB	 10			; 0000000aH
  002df	0a		 DB	 10			; 0000000aH
  002e0	0a		 DB	 10			; 0000000aH
  002e1	0a		 DB	 10			; 0000000aH
  002e2	0a		 DB	 10			; 0000000aH
  002e3	0a		 DB	 10			; 0000000aH
  002e4	0a		 DB	 10			; 0000000aH
  002e5	0a		 DB	 10			; 0000000aH
  002e6	0a		 DB	 10			; 0000000aH
  002e7	0a		 DB	 10			; 0000000aH
  002e8	0a		 DB	 10			; 0000000aH
  002e9	0a		 DB	 10			; 0000000aH
  002ea	0a		 DB	 10			; 0000000aH
  002eb	0a		 DB	 10			; 0000000aH
  002ec	0a		 DB	 10			; 0000000aH
  002ed	0a		 DB	 10			; 0000000aH
  002ee	0a		 DB	 10			; 0000000aH
  002ef	0a		 DB	 10			; 0000000aH
  002f0	0a		 DB	 10			; 0000000aH
  002f1	0a		 DB	 10			; 0000000aH
  002f2	0a		 DB	 10			; 0000000aH
  002f3	01		 DB	 1
  002f4	0a		 DB	 10			; 0000000aH
  002f5	0a		 DB	 10			; 0000000aH
  002f6	0a		 DB	 10			; 0000000aH
  002f7	0a		 DB	 10			; 0000000aH
  002f8	0a		 DB	 10			; 0000000aH
  002f9	0a		 DB	 10			; 0000000aH
  002fa	0a		 DB	 10			; 0000000aH
  002fb	0a		 DB	 10			; 0000000aH
  002fc	0a		 DB	 10			; 0000000aH
  002fd	0a		 DB	 10			; 0000000aH
  002fe	0a		 DB	 10			; 0000000aH
  002ff	02		 DB	 2
  00300	0a		 DB	 10			; 0000000aH
  00301	03		 DB	 3
  00302	0a		 DB	 10			; 0000000aH
  00303	0a		 DB	 10			; 0000000aH
  00304	0a		 DB	 10			; 0000000aH
  00305	0a		 DB	 10			; 0000000aH
  00306	0a		 DB	 10			; 0000000aH
  00307	0a		 DB	 10			; 0000000aH
  00308	0a		 DB	 10			; 0000000aH
  00309	0a		 DB	 10			; 0000000aH
  0030a	0a		 DB	 10			; 0000000aH
  0030b	0a		 DB	 10			; 0000000aH
  0030c	0a		 DB	 10			; 0000000aH
  0030d	0a		 DB	 10			; 0000000aH
  0030e	04		 DB	 4
  0030f	0a		 DB	 10			; 0000000aH
  00310	0a		 DB	 10			; 0000000aH
  00311	0a		 DB	 10			; 0000000aH
  00312	0a		 DB	 10			; 0000000aH
  00313	05		 DB	 5
  00314	0a		 DB	 10			; 0000000aH
  00315	06		 DB	 6
  00316	0a		 DB	 10			; 0000000aH
  00317	0a		 DB	 10			; 0000000aH
  00318	0a		 DB	 10			; 0000000aH
  00319	0a		 DB	 10			; 0000000aH
  0031a	0a		 DB	 10			; 0000000aH
  0031b	0a		 DB	 10			; 0000000aH
  0031c	0a		 DB	 10			; 0000000aH
  0031d	0a		 DB	 10			; 0000000aH
  0031e	0a		 DB	 10			; 0000000aH
  0031f	07		 DB	 7
  00320	0a		 DB	 10			; 0000000aH
  00321	0a		 DB	 10			; 0000000aH
  00322	0a		 DB	 10			; 0000000aH
  00323	0a		 DB	 10			; 0000000aH
  00324	08		 DB	 8
  00325	09		 DB	 9
_gz_open ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\gzlib.c
;	COMDAT _gzopen@8
_TEXT	SEGMENT
_path$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzopen@8 PROC						; COMDAT

; 273  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 274  :     return gz_open(path, -1, mode);

  00003	ff 75 0c	 push	 DWORD PTR _mode$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00009	83 ca ff	 or	 edx, -1
  0000c	e8 00 00 00 00	 call	 _gz_open
  00011	83 c4 04	 add	 esp, 4

; 275  : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
_gzopen@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\gzlib.c
;	COMDAT _gzdopen@8
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzdopen@8 PROC						; COMDAT

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 290  :     char *path;         /* identifier for error messages */
; 291  :     gzFile gz;
; 292  : 
; 293  :     if (fd == -1 || (path = (char *)malloc(7 + 3 * sizeof(int))) == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _fd$[ebp]
  00007	57		 push	 edi
  00008	83 fe ff	 cmp	 esi, -1
  0000b	74 3f		 je	 SHORT $LN3@gzdopen
  0000d	6a 13		 push	 19			; 00000013H
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00015	8b f8		 mov	 edi, eax
  00017	83 c4 04	 add	 esp, 4
  0001a	85 ff		 test	 edi, edi
  0001c	74 2e		 je	 SHORT $LN3@gzdopen

; 295  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 296  :     (void)snprintf(path, 7 + 3 * sizeof(int), "<fd:%d>", fd);

  0001e	56		 push	 esi
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO@
  00024	6a 13		 push	 19			; 00000013H
  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _snprintf

; 297  : #else
; 298  :     sprintf(path, "<fd:%d>", fd);   /* for debugging */
; 299  : #endif
; 300  :     gz = gz_open(path, fd, mode);

  0002c	ff 75 0c	 push	 DWORD PTR _mode$[ebp]
  0002f	8b d6		 mov	 edx, esi
  00031	8b cf		 mov	 ecx, edi
  00033	e8 00 00 00 00	 call	 _gz_open

; 301  :     free(path);

  00038	57		 push	 edi
  00039	8b f0		 mov	 esi, eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00041	83 c4 18	 add	 esp, 24			; 00000018H

; 302  :     return gz;

  00044	8b c6		 mov	 eax, esi
  00046	5f		 pop	 edi

; 303  : }

  00047	5e		 pop	 esi
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
$LN3@gzdopen:
  0004c	5f		 pop	 edi

; 294  :         return NULL;

  0004d	33 c0		 xor	 eax, eax

; 303  : }

  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
_gzdopen@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\gzlib.c
;	COMDAT _gzopen_w@8
_TEXT	SEGMENT
_path$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzopen_w@8 PROC					; COMDAT

; 310  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 311  :     return gz_open(path, -2, mode);

  00003	ff 75 0c	 push	 DWORD PTR _mode$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00009	ba fe ff ff ff	 mov	 edx, -2			; fffffffeH
  0000e	e8 00 00 00 00	 call	 _gz_open
  00013	83 c4 04	 add	 esp, 4

; 312  : }

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
_gzopen_w@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\gzlib.c
;	COMDAT _gzbuffer@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_size$ = 12						; size = 4
_gzbuffer@8 PROC					; COMDAT

; 319  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 320  :     gz_statep state;
; 321  : 
; 322  :     /* get internal structure and check integrity */
; 323  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR _size$[ebp]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 31		 je	 SHORT $LN8@gzbuffer

; 324  :         return -1;
; 325  :     state = (gz_statep)file;
; 326  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000d	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00010	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00015	74 07		 je	 SHORT $LN3@gzbuffer
  00017	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  0001c	75 20		 jne	 SHORT $LN8@gzbuffer
$LN3@gzbuffer:

; 327  :         return -1;
; 328  : 
; 329  :     /* make sure we haven't already allocated memory */
; 330  :     if (state->size != 0)

  0001e	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  00022	75 1a		 jne	 SHORT $LN8@gzbuffer

; 331  :         return -1;
; 332  : 
; 333  :     /* check and set requested size */
; 334  :     if ((size << 1) < size)

  00024	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  00027	3b c2		 cmp	 eax, edx
  00029	72 13		 jb	 SHORT $LN8@gzbuffer

; 336  :     if (size < 2)
; 337  :         size = 2;               /* need two bytes to check magic header */
; 338  :     state->want = size;

  0002b	b8 02 00 00 00	 mov	 eax, 2
  00030	3b d0		 cmp	 edx, eax
  00032	0f 43 c2	 cmovae	 eax, edx
  00035	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 339  :     return 0;

  00038	33 c0		 xor	 eax, eax

; 340  : }

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN8@gzbuffer:

; 335  :         return -1;              /* need to be able to double it */

  0003e	83 c8 ff	 or	 eax, -1

; 340  : }

  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
_gzbuffer@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\gzlib.c
;	COMDAT _gzrewind@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzrewind@4 PROC					; COMDAT

; 345  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	56		 push	 esi

; 346  :     gz_statep state;
; 347  : 
; 348  :     /* get internal structure */
; 349  :     if (file == NULL)

  00008	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000b	85 f6		 test	 esi, esi
  0000d	74 40		 je	 SHORT $LN4@gzrewind

; 350  :         return -1;
; 351  :     state = (gz_statep)file;
; 352  : 
; 353  :     /* check that we're reading and that there's no error */
; 354  :     if (state->mode != GZ_READ ||

  0000f	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00016	75 37		 jne	 SHORT $LN4@gzrewind
  00018	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0001b	85 c0		 test	 eax, eax
  0001d	74 05		 je	 SHORT $LN3@gzrewind
  0001f	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00022	75 2b		 jne	 SHORT $LN4@gzrewind
$LN3@gzrewind:

; 357  : 
; 358  :     /* back up and start over */
; 359  :     if (LSEEK(state->fd, state->start, SEEK_SET) == -1)

  00024	6a 00		 push	 0
  00026	ff 76 3c	 push	 DWORD PTR [esi+60]
  00029	ff 76 38	 push	 DWORD PTR [esi+56]
  0002c	ff 76 14	 push	 DWORD PTR [esi+20]
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lseeki64
  00035	23 c2		 and	 eax, edx
  00037	83 c4 10	 add	 esp, 16			; 00000010H
  0003a	83 f8 ff	 cmp	 eax, -1
  0003d	74 10		 je	 SHORT $LN4@gzrewind

; 360  :         return -1;
; 361  :     gz_reset(state);

  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 _gz_reset

; 362  :     return 0;

  00046	33 c0		 xor	 eax, eax

; 363  : }

  00048	5e		 pop	 esi
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
$LN4@gzrewind:

; 355  :             (state->err != Z_OK && state->err != Z_BUF_ERROR))
; 356  :         return -1;

  0004f	83 c8 ff	 or	 eax, -1

; 363  : }

  00052	5e		 pop	 esi
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
_gzrewind@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\gzlib.c
;	COMDAT _gzseek64@16
_TEXT	SEGMENT
tv488 = -16						; size = 8
$T1 = -4						; size = 4
_offset$ = 8						; size = 8
tv364 = 12						; size = 4
_gzseek64@16 PROC					; COMDAT
; _file$ = ecx
; _whence$ = edx

; 370  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	8b c2		 mov	 eax, edx
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	57		 push	 edi

; 371  :     unsigned n;
; 372  :     z_off64_t ret;
; 373  :     gz_statep state;
; 374  : 
; 375  :     /* get internal structure and check integrity */
; 376  :     if (file == NULL)

  0000d	85 f6		 test	 esi, esi
  0000f	0f 84 88 01 00
	00		 je	 $LN26@gzseek64

; 377  :         return -1;
; 378  :     state = (gz_statep)file;
; 379  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00015	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00018	81 fa 4f 1c 00
	00		 cmp	 edx, 7247		; 00001c4fH
  0001e	74 0c		 je	 SHORT $LN23@gzseek64
  00020	81 fa b1 79 00
	00		 cmp	 edx, 31153		; 000079b1H
  00026	0f 85 71 01 00
	00		 jne	 $LN26@gzseek64
$LN23@gzseek64:

; 380  :         return -1;
; 381  : 
; 382  :     /* check that there's no error */
; 383  :     if (state->err != Z_OK && state->err != Z_BUF_ERROR)

  0002c	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  0002f	85 c9		 test	 ecx, ecx
  00031	74 09		 je	 SHORT $LN4@gzseek64
  00033	83 f9 fb	 cmp	 ecx, -5			; fffffffbH
  00036	0f 85 61 01 00
	00		 jne	 $LN26@gzseek64
$LN4@gzseek64:

; 384  :         return -1;
; 385  : 
; 386  :     /* can only seek from start or relative to current position */
; 387  :     if (whence != SEEK_SET && whence != SEEK_CUR)

  0003c	85 c0		 test	 eax, eax
  0003e	74 23		 je	 SHORT $LN22@gzseek64
  00040	83 f8 01	 cmp	 eax, 1
  00043	0f 85 54 01 00
	00		 jne	 $LN26@gzseek64

; 393  :     else if (state->seek)

  00049	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  0004d	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00050	8b 7d 08	 mov	 edi, DWORD PTR _offset$[ebp]
  00053	8b 5d 0c	 mov	 ebx, DWORD PTR _offset$[ebp+4]
  00056	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  00059	74 1a		 je	 SHORT $LN8@gzseek64

; 394  :         offset += state->skip;

  0005b	03 7e 50	 add	 edi, DWORD PTR [esi+80]
  0005e	13 5e 54	 adc	 ebx, DWORD PTR [esi+84]
  00061	eb 0f		 jmp	 SHORT $LN40@gzseek64
$LN22@gzseek64:

; 388  :         return -1;
; 389  : 
; 390  :     /* normalize offset to a SEEK_CUR specification */
; 391  :     if (whence == SEEK_SET)
; 392  :         offset -= state->x.pos;

  00063	8b 7d 08	 mov	 edi, DWORD PTR _offset$[ebp]
  00066	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00069	2b 7e 08	 sub	 edi, DWORD PTR [esi+8]
  0006c	8b 5d 0c	 mov	 ebx, DWORD PTR _offset$[ebp+4]
  0006f	1b 5e 0c	 sbb	 ebx, DWORD PTR [esi+12]
$LN40@gzseek64:

; 395  :     state->seek = 0;

  00072	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
$LN8@gzseek64:
  00075	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 396  : 
; 397  :     /* if within raw area while reading, just go there */
; 398  :     if (state->mode == GZ_READ && state->how == COPY &&

  0007b	81 fa 4f 1c 00
	00		 cmp	 edx, 7247		; 00001c4fH
  00081	0f 85 93 00 00
	00		 jne	 $LN9@gzseek64
  00087	83 7e 30 01	 cmp	 DWORD PTR [esi+48], 1
  0008b	0f 85 89 00 00
	00		 jne	 $LN9@gzseek64
  00091	8b c7		 mov	 eax, edi
  00093	03 46 08	 add	 eax, DWORD PTR [esi+8]
  00096	89 45 0c	 mov	 DWORD PTR tv364[ebp], eax
  00099	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0009c	13 c3		 adc	 eax, ebx
  0009e	89 45 f4	 mov	 DWORD PTR tv488[ebp+4], eax
  000a1	78 77		 js	 SHORT $LN9@gzseek64
  000a3	7f 06		 jg	 SHORT $LN34@gzseek64
  000a5	83 7d 0c 00	 cmp	 DWORD PTR tv364[ebp], 0
  000a9	72 6f		 jb	 SHORT $LN9@gzseek64
$LN34@gzseek64:

; 399  :             state->x.pos + offset >= 0) {
; 400  :         ret = LSEEK(state->fd, offset - state->x.have, SEEK_CUR);

  000ab	8b cf		 mov	 ecx, edi
  000ad	8b c3		 mov	 eax, ebx
  000af	2b 0e		 sub	 ecx, DWORD PTR [esi]
  000b1	6a 01		 push	 1
  000b3	83 d8 00	 sbb	 eax, 0
  000b6	50		 push	 eax
  000b7	51		 push	 ecx
  000b8	ff 76 14	 push	 DWORD PTR [esi+20]
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lseeki64

; 401  :         if (ret == -1)

  000c1	23 c2		 and	 eax, edx
  000c3	83 c4 10	 add	 esp, 16			; 00000010H
  000c6	83 f8 ff	 cmp	 eax, -1
  000c9	0f 84 ce 00 00
	00		 je	 $LN26@gzseek64

; 402  :             return -1;
; 403  :         state->x.have = 0;
; 404  :         state->eof = 0;
; 405  :         state->past = 0;
; 406  :         state->seek = 0;

  000cf	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 407  :         gz_error(state, Z_OK, NULL);

  000d2	33 d2		 xor	 edx, edx
  000d4	6a 00		 push	 0
  000d6	8b ce		 mov	 ecx, esi
  000d8	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  000de	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  000e5	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  000ec	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  000f2	e8 00 00 00 00	 call	 _gz_error

; 408  :         state->strm.avail_in = 0;
; 409  :         state->x.pos += offset;

  000f7	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000fa	83 c4 04	 add	 esp, 4
  000fd	03 7e 08	 add	 edi, DWORD PTR [esi+8]
  00100	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0

; 410  :         return state->x.pos;

  00107	8b c7		 mov	 eax, edi
  00109	13 d3		 adc	 edx, ebx
  0010b	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0010e	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 440  : }

  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	5b		 pop	 ebx
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c2 08 00	 ret	 8
$LN9@gzseek64:

; 411  :     }
; 412  : 
; 413  :     /* calculate skip amount, rewinding if needed for back seek when reading */
; 414  :     if (offset < 0) {

  0011a	85 db		 test	 ebx, ebx
  0011c	7f 2a		 jg	 SHORT $LN20@gzseek64
  0011e	7c 04		 jl	 SHORT $LN35@gzseek64
  00120	85 ff		 test	 edi, edi
  00122	73 24		 jae	 SHORT $LN20@gzseek64
$LN35@gzseek64:

; 415  :         if (state->mode != GZ_READ)         /* writing -- can't go backwards */

  00124	81 fa 4f 1c 00
	00		 cmp	 edx, 7247		; 00001c4fH
  0012a	75 71		 jne	 SHORT $LN26@gzseek64

; 416  :             return -1;
; 417  :         offset += state->x.pos;

  0012c	03 7e 08	 add	 edi, DWORD PTR [esi+8]
  0012f	13 5e 0c	 adc	 ebx, DWORD PTR [esi+12]

; 418  :         if (offset < 0)                     /* before start of file! */

  00132	78 69		 js	 SHORT $LN26@gzseek64
  00134	7f 04		 jg	 SHORT $LN36@gzseek64
  00136	85 ff		 test	 edi, edi
  00138	72 63		 jb	 SHORT $LN26@gzseek64
$LN36@gzseek64:

; 419  :             return -1;
; 420  :         if (gzrewind(file) == -1)           /* rewind, then skip to offset */

  0013a	56		 push	 esi
  0013b	e8 00 00 00 00	 call	 _gzrewind@4
  00140	83 f8 ff	 cmp	 eax, -1
  00143	74 58		 je	 SHORT $LN26@gzseek64
  00145	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
$LN20@gzseek64:

; 421  :             return -1;
; 422  :     }
; 423  : 
; 424  :     /* if reading, skip what's in output buffer (one less gzgetc() check) */
; 425  :     if (state->mode == GZ_READ) {

  00148	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  0014f	75 27		 jne	 SHORT $LN25@gzseek64

; 426  :         n = GT_OFF(state->x.have) || (z_off64_t)state->x.have > offset ?

  00151	8b 06		 mov	 eax, DWORD PTR [esi]
  00153	33 d2		 xor	 edx, edx
  00155	3b d3		 cmp	 edx, ebx
  00157	77 0a		 ja	 SHORT $LN18@gzseek64
  00159	72 04		 jb	 SHORT $LN37@gzseek64
  0015b	3b c7		 cmp	 eax, edi
  0015d	77 04		 ja	 SHORT $LN18@gzseek64
$LN37@gzseek64:
  0015f	8b d0		 mov	 edx, eax
  00161	eb 02		 jmp	 SHORT $LN19@gzseek64
$LN18@gzseek64:
  00163	8b d7		 mov	 edx, edi
$LN19@gzseek64:

; 427  :             (unsigned)offset : state->x.have;
; 428  :         state->x.have -= n;
; 429  :         state->x.next += n;

  00165	01 56 04	 add	 DWORD PTR [esi+4], edx
  00168	2b c2		 sub	 eax, edx

; 430  :         state->x.pos += n;

  0016a	01 56 08	 add	 DWORD PTR [esi+8], edx
  0016d	89 06		 mov	 DWORD PTR [esi], eax
  0016f	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 431  :         offset -= n;

  00173	2b fa		 sub	 edi, edx
  00175	83 db 00	 sbb	 ebx, 0
$LN25@gzseek64:

; 432  :     }
; 433  : 
; 434  :     /* request skip (if not zero) */
; 435  :     if (offset) {

  00178	8b c7		 mov	 eax, edi
  0017a	0b c3		 or	 eax, ebx
  0017c	74 0c		 je	 SHORT $LN16@gzseek64

; 436  :         state->seek = 1;

  0017e	c7 01 01 00 00
	00		 mov	 DWORD PTR [ecx], 1

; 437  :         state->skip = offset;

  00184	89 7e 50	 mov	 DWORD PTR [esi+80], edi
  00187	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
$LN16@gzseek64:

; 438  :     }
; 439  :     return state->x.pos + offset;

  0018a	03 7e 08	 add	 edi, DWORD PTR [esi+8]
  0018d	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00190	8b c7		 mov	 eax, edi
  00192	13 d3		 adc	 edx, ebx

; 440  : }

  00194	5f		 pop	 edi
  00195	5e		 pop	 esi
  00196	5b		 pop	 ebx
  00197	8b e5		 mov	 esp, ebp
  00199	5d		 pop	 ebp
  0019a	c2 08 00	 ret	 8
$LN26@gzseek64:
  0019d	5f		 pop	 edi
  0019e	83 c8 ff	 or	 eax, -1
  001a1	5e		 pop	 esi
  001a2	0b d0		 or	 edx, eax
  001a4	5b		 pop	 ebx
  001a5	8b e5		 mov	 esp, ebp
  001a7	5d		 pop	 ebp
  001a8	c2 08 00	 ret	 8
_gzseek64@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\gzlib.c
;	COMDAT _gzseek@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_offset$ = 12						; size = 4
_whence$ = 16						; size = 4
_gzseek@12 PROC						; COMDAT

; 447  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx

; 448  :     z_off64_t ret;
; 449  : 
; 450  :     ret = gzseek64(file, (z_off64_t)offset, whence);

  00007	8b 45 0c	 mov	 eax, DWORD PTR _offset$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0000d	99		 cdq
  0000e	56		 push	 esi
  0000f	52		 push	 edx
  00010	8b 55 10	 mov	 edx, DWORD PTR _whence$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _gzseek64@16
  00019	8b c8		 mov	 ecx, eax
  0001b	8b f2		 mov	 esi, edx

; 451  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  0001d	99		 cdq
  0001e	3b c8		 cmp	 ecx, eax
  00020	75 0d		 jne	 SHORT $LN3@gzseek
  00022	3b f2		 cmp	 esi, edx
  00024	75 09		 jne	 SHORT $LN3@gzseek
  00026	8b c1		 mov	 eax, ecx

; 452  : }

  00028	5e		 pop	 esi
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 0c 00	 ret	 12			; 0000000cH
$LN3@gzseek:

; 451  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  0002f	83 c8 ff	 or	 eax, -1

; 452  : }

  00032	5e		 pop	 esi
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
_gzseek@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\gzlib.c
;	COMDAT _gztell64@4
_TEXT	SEGMENT
tv73 = -8						; size = 8
_gztell64@4 PROC					; COMDAT
; _file$ = ecx

; 457  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 458  :     gz_statep state;
; 459  : 
; 460  :     /* get internal structure and check integrity */
; 461  :     if (file == NULL)

  00006	85 c9		 test	 ecx, ecx
  00008	74 46		 je	 SHORT $LN7@gztell64

; 462  :         return -1;
; 463  :     state = (gz_statep)file;
; 464  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000d	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00012	74 07		 je	 SHORT $LN3@gztell64
  00014	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00019	75 35		 jne	 SHORT $LN7@gztell64
$LN3@gztell64:

; 466  : 
; 467  :     /* return position */
; 468  :     return state->x.pos + (state->seek ? state->skip : 0);

  0001b	83 79 58 00	 cmp	 DWORD PTR [ecx+88], 0
  0001f	56		 push	 esi
  00020	74 13		 je	 SHORT $LN5@gztell64
  00022	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  00025	03 41 08	 add	 eax, DWORD PTR [ecx+8]
  00028	8b 71 54	 mov	 esi, DWORD PTR [ecx+84]
  0002b	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0002e	13 d6		 adc	 edx, esi
  00030	5e		 pop	 esi

; 469  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
$LN5@gztell64:

; 466  : 
; 467  :     /* return position */
; 468  :     return state->x.pos + (state->seek ? state->skip : 0);

  00035	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00038	0f 57 c0	 xorps	 xmm0, xmm0
  0003b	66 0f 13 45 f8	 movlpd	 QWORD PTR tv73[ebp], xmm0
  00040	8b 45 f8	 mov	 eax, DWORD PTR tv73[ebp]
  00043	03 41 08	 add	 eax, DWORD PTR [ecx+8]
  00046	8b 75 fc	 mov	 esi, DWORD PTR tv73[ebp+4]
  00049	13 d6		 adc	 edx, esi
  0004b	5e		 pop	 esi

; 469  : }

  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
$LN7@gztell64:

; 465  :         return -1;

  00050	83 c8 ff	 or	 eax, -1
  00053	0b d0		 or	 edx, eax

; 469  : }

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
_gztell64@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\gzlib.c
;	COMDAT _gztell@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gztell@4 PROC						; COMDAT

; 474  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 475  :     z_off64_t ret;
; 476  : 
; 477  :     ret = gztell64(file);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	56		 push	 esi
  00007	e8 00 00 00 00	 call	 _gztell64@4
  0000c	8b c8		 mov	 ecx, eax
  0000e	8b f2		 mov	 esi, edx

; 478  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00010	99		 cdq
  00011	3b c8		 cmp	 ecx, eax
  00013	75 0b		 jne	 SHORT $LN3@gztell
  00015	3b f2		 cmp	 esi, edx
  00017	75 07		 jne	 SHORT $LN3@gztell
  00019	8b c1		 mov	 eax, ecx
  0001b	5e		 pop	 esi

; 479  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN3@gztell:

; 478  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00020	83 c8 ff	 or	 eax, -1
  00023	5e		 pop	 esi

; 479  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
_gztell@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\gzlib.c
;	COMDAT _gzoffset64@4
_TEXT	SEGMENT
_gzoffset64@4 PROC					; COMDAT
; _file$ = ecx

; 484  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 485  :     z_off64_t offset;
; 486  :     gz_statep state;
; 487  : 
; 488  :     /* get internal structure and check integrity */
; 489  :     if (file == NULL)

  00003	85 f6		 test	 esi, esi
  00005	74 3d		 je	 SHORT $LN7@gzoffset64

; 490  :         return -1;
; 491  :     state = (gz_statep)file;
; 492  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  0000f	74 07		 je	 SHORT $LN3@gzoffset64
  00011	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00016	75 2c		 jne	 SHORT $LN7@gzoffset64
$LN3@gzoffset64:

; 493  :         return -1;
; 494  : 
; 495  :     /* compute and return effective offset in file */
; 496  :     offset = LSEEK(state->fd, 0, SEEK_CUR);

  00018	6a 01		 push	 1
  0001a	6a 00		 push	 0
  0001c	6a 00		 push	 0
  0001e	ff 76 14	 push	 DWORD PTR [esi+20]
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lseeki64

; 497  :     if (offset == -1)

  00027	8b c8		 mov	 ecx, eax
  00029	83 c4 10	 add	 esp, 16			; 00000010H
  0002c	23 ca		 and	 ecx, edx
  0002e	83 f9 ff	 cmp	 ecx, -1
  00031	74 11		 je	 SHORT $LN7@gzoffset64

; 499  :     if (state->mode == GZ_READ)             /* reading */

  00033	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  0003a	75 0d		 jne	 SHORT $LN1@gzoffset64

; 500  :         offset -= state->strm.avail_in;     /* don't count buffered input */

  0003c	2b 46 68	 sub	 eax, DWORD PTR [esi+104]
  0003f	83 da 00	 sbb	 edx, 0

; 501  :     return offset;
; 502  : }

  00042	5e		 pop	 esi
  00043	c3		 ret	 0
$LN7@gzoffset64:

; 498  :         return -1;

  00044	83 c8 ff	 or	 eax, -1
  00047	0b d0		 or	 edx, eax
$LN1@gzoffset64:

; 501  :     return offset;
; 502  : }

  00049	5e		 pop	 esi
  0004a	c3		 ret	 0
_gzoffset64@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\gzlib.c
;	COMDAT _gzoffset@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzoffset@4 PROC					; COMDAT

; 507  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx

; 508  :     z_off64_t ret;
; 509  : 
; 510  :     ret = gzoffset64(file);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _gzoffset64@4
  00010	8b c8		 mov	 ecx, eax
  00012	8b f2		 mov	 esi, edx

; 511  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00014	99		 cdq
  00015	3b c8		 cmp	 ecx, eax
  00017	75 0d		 jne	 SHORT $LN3@gzoffset
  00019	3b f2		 cmp	 esi, edx
  0001b	75 09		 jne	 SHORT $LN3@gzoffset
  0001d	8b c1		 mov	 eax, ecx

; 512  : }

  0001f	5e		 pop	 esi
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN3@gzoffset:

; 511  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00026	83 c8 ff	 or	 eax, -1

; 512  : }

  00029	5e		 pop	 esi
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
_gzoffset@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\gzlib.c
;	COMDAT _gzeof@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzeof@4 PROC						; COMDAT

; 517  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 518  :     gz_statep state;
; 519  : 
; 520  :     /* get internal structure and check integrity */
; 521  :     if (file == NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 12		 je	 SHORT $LN8@gzeof

; 522  :         return 0;
; 523  :     state = (gz_statep)file;
; 524  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00013	75 07		 jne	 SHORT $LN8@gzeof

; 525  :         return 0;
; 526  : 
; 527  :     /* return end-of-file state */
; 528  :     return state->mode == GZ_READ ? state->past : 0;

  00015	8b 40 44	 mov	 eax, DWORD PTR [eax+68]

; 529  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN8@gzeof:
  0001c	33 c0		 xor	 eax, eax
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
_gzeof@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\gzlib.c
;	COMDAT _gzerror@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_errnum$ = 12						; size = 4
_gzerror@8 PROC						; COMDAT

; 535  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]

; 536  :     gz_statep state;
; 537  : 
; 538  :     /* get internal structure and check integrity */
; 539  :     if (file == NULL)

  00006	85 c9		 test	 ecx, ecx
  00008	74 3d		 je	 SHORT $LN11@gzerror

; 540  :         return NULL;
; 541  :     state = (gz_statep)file;
; 542  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000d	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00012	74 07		 je	 SHORT $LN3@gzerror
  00014	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00019	75 2c		 jne	 SHORT $LN11@gzerror
$LN3@gzerror:

; 544  : 
; 545  :     /* return error information */
; 546  :     if (errnum != NULL)

  0001b	8b 55 0c	 mov	 edx, DWORD PTR _errnum$[ebp]
  0001e	85 d2		 test	 edx, edx
  00020	74 05		 je	 SHORT $LN4@gzerror

; 547  :         *errnum = state->err;

  00022	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  00025	89 02		 mov	 DWORD PTR [edx], eax
$LN4@gzerror:

; 548  :     return state->err == Z_MEM_ERROR ? "out of memory" :

  00027	83 79 5c fc	 cmp	 DWORD PTR [ecx+92], -4	; fffffffcH
  0002b	75 09		 jne	 SHORT $LN8@gzerror
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory@

; 549  :                                        (state->msg == NULL ? "" : state->msg);
; 550  : }

  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
$LN8@gzerror:

; 548  :     return state->err == Z_MEM_ERROR ? "out of memory" :

  00036	8b 49 60	 mov	 ecx, DWORD PTR [ecx+96]
  00039	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
  0003e	85 c9		 test	 ecx, ecx
  00040	0f 45 c1	 cmovne	 eax, ecx

; 549  :                                        (state->msg == NULL ? "" : state->msg);
; 550  : }

  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
$LN11@gzerror:

; 543  :         return NULL;

  00047	33 c0		 xor	 eax, eax

; 549  :                                        (state->msg == NULL ? "" : state->msg);
; 550  : }

  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
_gzerror@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\gzlib.c
;	COMDAT _gzclearerr@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzclearerr@4 PROC					; COMDAT

; 555  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 556  :     gz_statep state;
; 557  : 
; 558  :     /* get internal structure and check integrity */
; 559  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 3b		 je	 SHORT $LN1@gzclearerr

; 560  :         return;
; 561  :     state = (gz_statep)file;
; 562  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000d	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00012	74 17		 je	 SHORT $LN6@gzclearerr
  00014	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00019	75 2a		 jne	 SHORT $LN1@gzclearerr

; 563  :         return;
; 564  : 
; 565  :     /* clear error and end-of-file */
; 566  :     if (state->mode == GZ_READ) {
; 567  :         state->eof = 0;
; 568  :         state->past = 0;
; 569  :     }
; 570  :     gz_error(state, Z_OK, NULL);

  0001b	6a 00		 push	 0
  0001d	33 d2		 xor	 edx, edx
  0001f	e8 00 00 00 00	 call	 _gz_error
  00024	83 c4 04	 add	 esp, 4

; 571  : }

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN6@gzclearerr:

; 563  :         return;
; 564  : 
; 565  :     /* clear error and end-of-file */
; 566  :     if (state->mode == GZ_READ) {
; 567  :         state->eof = 0;
; 568  :         state->past = 0;
; 569  :     }
; 570  :     gz_error(state, Z_OK, NULL);

  0002b	6a 00		 push	 0
  0002d	33 d2		 xor	 edx, edx
  0002f	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0
  00036	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0
  0003d	e8 00 00 00 00	 call	 _gz_error
  00042	83 c4 04	 add	 esp, 4
$LN1@gzclearerr:

; 571  : }

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
_gzclearerr@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\gzlib.c
;	COMDAT _gz_error
_TEXT	SEGMENT
tv140 = -4						; size = 4
_msg$ = 8						; size = 4
_gz_error PROC						; COMDAT
; _state$ = ecx
; _err$ = edx

; 583  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f2		 mov	 esi, edx

; 584  :     /* free previously allocated message and clear */
; 585  :     if (state->msg != NULL) {

  0000d	8b 43 60	 mov	 eax, DWORD PTR [ebx+96]
  00010	85 c0		 test	 eax, eax
  00012	74 17		 je	 SHORT $LN9@gz_error

; 586  :         if (state->err != Z_MEM_ERROR)

  00014	83 7b 5c fc	 cmp	 DWORD PTR [ebx+92], -4	; fffffffcH
  00018	74 0a		 je	 SHORT $LN3@gz_error

; 587  :             free(state->msg);

  0001a	50		 push	 eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00021	83 c4 04	 add	 esp, 4
$LN3@gz_error:

; 588  :         state->msg = NULL;

  00024	c7 43 60 00 00
	00 00		 mov	 DWORD PTR [ebx+96], 0
$LN9@gz_error:

; 589  :     }
; 590  : 
; 591  :     /* if fatal, set state->x.have to 0 so that the gzgetc() macro fails */
; 592  :     if (err != Z_OK && err != Z_BUF_ERROR)

  0002b	85 f6		 test	 esi, esi
  0002d	74 0b		 je	 SHORT $LN4@gz_error
  0002f	83 fe fb	 cmp	 esi, -5			; fffffffbH
  00032	74 06		 je	 SHORT $LN4@gz_error

; 593  :         state->x.have = 0;

  00034	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
$LN4@gz_error:

; 594  : 
; 595  :     /* set error code, and if no message, then done */
; 596  :     state->err = err;
; 597  :     if (msg == NULL)

  0003a	8b 55 08	 mov	 edx, DWORD PTR _msg$[ebp]
  0003d	89 73 5c	 mov	 DWORD PTR [ebx+92], esi
  00040	85 d2		 test	 edx, edx
  00042	0f 84 8f 00 00
	00		 je	 $LN1@gz_error

; 598  :         return;
; 599  : 
; 600  :     /* for an out of memory error, return literal string when requested */
; 601  :     if (err == Z_MEM_ERROR)

  00048	83 fe fc	 cmp	 esi, -4			; fffffffcH
  0004b	0f 84 86 00 00
	00		 je	 $LN1@gz_error

; 602  :         return;
; 603  : 
; 604  :     /* construct error message with path */
; 605  :     if ((state->msg = (char *)malloc(strlen(state->path) + strlen(msg) + 3)) ==

  00051	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]
  00054	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL10@gz_error:
  00057	8a 01		 mov	 al, BYTE PTR [ecx]
  00059	41		 inc	 ecx
  0005a	84 c0		 test	 al, al
  0005c	75 f9		 jne	 SHORT $LL10@gz_error
  0005e	2b ce		 sub	 ecx, esi
  00060	8d 72 01	 lea	 esi, DWORD PTR [edx+1]
$LL11@gz_error:
  00063	8a 02		 mov	 al, BYTE PTR [edx]
  00065	42		 inc	 edx
  00066	84 c0		 test	 al, al
  00068	75 f9		 jne	 SHORT $LL11@gz_error
  0006a	2b d6		 sub	 edx, esi
  0006c	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  0006f	03 c2		 add	 eax, edx
  00071	50		 push	 eax
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00078	83 c4 04	 add	 esp, 4
  0007b	89 45 fc	 mov	 DWORD PTR tv140[ebp], eax
  0007e	89 43 60	 mov	 DWORD PTR [ebx+96], eax
  00081	85 c0		 test	 eax, eax
  00083	75 0e		 jne	 SHORT $LN7@gz_error

; 606  :             NULL) {
; 607  :         state->err = Z_MEM_ERROR;

  00085	c7 43 5c fc ff
	ff ff		 mov	 DWORD PTR [ebx+92], -4	; fffffffcH

; 612  :                    "%s%s%s", state->path, ": ", msg);
; 613  : #else
; 614  :     strcpy(state->msg, state->path);
; 615  :     strcat(state->msg, ": ");
; 616  :     strcat(state->msg, msg);
; 617  : #endif
; 618  : }

  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
$LN7@gz_error:

; 608  :         return;
; 609  :     }
; 610  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 611  :     (void)snprintf(state->msg, strlen(state->path) + strlen(msg) + 3,

  00093	8b 73 18	 mov	 esi, DWORD PTR [ebx+24]
  00096	8b ce		 mov	 ecx, esi
  00098	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0009b	0f 1f 44 00 00	 npad	 5
$LL12@gz_error:
  000a0	8a 01		 mov	 al, BYTE PTR [ecx]
  000a2	41		 inc	 ecx
  000a3	84 c0		 test	 al, al
  000a5	75 f9		 jne	 SHORT $LL12@gz_error
  000a7	8b 7d 08	 mov	 edi, DWORD PTR _msg$[ebp]
  000aa	2b ca		 sub	 ecx, edx
  000ac	8b d7		 mov	 edx, edi
  000ae	8d 5a 01	 lea	 ebx, DWORD PTR [edx+1]
$LL13@gz_error:
  000b1	8a 02		 mov	 al, BYTE PTR [edx]
  000b3	42		 inc	 edx
  000b4	84 c0		 test	 al, al
  000b6	75 f9		 jne	 SHORT $LL13@gz_error
  000b8	57		 push	 edi
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_02LMMGGCAJ@?3?5@
  000be	56		 push	 esi
  000bf	2b d3		 sub	 edx, ebx
  000c1	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_06DIJPEION@?$CFs?$CFs?$CFs@
  000c9	03 c2		 add	 eax, edx
  000cb	50		 push	 eax
  000cc	ff 75 fc	 push	 DWORD PTR tv140[ebp]
  000cf	e8 00 00 00 00	 call	 _snprintf
  000d4	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@gz_error:

; 612  :                    "%s%s%s", state->path, ": ", msg);
; 613  : #else
; 614  :     strcpy(state->msg, state->path);
; 615  :     strcat(state->msg, ": ");
; 616  :     strcat(state->msg, msg);
; 617  : #endif
; 618  : }

  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
_gz_error ENDP
_TEXT	ENDS
END
