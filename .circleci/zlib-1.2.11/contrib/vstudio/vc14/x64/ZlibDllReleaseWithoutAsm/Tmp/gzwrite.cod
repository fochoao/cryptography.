; Listing generated by Microsoft (R) Optimizing Compiler Version 19.31.31107.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5@ ; `string'
PUBLIC	??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5i@ ; `string'
EXTRN	__imp__write:PROC
;	COMDAT ??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5i@
CONST	SEGMENT
??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5i@ DB 'requested le'
	DB	'ngth does not fit in int', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5@
CONST	SEGMENT
??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5@ DB 'internal err'
	DB	'or: deflate stream corrupt', 00H		; `string'
PUBLIC	gzsetparams
PUBLIC	gzflush
PUBLIC	gzprintf
PUBLIC	gzvprintf
PUBLIC	gzputs
PUBLIC	gzputc
PUBLIC	gzfwrite
PUBLIC	gzwrite
PUBLIC	gzclose_w
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzsetparams DD imagerel $LN18
	DD	imagerel $LN18+174
	DD	imagerel $unwind$gzsetparams
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzflush DD imagerel $LN15
	DD	imagerel $LN15+107
	DD	imagerel $unwind$gzflush
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzprintf DD imagerel $LN4
	DD	imagerel $LN4+34
	DD	imagerel $unwind$gzprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzvprintf DD imagerel $LN25
	DD	imagerel $LN25+129
	DD	imagerel $unwind$gzvprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$gzvprintf DD imagerel $LN25+129
	DD	imagerel $LN25+325
	DD	imagerel $chain$1$gzvprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$gzvprintf DD imagerel $LN25+325
	DD	imagerel $LN25+365
	DD	imagerel $chain$3$gzvprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$gzvprintf DD imagerel $LN25+365
	DD	imagerel $LN25+387
	DD	imagerel $chain$4$gzvprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzputs DD imagerel $LN11
	DD	imagerel $LN11+33
	DD	imagerel $unwind$gzputs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$gzputs DD imagerel $LN11+33
	DD	imagerel $LN11+89
	DD	imagerel $chain$0$gzputs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$gzputs DD imagerel $LN11+89
	DD	imagerel $LN11+102
	DD	imagerel $chain$1$gzputs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzputc DD imagerel $LN18
	DD	imagerel $LN18+196
	DD	imagerel $unwind$gzputc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzfwrite DD imagerel $LN11
	DD	imagerel $LN11+114
	DD	imagerel $unwind$gzfwrite
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzwrite DD imagerel $LN9
	DD	imagerel $LN9+65
	DD	imagerel $unwind$gzwrite
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gz_write DD imagerel gz_write
	DD	imagerel gz_write+317
	DD	imagerel $unwind$gz_write
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gz_zero DD imagerel gz_zero
	DD	imagerel gz_zero+171
	DD	imagerel $unwind$gz_zero
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gz_comp DD imagerel gz_comp
	DD	imagerel gz_comp+436
	DD	imagerel $unwind$gz_comp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gz_init DD imagerel gz_init
	DD	imagerel gz_init+295
	DD	imagerel $unwind$gz_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzclose_w DD imagerel $LN14
	DD	imagerel $LN14+204
	DD	imagerel $unwind$gzclose_w
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzclose_w DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gz_init DD 085201H
	DD	0b7452H
	DD	0a544dH
	DD	0c340aH
	DD	06006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gz_comp DD 0a4501H
	DD	076445H
	DD	065440H
	DD	097410H
	DD	083410H
	DD	0e00c3210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gz_zero DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gz_write DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzwrite DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzfwrite DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzputc DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$gzputs DD 021H
	DD	imagerel $LN11
	DD	imagerel $LN11+33
	DD	imagerel $unwind$gzputs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$gzputs DD 020521H
	DD	063405H
	DD	imagerel $LN11
	DD	imagerel $LN11+33
	DD	imagerel $unwind$gzputs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzputs DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$gzvprintf DD 021H
	DD	imagerel $LN25
	DD	imagerel $LN25+129
	DD	imagerel $unwind$gzvprintf
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$gzvprintf DD 040021H
	DD	096400H
	DD	083400H
	DD	imagerel $LN25
	DD	imagerel $LN25+129
	DD	imagerel $unwind$gzvprintf
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$gzvprintf DD 040a21H
	DD	09640aH
	DD	083405H
	DD	imagerel $LN25
	DD	imagerel $LN25+129
	DD	imagerel $unwind$gzvprintf
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzvprintf DD 061001H
	DD	0b7410H
	DD	0a5410H
	DD	0e00c5210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzprintf DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzflush DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzsetparams DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
; File C:\cpython\externals\zlib-1.2.11\gzwrite.c
;	COMDAT gzclose_w
_TEXT	SEGMENT
file$ = 48
gzclose_w PROC						; COMDAT

; 629  : {

$LN14:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 630  :     int ret = Z_OK;

  0000a	33 ff		 xor	 edi, edi
  0000c	48 8b d9	 mov	 rbx, rcx

; 631  :     gz_statep state;
; 632  : 
; 633  :     /* get internal structure */
; 634  :     if (file == NULL)

  0000f	48 85 c9	 test	 rcx, rcx
  00012	0f 84 a4 00 00
	00		 je	 $LN11@gzclose_w

; 635  :         return Z_STREAM_ERROR;
; 636  :     state = (gz_statep)file;
; 637  : 
; 638  :     /* check that we're writing */
; 639  :     if (state->mode != GZ_WRITE)

  00018	81 79 18 b1 79
	00 00		 cmp	 DWORD PTR [rcx+24], 31153 ; 000079b1H
  0001f	0f 85 97 00 00
	00		 jne	 $LN11@gzclose_w

; 640  :         return Z_STREAM_ERROR;
; 641  : 
; 642  :     /* check for seek request */
; 643  :     if (state->seek) {

  00025	39 79 68	 cmp	 DWORD PTR [rcx+104], edi
  00028	74 14		 je	 SHORT $LN5@gzclose_w

; 644  :         state->seek = 0;
; 645  :         if (gz_zero(state, state->skip) == -1)

  0002a	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0002e	89 79 68	 mov	 DWORD PTR [rcx+104], edi
  00031	e8 00 00 00 00	 call	 gz_zero
  00036	83 f8 ff	 cmp	 eax, -1
  00039	75 03		 jne	 SHORT $LN5@gzclose_w

; 646  :             ret = state->err;

  0003b	8b 7b 6c	 mov	 edi, DWORD PTR [rbx+108]
$LN5@gzclose_w:

; 647  :     }
; 648  : 
; 649  :     /* flush, free memory, and close file */
; 650  :     if (gz_comp(state, Z_FINISH) == -1)

  0003e	ba 04 00 00 00	 mov	 edx, 4
  00043	48 8b cb	 mov	 rcx, rbx
  00046	e8 00 00 00 00	 call	 gz_comp
  0004b	83 f8 ff	 cmp	 eax, -1
  0004e	75 03		 jne	 SHORT $LN6@gzclose_w

; 651  :         ret = state->err;

  00050	8b 7b 6c	 mov	 edi, DWORD PTR [rbx+108]
$LN6@gzclose_w:

; 652  :     if (state->size) {

  00053	83 7b 28 00	 cmp	 DWORD PTR [rbx+40], 0
  00057	74 23		 je	 SHORT $LN7@gzclose_w

; 653  :         if (!state->direct) {

  00059	83 7b 40 00	 cmp	 DWORD PTR [rbx+64], 0
  0005d	75 13		 jne	 SHORT $LN8@gzclose_w

; 654  :             (void)deflateEnd(&(state->strm));

  0005f	48 8d 4b 78	 lea	 rcx, QWORD PTR [rbx+120]
  00063	e8 00 00 00 00	 call	 deflateEnd

; 655  :             free(state->out);

  00068	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN8@gzclose_w:

; 656  :         }
; 657  :         free(state->in);

  00072	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@gzclose_w:

; 658  :     }
; 659  :     gz_error(state, Z_OK, NULL);

  0007c	45 33 c0	 xor	 r8d, r8d
  0007f	33 d2		 xor	 edx, edx
  00081	48 8b cb	 mov	 rcx, rbx
  00084	e8 00 00 00 00	 call	 gz_error

; 660  :     free(state->path);

  00089	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 661  :     if (close(state->fd) == -1)

  00093	8b 4b 1c	 mov	 ecx, DWORD PTR [rbx+28]
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__close
  0009c	b9 ff ff ff ff	 mov	 ecx, -1
  000a1	3b c1		 cmp	 eax, ecx
  000a3	0f 44 f9	 cmove	 edi, ecx

; 662  :         ret = Z_ERRNO;
; 663  :     free(state);

  000a6	48 8b cb	 mov	 rcx, rbx
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 664  :     return ret;

  000af	8b c7		 mov	 eax, edi

; 665  : }

  000b1	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ba	5f		 pop	 rdi
  000bb	c3		 ret	 0
$LN11@gzclose_w:
  000bc	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c1	b8 fe ff ff ff	 mov	 eax, -2
  000c6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ca	5f		 pop	 rdi
  000cb	c3		 ret	 0
gzclose_w ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\cpython\externals\zlib-1.2.11\gzwrite.c
;	COMDAT gz_init
_TEXT	SEGMENT
state$ = 80
gz_init	PROC						; COMDAT

; 19   : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 20   :     int ret;
; 21   :     z_streamp strm = &(state->strm);
; 22   : 
; 23   :     /* allocate input buffer (double size for gzprintf) */
; 24   :     state->in = (unsigned char *)malloc(state->want << 1);

  0000a	8b 41 2c	 mov	 eax, DWORD PTR [rcx+44]
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	8d 0c 00	 lea	 ecx, DWORD PTR [rax+rax]
  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00019	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax

; 25   :     if (state->in == NULL) {

  0001d	48 85 c0	 test	 rax, rax
  00020	75 22		 jne	 SHORT $LN2@gz_init

; 26   :         gz_error(state, Z_MEM_ERROR, "out of memory");

  00022	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@BNNCBLEN@out?5of?5memory@
  00029	48 8b cb	 mov	 rcx, rbx
  0002c	8d 50 fc	 lea	 edx, QWORD PTR [rax-4]
  0002f	e8 00 00 00 00	 call	 gz_error

; 27   :         return -1;

  00034	b8 ff ff ff ff	 mov	 eax, -1

; 65   : }

  00039	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0003e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00042	5e		 pop	 rsi
  00043	c3		 ret	 0
$LN2@gz_init:

; 28   :     }
; 29   : 
; 30   :     /* only need output buffer and deflate state if compressing */
; 31   :     if (!state->direct) {

  00044	83 7b 40 00	 cmp	 DWORD PTR [rbx+64], 0
  00048	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  0004d	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  00052	0f 85 97 00 00
	00		 jne	 $LN8@gz_init

; 32   :         /* allocate output buffer */
; 33   :         state->out = (unsigned char *)malloc(state->want);

  00058	8b 4b 2c	 mov	 ecx, DWORD PTR [rbx+44]
  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00061	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax

; 34   :         if (state->out == NULL) {

  00065	48 85 c0	 test	 rax, rax
  00068	74 5c		 je	 SHORT $LN11@gz_init

; 35   :             free(state->in);
; 36   :             gz_error(state, Z_MEM_ERROR, "out of memory");
; 37   :             return -1;
; 38   :         }
; 39   : 
; 40   :         /* allocate deflate memory, set up for gzip compression */
; 41   :         strm->zalloc = Z_NULL;

  0006a	33 ed		 xor	 ebp, ebp

; 42   :         strm->zfree = Z_NULL;
; 43   :         strm->opaque = Z_NULL;
; 44   :         ret = deflateInit2(strm, state->level, Z_DEFLATED,

  0006c	c7 44 24 38 58
	00 00 00	 mov	 DWORD PTR [rsp+56], 88	; 00000058H
  00074	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06CJNJFBNP@1?42?411@
  0007b	48 89 ab a8 00
	00 00		 mov	 QWORD PTR [rbx+168], rbp
  00082	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00087	48 8d 4b 78	 lea	 rcx, QWORD PTR [rbx+120]
  0008b	48 89 ab b0 00
	00 00		 mov	 QWORD PTR [rbx+176], rbp
  00092	48 89 ab b8 00
	00 00		 mov	 QWORD PTR [rbx+184], rbp
  00099	44 8d 4d 1f	 lea	 r9d, QWORD PTR [rbp+31]
  0009d	8b 43 5c	 mov	 eax, DWORD PTR [rbx+92]
  000a0	44 8d 45 08	 lea	 r8d, QWORD PTR [rbp+8]
  000a4	8b 53 58	 mov	 edx, DWORD PTR [rbx+88]
  000a7	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000ab	c7 44 24 20 08
	00 00 00	 mov	 DWORD PTR [rsp+32], 8
  000b3	e8 00 00 00 00	 call	 deflateInit2_

; 45   :                            MAX_WBITS + 16, DEF_MEM_LEVEL, state->strategy);
; 46   :         if (ret != Z_OK) {

  000b8	85 c0		 test	 eax, eax
  000ba	74 2f		 je	 SHORT $LN5@gz_init

; 47   :             free(state->out);

  000bc	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  000c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN11@gz_init:

; 48   :             free(state->in);

  000c6	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 49   :             gz_error(state, Z_MEM_ERROR, "out of memory");

  000d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@BNNCBLEN@out?5of?5memory@
  000d7	ba fc ff ff ff	 mov	 edx, -4
  000dc	48 8b cb	 mov	 rcx, rbx
  000df	e8 00 00 00 00	 call	 gz_error

; 50   :             return -1;

  000e4	b8 ff ff ff ff	 mov	 eax, -1
  000e9	eb 27		 jmp	 SHORT $LN10@gz_init
$LN5@gz_init:

; 51   :         }
; 52   :         strm->next_in = NULL;

  000eb	48 89 6b 78	 mov	 QWORD PTR [rbx+120], rbp
$LN8@gz_init:

; 53   :     }
; 54   : 
; 55   :     /* mark state as initialized */
; 56   :     state->size = state->want;
; 57   : 
; 58   :     /* initialize write buffer if compressing */
; 59   :     if (!state->direct) {

  000ef	83 7b 40 00	 cmp	 DWORD PTR [rbx+64], 0
  000f3	8b 43 2c	 mov	 eax, DWORD PTR [rbx+44]
  000f6	89 43 28	 mov	 DWORD PTR [rbx+40], eax
  000f9	75 15		 jne	 SHORT $LN6@gz_init

; 60   :         strm->avail_out = state->size;

  000fb	89 83 90 00 00
	00		 mov	 DWORD PTR [rbx+144], eax

; 61   :         strm->next_out = state->out;

  00101	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  00105	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax

; 62   :         state->x.next = strm->next_out;

  0010c	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax
$LN6@gz_init:

; 63   :     }
; 64   :     return 0;

  00110	33 c0		 xor	 eax, eax
$LN10@gz_init:
  00112	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00117	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]

; 65   : }

  0011c	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00121	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00125	5e		 pop	 rsi
  00126	c3		 ret	 0
gz_init	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\cpython\externals\zlib-1.2.11\gzwrite.c
;	COMDAT gz_comp
_TEXT	SEGMENT
state$ = 48
flush$ = 56
gz_comp	PROC						; COMDAT

; 76   : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000a	41 56		 push	 r14
  0000c	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 77   :     int ret, writ;
; 78   :     unsigned have, put, max = ((unsigned)-1 >> 2) + 1;
; 79   :     z_streamp strm = &(state->strm);
; 80   : 
; 81   :     /* allocate memory if this is the first time through */
; 82   :     if (state->size == 0 && gz_init(state) == -1)

  00010	83 79 28 00	 cmp	 DWORD PTR [rcx+40], 0
  00014	44 8b f2	 mov	 r14d, edx
  00017	48 8b f9	 mov	 rdi, rcx
  0001a	75 1b		 jne	 SHORT $LN40@gz_comp
  0001c	e8 00 00 00 00	 call	 gz_init
  00021	83 f8 ff	 cmp	 eax, -1
  00024	75 11		 jne	 SHORT $LN40@gz_comp

; 141  : }

  00026	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0002b	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	41 5e		 pop	 r14
  00036	c3		 ret	 0
$LN40@gz_comp:

; 83   :         return -1;
; 84   : 
; 85   :     /* write directly if requested */
; 86   :     if (state->direct) {

  00037	83 7f 40 00	 cmp	 DWORD PTR [rdi+64], 0
  0003b	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  00040	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  00045	74 6c		 je	 SHORT $LN10@gz_comp

; 87   :         while (strm->avail_in) {

  00047	8b 8f 80 00 00
	00		 mov	 ecx, DWORD PTR [rdi+128]
  0004d	85 c9		 test	 ecx, ecx
  0004f	0f 84 27 01 00
	00		 je	 $LN18@gz_comp
  00055	48 8b 57 78	 mov	 rdx, QWORD PTR [rdi+120]
  00059	bd 00 00 00 40	 mov	 ebp, 1073741824		; 40000000H
  0005e	66 90		 npad	 2
$LL2@gz_comp:

; 88   :             put = strm->avail_in > max ? max : strm->avail_in;

  00060	3b cd		 cmp	 ecx, ebp
  00062	0f 47 cd	 cmova	 ecx, ebp

; 89   :             writ = write(state->fd, strm->next_in, put);

  00065	44 8b c1	 mov	 r8d, ecx
  00068	8b 4f 1c	 mov	 ecx, DWORD PTR [rdi+28]
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__write

; 90   :             if (writ < 0) {

  00071	85 c0		 test	 eax, eax
  00073	78 23		 js	 SHORT $LN27@gz_comp

; 91   :                 gz_error(state, Z_ERRNO, zstrerror());
; 92   :                 return -1;
; 93   :             }
; 94   :             strm->avail_in -= (unsigned)writ;

  00075	8b 8f 80 00 00
	00		 mov	 ecx, DWORD PTR [rdi+128]
  0007b	2b c8		 sub	 ecx, eax

; 95   :             strm->next_in += writ;

  0007d	48 98		 cdqe
  0007f	48 01 47 78	 add	 QWORD PTR [rdi+120], rax
  00083	48 8b 57 78	 mov	 rdx, QWORD PTR [rdi+120]
  00087	89 8f 80 00 00
	00		 mov	 DWORD PTR [rdi+128], ecx
  0008d	85 c9		 test	 ecx, ecx
  0008f	75 cf		 jne	 SHORT $LL2@gz_comp

; 138  : 
; 139  :     /* all done, no errors */
; 140  :     return 0;

  00091	33 c0		 xor	 eax, eax
  00093	e9 01 01 00 00	 jmp	 $LN42@gz_comp
$LN27@gz_comp:

; 128  :             gz_error(state, Z_STREAM_ERROR,

  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0009e	8b 08		 mov	 ecx, DWORD PTR [rax]
  000a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strerror
  000a6	4c 8b c0	 mov	 r8, rax
  000a9	ba ff ff ff ff	 mov	 edx, -1
  000ae	e9 d9 00 00 00	 jmp	 $LN43@gz_comp
$LN10@gz_comp:

; 96   :         }
; 97   :         return 0;
; 98   :     }
; 99   : 
; 100  :     /* run deflate() on provided input until it produces no more output */
; 101  :     ret = Z_OK;

  000b3	33 c0		 xor	 eax, eax
  000b5	bd 00 00 00 40	 mov	 ebp, 1073741824		; 40000000H
  000ba	66 0f 1f 44 00
	00		 npad	 6
$LL6@gz_comp:

; 102  :     do {
; 103  :         /* write out current buffer contents if full, or if flushing, but if
; 104  :            doing Z_FINISH then don't write until we get to Z_STREAM_END */
; 105  :         if (strm->avail_out == 0 || (flush != Z_NO_FLUSH &&

  000c0	83 bf 90 00 00
	00 00		 cmp	 DWORD PTR [rdi+144], 0
  000c7	74 10		 je	 SHORT $LN26@gz_comp
  000c9	45 85 f6	 test	 r14d, r14d
  000cc	74 7c		 je	 SHORT $LN16@gz_comp
  000ce	41 83 fe 04	 cmp	 r14d, 4
  000d2	75 05		 jne	 SHORT $LN26@gz_comp
  000d4	83 f8 01	 cmp	 eax, 1
  000d7	75 71		 jne	 SHORT $LN16@gz_comp
$LN26@gz_comp:

; 106  :             (flush != Z_FINISH || ret == Z_STREAM_END))) {
; 107  :             while (strm->next_out > state->x.next) {

  000d9	48 8b 8f 88 00
	00 00		 mov	 rcx, QWORD PTR [rdi+136]
  000e0	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  000e4	48 3b ca	 cmp	 rcx, rdx
  000e7	76 3c		 jbe	 SHORT $LN8@gz_comp
  000e9	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@gz_comp:

; 108  :                 put = strm->next_out - state->x.next > (int)max ? max :

  000f0	48 8b c1	 mov	 rax, rcx
  000f3	2b ca		 sub	 ecx, edx
  000f5	48 2b c2	 sub	 rax, rdx
  000f8	48 3b c5	 cmp	 rax, rbp
  000fb	0f 4f cd	 cmovg	 ecx, ebp

; 109  :                       (unsigned)(strm->next_out - state->x.next);
; 110  :                 writ = write(state->fd, state->x.next, put);

  000fe	44 8b c1	 mov	 r8d, ecx
  00101	8b 4f 1c	 mov	 ecx, DWORD PTR [rdi+28]
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__write

; 111  :                 if (writ < 0) {

  0010a	85 c0		 test	 eax, eax
  0010c	78 8a		 js	 SHORT $LN27@gz_comp

; 112  :                     gz_error(state, Z_ERRNO, zstrerror());
; 113  :                     return -1;
; 114  :                 }
; 115  :                 state->x.next += writ;

  0010e	48 63 d0	 movsxd	 rdx, eax
  00111	48 03 57 08	 add	 rdx, QWORD PTR [rdi+8]
  00115	48 89 57 08	 mov	 QWORD PTR [rdi+8], rdx
  00119	48 8b 8f 88 00
	00 00		 mov	 rcx, QWORD PTR [rdi+136]
  00120	48 3b ca	 cmp	 rcx, rdx
  00123	77 cb		 ja	 SHORT $LL7@gz_comp
$LN8@gz_comp:

; 116  :             }
; 117  :             if (strm->avail_out == 0) {

  00125	83 bf 90 00 00
	00 00		 cmp	 DWORD PTR [rdi+144], 0
  0012c	75 1c		 jne	 SHORT $LN16@gz_comp

; 118  :                 strm->avail_out = state->size;

  0012e	8b 47 28	 mov	 eax, DWORD PTR [rdi+40]
  00131	89 87 90 00 00
	00		 mov	 DWORD PTR [rdi+144], eax

; 119  :                 strm->next_out = state->out;

  00137	48 8b 47 38	 mov	 rax, QWORD PTR [rdi+56]
  0013b	48 89 87 88 00
	00 00		 mov	 QWORD PTR [rdi+136], rax

; 120  :                 state->x.next = state->out;

  00142	48 8b 47 38	 mov	 rax, QWORD PTR [rdi+56]
  00146	48 89 47 08	 mov	 QWORD PTR [rdi+8], rax
$LN16@gz_comp:

; 121  :             }
; 122  :         }
; 123  : 
; 124  :         /* compress */
; 125  :         have = strm->avail_out;

  0014a	8b b7 90 00 00
	00		 mov	 esi, DWORD PTR [rdi+144]

; 126  :         ret = deflate(strm, flush);

  00150	48 8d 4f 78	 lea	 rcx, QWORD PTR [rdi+120]
  00154	41 8b d6	 mov	 edx, r14d
  00157	e8 00 00 00 00	 call	 deflate

; 127  :         if (ret == Z_STREAM_ERROR) {

  0015c	83 f8 fe	 cmp	 eax, -2
  0015f	74 1f		 je	 SHORT $LN30@gz_comp

; 131  :         }
; 132  :         have -= strm->avail_out;

  00161	3b b7 90 00 00
	00		 cmp	 esi, DWORD PTR [rdi+144]

; 133  :     } while (have);

  00167	0f 85 53 ff ff
	ff		 jne	 $LL6@gz_comp

; 134  : 
; 135  :     /* if that completed a deflate stream, allow another to start */
; 136  :     if (flush == Z_FINISH)

  0016d	41 83 fe 04	 cmp	 r14d, 4
  00171	75 09		 jne	 SHORT $LN18@gz_comp

; 137  :         deflateReset(strm);

  00173	48 8d 4f 78	 lea	 rcx, QWORD PTR [rdi+120]
  00177	e8 00 00 00 00	 call	 deflateReset
$LN18@gz_comp:

; 138  : 
; 139  :     /* all done, no errors */
; 140  :     return 0;

  0017c	33 c0		 xor	 eax, eax
  0017e	eb 19		 jmp	 SHORT $LN42@gz_comp
$LN30@gz_comp:

; 128  :             gz_error(state, Z_STREAM_ERROR,

  00180	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5@
  00187	ba fe ff ff ff	 mov	 edx, -2
$LN43@gz_comp:
  0018c	48 8b cf	 mov	 rcx, rdi
  0018f	e8 00 00 00 00	 call	 gz_error

; 129  :                       "internal error: deflate stream corrupt");
; 130  :             return -1;

  00194	b8 ff ff ff ff	 mov	 eax, -1
$LN42@gz_comp:

; 141  : }

  00199	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  0019e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  001a3	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001a8	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  001ad	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001b1	41 5e		 pop	 r14
  001b3	c3		 ret	 0
gz_comp	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\cpython\externals\zlib-1.2.11\gzwrite.c
;	COMDAT gz_zero
_TEXT	SEGMENT
state$ = 48
len$ = 56
gz_zero	PROC						; COMDAT

; 148  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 149  :     int first;
; 150  :     unsigned n;
; 151  :     z_streamp strm = &(state->strm);
; 152  : 
; 153  :     /* consume whatever's left in the input buffer */
; 154  :     if (strm->avail_in && gz_comp(state, Z_NO_FLUSH) == -1)

  00014	83 b9 80 00 00
	00 00		 cmp	 DWORD PTR [rcx+128], 0
  0001b	48 8b fa	 mov	 rdi, rdx
  0001e	48 8b d9	 mov	 rbx, rcx
  00021	74 0c		 je	 SHORT $LN4@gz_zero
  00023	33 d2		 xor	 edx, edx
  00025	e8 00 00 00 00	 call	 gz_comp
  0002a	83 f8 ff	 cmp	 eax, -1
  0002d	74 75		 je	 SHORT $LN11@gz_zero
$LN4@gz_zero:

; 155  :         return -1;
; 156  : 
; 157  :     /* compress len zeros (len guaranteed > 0) */
; 158  :     first = 1;

  0002f	bd 01 00 00 00	 mov	 ebp, 1

; 159  :     while (len) {

  00034	48 85 ff	 test	 rdi, rdi
  00037	74 54		 je	 SHORT $LN3@gz_zero
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@gz_zero:

; 160  :         n = GT_OFF(state->size) || (z_off64_t)state->size > len ?

  00040	8b 43 28	 mov	 eax, DWORD PTR [rbx+40]

; 161  :             (unsigned)len : state->size;
; 162  :         if (first) {

  00043	48 3b c7	 cmp	 rax, rdi
  00046	0f 4f c7	 cmovg	 eax, edi
  00049	8b f0		 mov	 esi, eax
  0004b	85 ed		 test	 ebp, ebp
  0004d	74 10		 je	 SHORT $LN14@gz_zero

; 163  :             memset(state->in, 0, n);

  0004f	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00053	44 8b c6	 mov	 r8d, esi
  00056	33 d2		 xor	 edx, edx
  00058	e8 00 00 00 00	 call	 memset

; 164  :             first = 0;

  0005d	33 ed		 xor	 ebp, ebp
$LN14@gz_zero:

; 165  :         }
; 166  :         strm->avail_in = n;

  0005f	89 b3 80 00 00
	00		 mov	 DWORD PTR [rbx+128], esi
  00065	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  0006a	48 8b c3	 mov	 rax, rbx

; 167  :         strm->next_in = state->in;
; 168  :         state->x.pos += n;
; 169  :         if (gz_comp(state, Z_NO_FLUSH) == -1)

  0006d	33 d2		 xor	 edx, edx
  0006f	48 8b 04 19	 mov	 rax, QWORD PTR [rcx+rbx]
  00073	48 8b cb	 mov	 rcx, rbx
  00076	48 89 43 78	 mov	 QWORD PTR [rbx+120], rax
  0007a	48 01 73 10	 add	 QWORD PTR [rbx+16], rsi
  0007e	e8 00 00 00 00	 call	 gz_comp
  00083	83 f8 ff	 cmp	 eax, -1
  00086	74 1c		 je	 SHORT $LN11@gz_zero

; 171  :         len -= n;

  00088	48 2b fe	 sub	 rdi, rsi
  0008b	75 b3		 jne	 SHORT $LL2@gz_zero
$LN3@gz_zero:

; 172  :     }
; 173  :     return 0;

  0008d	33 c0		 xor	 eax, eax
$LN1@gz_zero:

; 174  : }

  0008f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00094	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00099	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a2	5f		 pop	 rdi
  000a3	c3		 ret	 0
$LN11@gz_zero:

; 170  :             return -1;

  000a4	b8 ff ff ff ff	 mov	 eax, -1
  000a9	eb e4		 jmp	 SHORT $LN1@gz_zero
gz_zero	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\cpython\externals\zlib-1.2.11\gzwrite.c
;	COMDAT gz_write
_TEXT	SEGMENT
state$ = 48
buf$ = 56
len$ = 64
gz_write PROC						; COMDAT

; 182  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001a	49 8b f0	 mov	 rsi, r8
  0001d	48 8b ea	 mov	 rbp, rdx
  00020	48 8b d9	 mov	 rbx, rcx

; 183  :     z_size_t put = len;

  00023	4d 8b f0	 mov	 r14, r8

; 184  : 
; 185  :     /* if len is zero, avoid unnecessary operations */
; 186  :     if (len == 0)

  00026	4d 85 c0	 test	 r8, r8
  00029	0f 84 9c 00 00
	00		 je	 $LN25@gz_write

; 187  :         return 0;
; 188  : 
; 189  :     /* allocate memory if this is the first time through */
; 190  :     if (state->size == 0 && gz_init(state) == -1)

  0002f	83 79 28 00	 cmp	 DWORD PTR [rcx+40], 0
  00033	75 0e		 jne	 SHORT $LN32@gz_write
  00035	e8 00 00 00 00	 call	 gz_init
  0003a	83 f8 ff	 cmp	 eax, -1
  0003d	0f 84 88 00 00
	00		 je	 $LN25@gz_write
$LN32@gz_write:

; 191  :         return 0;
; 192  : 
; 193  :     /* check for seek request */
; 194  :     if (state->seek) {

  00043	83 7b 68 00	 cmp	 DWORD PTR [rbx+104], 0
  00047	74 18		 je	 SHORT $LN11@gz_write

; 195  :         state->seek = 0;
; 196  :         if (gz_zero(state, state->skip) == -1)

  00049	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  0004d	48 8b cb	 mov	 rcx, rbx
  00050	c7 43 68 00 00
	00 00		 mov	 DWORD PTR [rbx+104], 0
  00057	e8 00 00 00 00	 call	 gz_zero
  0005c	83 f8 ff	 cmp	 eax, -1
  0005f	74 6a		 je	 SHORT $LN25@gz_write
$LN11@gz_write:

; 197  :             return 0;
; 198  :     }
; 199  : 
; 200  :     /* for small len, copy to input buffer, otherwise compress directly */
; 201  :     if (len < state->size) {

  00061	8b 43 28	 mov	 eax, DWORD PTR [rbx+40]
  00064	48 3b f0	 cmp	 rsi, rax
  00067	73 7f		 jae	 SHORT $LN12@gz_write
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@gz_write:

; 202  :         /* copy to input buffer, compress when full */
; 203  :         do {
; 204  :             unsigned have, copy;
; 205  : 
; 206  :             if (state->strm.avail_in == 0)

  00070	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]
  00076	85 c9		 test	 ecx, ecx
  00078	75 08		 jne	 SHORT $LN29@gz_write

; 207  :                 state->strm.next_in = state->in;

  0007a	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  0007e	48 89 43 78	 mov	 QWORD PTR [rbx+120], rax
$LN29@gz_write:

; 208  :             have = (unsigned)((state->strm.next_in + state->strm.avail_in) -

  00082	8b 53 78	 mov	 edx, DWORD PTR [rbx+120]

; 209  :                               state->in);
; 210  :             copy = state->size - have;
; 211  :             if (copy > len)
; 212  :                 copy = len;
; 213  :             memcpy(state->in + have, buf, copy);

  00085	8b c6		 mov	 eax, esi
  00087	2b 53 30	 sub	 edx, DWORD PTR [rbx+48]
  0008a	03 d1		 add	 edx, ecx
  0008c	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]
  0008f	2b ca		 sub	 ecx, edx
  00091	48 3b ce	 cmp	 rcx, rsi
  00094	0f 46 c1	 cmovbe	 eax, ecx
  00097	8b ca		 mov	 ecx, edx
  00099	48 03 4b 30	 add	 rcx, QWORD PTR [rbx+48]
  0009d	48 8b d5	 mov	 rdx, rbp
  000a0	44 8b c0	 mov	 r8d, eax
  000a3	8b f8		 mov	 edi, eax
  000a5	e8 00 00 00 00	 call	 memcpy

; 214  :             state->strm.avail_in += copy;

  000aa	01 bb 80 00 00
	00		 add	 DWORD PTR [rbx+128], edi

; 215  :             state->x.pos += copy;
; 216  :             buf = (const char *)buf + copy;

  000b0	48 03 ef	 add	 rbp, rdi
  000b3	48 01 7b 10	 add	 QWORD PTR [rbx+16], rdi

; 217  :             len -= copy;

  000b7	48 2b f7	 sub	 rsi, rdi

; 218  :             if (len && gz_comp(state, Z_NO_FLUSH) == -1)

  000ba	74 7c		 je	 SHORT $LN6@gz_write
  000bc	33 d2		 xor	 edx, edx
  000be	48 8b cb	 mov	 rcx, rbx
  000c1	e8 00 00 00 00	 call	 gz_comp
  000c6	83 f8 ff	 cmp	 eax, -1
  000c9	75 a5		 jne	 SHORT $LL4@gz_write
$LN25@gz_write:

; 236  :                 return 0;

  000cb	33 c0		 xor	 eax, eax
$LN1@gz_write:

; 243  : }

  000cd	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000d2	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000d7	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000dc	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000e1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e5	41 5e		 pop	 r14
  000e7	c3		 ret	 0
$LN12@gz_write:

; 219  :                 return 0;
; 220  :         } while (len);
; 221  :     }
; 222  :     else {
; 223  :         /* consume whatever's left in the input buffer */
; 224  :         if (state->strm.avail_in && gz_comp(state, Z_NO_FLUSH) == -1)

  000e8	83 bb 80 00 00
	00 00		 cmp	 DWORD PTR [rbx+128], 0
  000ef	74 0f		 je	 SHORT $LN17@gz_write
  000f1	33 d2		 xor	 edx, edx
  000f3	48 8b cb	 mov	 rcx, rbx
  000f6	e8 00 00 00 00	 call	 gz_comp
  000fb	83 f8 ff	 cmp	 eax, -1
  000fe	74 cb		 je	 SHORT $LN25@gz_write
$LN17@gz_write:

; 225  :             return 0;
; 226  : 
; 227  :         /* directly compress user buffer to file */
; 228  :         state->strm.next_in = (z_const Bytef *)buf;

  00100	48 89 6b 78	 mov	 QWORD PTR [rbx+120], rbp
  00104	bd ff ff ff ff	 mov	 ebp, -1			; ffffffffH
  00109	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@gz_write:

; 229  :         do {
; 230  :             unsigned n = (unsigned)-1;
; 231  :             if (n > len)

  00110	8b cd		 mov	 ecx, ebp
  00112	48 3b f5	 cmp	 rsi, rbp
  00115	0f 42 ce	 cmovb	 ecx, esi

; 232  :                 n = len;
; 233  :             state->strm.avail_in = n;
; 234  :             state->x.pos += n;
; 235  :             if (gz_comp(state, Z_NO_FLUSH) == -1)

  00118	33 d2		 xor	 edx, edx
  0011a	8b f9		 mov	 edi, ecx
  0011c	48 01 7b 10	 add	 QWORD PTR [rbx+16], rdi
  00120	89 8b 80 00 00
	00		 mov	 DWORD PTR [rbx+128], ecx
  00126	48 8b cb	 mov	 rcx, rbx
  00129	e8 00 00 00 00	 call	 gz_comp
  0012e	83 f8 ff	 cmp	 eax, -1
  00131	74 98		 je	 SHORT $LN25@gz_write

; 237  :             len -= n;

  00133	48 2b f7	 sub	 rsi, rdi

; 238  :         } while (len);

  00136	75 d8		 jne	 SHORT $LL7@gz_write
$LN6@gz_write:

; 239  :     }
; 240  : 
; 241  :     /* input was all buffered or compressed */
; 242  :     return put;

  00138	49 8b c6	 mov	 rax, r14
  0013b	eb 90		 jmp	 SHORT $LN1@gz_write
gz_write ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\cpython\externals\zlib-1.2.11\gzwrite.c
;	COMDAT gzwrite
_TEXT	SEGMENT
file$ = 48
buf$ = 56
len$ = 64
gzwrite	PROC						; COMDAT

; 250  : {

$LN9:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 251  :     gz_statep state;
; 252  : 
; 253  :     /* get internal structure */
; 254  :     if (file == NULL)

  00004	48 85 c9	 test	 rcx, rcx
  00007	74 25		 je	 SHORT $LN4@gzwrite

; 255  :         return 0;
; 256  :     state = (gz_statep)file;
; 257  : 
; 258  :     /* check that we're writing and that there's no error */
; 259  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00009	81 79 18 b1 79
	00 00		 cmp	 DWORD PTR [rcx+24], 31153 ; 000079b1H
  00010	75 1c		 jne	 SHORT $LN4@gzwrite
  00012	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  00016	75 16		 jne	 SHORT $LN4@gzwrite

; 260  :         return 0;
; 261  : 
; 262  :     /* since an int is returned, make sure len fits in one, otherwise return
; 263  :        with an error (this avoids a flaw in the interface) */
; 264  :     if ((int)len < 0) {

  00018	45 85 c0	 test	 r8d, r8d
  0001b	79 18		 jns	 SHORT $LN5@gzwrite

; 265  :         gz_error(state, Z_DATA_ERROR, "requested length does not fit in int");

  0001d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5i@
  00024	ba fd ff ff ff	 mov	 edx, -3
  00029	e8 00 00 00 00	 call	 gz_error
$LN4@gzwrite:

; 271  : }

  0002e	33 c0		 xor	 eax, eax
  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00034	c3		 ret	 0
$LN5@gzwrite:

; 266  :         return 0;
; 267  :     }
; 268  : 
; 269  :     /* write len bytes from buf (the return value will fit in an int) */
; 270  :     return (int)gz_write(state, buf, len);

  00035	45 8b c0	 mov	 r8d, r8d

; 271  : }

  00038	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 266  :         return 0;
; 267  :     }
; 268  : 
; 269  :     /* write len bytes from buf (the return value will fit in an int) */
; 270  :     return (int)gz_write(state, buf, len);

  0003c	e9 00 00 00 00	 jmp	 gz_write
gzwrite	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\cpython\externals\zlib-1.2.11\gzwrite.c
;	COMDAT gzfwrite
_TEXT	SEGMENT
buf$ = 48
size$ = 56
nitems$ = 64
file$ = 72
gzfwrite PROC						; COMDAT

; 279  : {

$LN11:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	4d 8b d0	 mov	 r10, r8
  00009	48 8b da	 mov	 rbx, rdx

; 280  :     z_size_t len;
; 281  :     gz_statep state;
; 282  : 
; 283  :     /* get internal structure */
; 284  :     if (file == NULL)

  0000c	4d 85 c9	 test	 r9, r9
  0000f	74 3e		 je	 SHORT $LN4@gzfwrite

; 285  :         return 0;
; 286  :     state = (gz_statep)file;
; 287  : 
; 288  :     /* check that we're writing and that there's no error */
; 289  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00011	41 81 79 18 b1
	79 00 00	 cmp	 DWORD PTR [r9+24], 31153 ; 000079b1H
  00019	75 34		 jne	 SHORT $LN4@gzfwrite
  0001b	41 83 79 6c 00	 cmp	 DWORD PTR [r9+108], 0
  00020	75 2d		 jne	 SHORT $LN4@gzfwrite

; 290  :         return 0;
; 291  : 
; 292  :     /* compute bytes to read -- error on overflow */
; 293  :     len = nitems * size;

  00022	4c 8b c2	 mov	 r8, rdx
  00025	4d 0f af c2	 imul	 r8, r10

; 294  :     if (size && len / size != nitems) {

  00029	48 85 d2	 test	 rdx, rdx
  0002c	74 29		 je	 SHORT $LN5@gzfwrite
  0002e	33 d2		 xor	 edx, edx
  00030	49 8b c0	 mov	 rax, r8
  00033	48 f7 f3	 div	 rbx
  00036	49 3b c2	 cmp	 rax, r10
  00039	74 1c		 je	 SHORT $LN5@gzfwrite

; 295  :         gz_error(state, Z_STREAM_ERROR, "request does not fit in a size_t");

  0003b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CB@EGGJDMIK@request?5does?5not?5fit?5in?5a?5size_@
  00042	ba fe ff ff ff	 mov	 edx, -2
  00047	49 8b c9	 mov	 rcx, r9
  0004a	e8 00 00 00 00	 call	 gz_error
$LN4@gzfwrite:

; 301  : }

  0004f	33 c0		 xor	 eax, eax
  00051	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00055	5b		 pop	 rbx
  00056	c3		 ret	 0
$LN5@gzfwrite:

; 296  :         return 0;
; 297  :     }
; 298  : 
; 299  :     /* write len bytes to buf, return the number of full items written */
; 300  :     return len ? gz_write(state, buf, len) / size : 0;

  00057	4d 85 c0	 test	 r8, r8
  0005a	74 f3		 je	 SHORT $LN4@gzfwrite
  0005c	48 8b d1	 mov	 rdx, rcx
  0005f	49 8b c9	 mov	 rcx, r9
  00062	e8 00 00 00 00	 call	 gz_write
  00067	33 d2		 xor	 edx, edx
  00069	48 f7 f3	 div	 rbx

; 301  : }

  0006c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00070	5b		 pop	 rbx
  00071	c3		 ret	 0
gzfwrite ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\cpython\externals\zlib-1.2.11\gzwrite.c
;	COMDAT gzputc
_TEXT	SEGMENT
buf$ = 48
file$ = 48
c$ = 56
gzputc	PROC						; COMDAT

; 307  : {

$LN18:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	8b fa		 mov	 edi, edx
  0000c	48 8b d9	 mov	 rbx, rcx

; 308  :     unsigned have;
; 309  :     unsigned char buf[1];
; 310  :     gz_statep state;
; 311  :     z_streamp strm;
; 312  : 
; 313  :     /* get internal structure */
; 314  :     if (file == NULL)

  0000f	48 85 c9	 test	 rcx, rcx
  00012	0f 84 9c 00 00
	00		 je	 $LN4@gzputc

; 315  :         return -1;
; 316  :     state = (gz_statep)file;
; 317  :     strm = &(state->strm);
; 318  : 
; 319  :     /* check that we're writing and that there's no error */
; 320  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00018	81 79 18 b1 79
	00 00		 cmp	 DWORD PTR [rcx+24], 31153 ; 000079b1H
  0001f	0f 85 8f 00 00
	00		 jne	 $LN4@gzputc
  00025	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  00029	0f 85 85 00 00
	00		 jne	 $LN4@gzputc

; 322  : 
; 323  :     /* check for seek request */
; 324  :     if (state->seek) {

  0002f	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  00033	74 15		 je	 SHORT $LN6@gzputc

; 325  :         state->seek = 0;
; 326  :         if (gz_zero(state, state->skip) == -1)

  00035	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00039	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [rcx+104], 0
  00040	e8 00 00 00 00	 call	 gz_zero
  00045	83 f8 ff	 cmp	 eax, -1
  00048	74 6a		 je	 SHORT $LN4@gzputc
$LN6@gzputc:

; 327  :             return -1;
; 328  :     }
; 329  : 
; 330  :     /* try writing to input buffer for speed (state->size == 0 if buffer not
; 331  :        initialized) */
; 332  :     if (state->size) {

  0004a	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]
  0004d	85 c9		 test	 ecx, ecx
  0004f	74 41		 je	 SHORT $LN9@gzputc

; 333  :         if (strm->avail_in == 0)

  00051	8b 93 80 00 00
	00		 mov	 edx, DWORD PTR [rbx+128]
  00057	85 d2		 test	 edx, edx
  00059	75 08		 jne	 SHORT $LN13@gzputc

; 334  :             strm->next_in = state->in;

  0005b	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  0005f	48 89 43 78	 mov	 QWORD PTR [rbx+120], rax
$LN13@gzputc:

; 335  :         have = (unsigned)((strm->next_in + strm->avail_in) - state->in);

  00063	8b 43 78	 mov	 eax, DWORD PTR [rbx+120]
  00066	2b 43 30	 sub	 eax, DWORD PTR [rbx+48]
  00069	03 c2		 add	 eax, edx

; 336  :         if (have < state->size) {

  0006b	3b c1		 cmp	 eax, ecx
  0006d	73 23		 jae	 SHORT $LN9@gzputc

; 337  :             state->in[have] = (unsigned char)c;

  0006f	8b c8		 mov	 ecx, eax
  00071	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  00075	40 88 3c 01	 mov	 BYTE PTR [rcx+rax], dil

; 338  :             strm->avail_in++;

  00079	ff 83 80 00 00
	00		 inc	 DWORD PTR [rbx+128]

; 339  :             state->x.pos++;

  0007f	48 ff 43 10	 inc	 QWORD PTR [rbx+16]

; 340  :             return c & 0xff;

  00083	40 0f b6 c7	 movzx	 eax, dil

; 349  : }

  00087	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0008c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00090	5f		 pop	 rdi
  00091	c3		 ret	 0
$LN9@gzputc:

; 341  :         }
; 342  :     }
; 343  : 
; 344  :     /* no room in buffer or not initialized, use gz_write() */
; 345  :     buf[0] = (unsigned char)c;
; 346  :     if (gz_write(state, buf, 1) != 1)

  00092	41 b8 01 00 00
	00		 mov	 r8d, 1
  00098	40 88 7c 24 30	 mov	 BYTE PTR buf$[rsp], dil
  0009d	48 8d 54 24 30	 lea	 rdx, QWORD PTR buf$[rsp]
  000a2	48 8b cb	 mov	 rcx, rbx
  000a5	e8 00 00 00 00	 call	 gz_write
  000aa	48 83 f8 01	 cmp	 rax, 1

; 347  :         return -1;
; 348  :     return c & 0xff;

  000ae	40 0f b6 c7	 movzx	 eax, dil
  000b2	74 05		 je	 SHORT $LN1@gzputc
$LN4@gzputc:

; 321  :         return -1;

  000b4	b8 ff ff ff ff	 mov	 eax, -1
$LN1@gzputc:

; 349  : }

  000b9	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000be	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c2	5f		 pop	 rdi
  000c3	c3		 ret	 0
gzputc	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\cpython\externals\zlib-1.2.11\gzwrite.c
;	COMDAT gzputs
_TEXT	SEGMENT
file$ = 48
str$ = 56
gzputs	PROC						; COMDAT

; 355  : {

$LN11:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 356  :     int ret;
; 357  :     z_size_t len;
; 358  :     gz_statep state;
; 359  : 
; 360  :     /* get internal structure */
; 361  :     if (file == NULL)

  00006	48 85 c9	 test	 rcx, rcx
  00009	74 4e		 je	 SHORT $LN4@gzputs

; 362  :         return -1;
; 363  :     state = (gz_statep)file;
; 364  : 
; 365  :     /* check that we're writing and that there's no error */
; 366  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  0000b	81 79 18 b1 79
	00 00		 cmp	 DWORD PTR [rcx+24], 31153 ; 000079b1H
  00012	75 45		 jne	 SHORT $LN4@gzputs
  00014	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  00018	75 3f		 jne	 SHORT $LN4@gzputs

; 368  : 
; 369  :     /* write string */
; 370  :     len = strlen(str);

  0001a	48 c7 c7 ff ff
	ff ff		 mov	 rdi, -1
  00021	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00026	48 8b df	 mov	 rbx, rdi
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@gzputs:
  00030	48 ff c3	 inc	 rbx
  00033	80 3c 1a 00	 cmp	 BYTE PTR [rdx+rbx], 0
  00037	75 f7		 jne	 SHORT $LL9@gzputs

; 371  :     ret = gz_write(state, str, len);

  00039	4c 8b c3	 mov	 r8, rbx
  0003c	e8 00 00 00 00	 call	 gz_write

; 372  :     return ret == 0 && len != 0 ? -1 : ret;

  00041	85 c0		 test	 eax, eax
  00043	75 05		 jne	 SHORT $LN6@gzputs
  00045	48 85 db	 test	 rbx, rbx
  00048	75 02		 jne	 SHORT $LN7@gzputs
$LN6@gzputs:
  0004a	8b f8		 mov	 edi, eax
$LN7@gzputs:
  0004c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00051	8b c7		 mov	 eax, edi

; 373  : }

  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
$LN4@gzputs:

; 367  :         return -1;

  00059	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1

; 373  : }

  00060	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00064	5f		 pop	 rdi
  00065	c3		 ret	 0
gzputs	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\cpython\externals\zlib-1.2.11\gzwrite.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
; File C:\cpython\externals\zlib-1.2.11\gzwrite.c
;	COMDAT gzvprintf
_TEXT	SEGMENT
file$ = 64
format$ = 72
va$ = 80
gzvprintf PROC						; COMDAT

; 380  : {

$LN25:
  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000a	41 56		 push	 r14
  0000c	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00010	49 8b e8	 mov	 rbp, r8
  00013	4c 8b f2	 mov	 r14, rdx
  00016	48 8b f9	 mov	 rdi, rcx

; 381  :     int len;
; 382  :     unsigned left;
; 383  :     char *next;
; 384  :     gz_statep state;
; 385  :     z_streamp strm;
; 386  : 
; 387  :     /* get internal structure */
; 388  :     if (file == NULL)

  00019	48 85 c9	 test	 rcx, rcx
  0001c	0f 84 4b 01 00
	00		 je	 $LN4@gzvprintf

; 389  :         return Z_STREAM_ERROR;
; 390  :     state = (gz_statep)file;
; 391  :     strm = &(state->strm);
; 392  : 
; 393  :     /* check that we're writing and that there's no error */
; 394  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00022	81 79 18 b1 79
	00 00		 cmp	 DWORD PTR [rcx+24], 31153 ; 000079b1H
  00029	0f 85 3e 01 00
	00		 jne	 $LN4@gzvprintf
  0002f	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  00033	0f 85 34 01 00
	00		 jne	 $LN4@gzvprintf

; 395  :         return Z_STREAM_ERROR;
; 396  : 
; 397  :     /* make sure we have some buffer space */
; 398  :     if (state->size == 0 && gz_init(state) == -1)

  00039	83 79 28 00	 cmp	 DWORD PTR [rcx+40], 0
  0003d	75 1e		 jne	 SHORT $LN18@gzvprintf
  0003f	e8 00 00 00 00	 call	 gz_init
  00044	83 f8 ff	 cmp	 eax, -1
  00047	75 14		 jne	 SHORT $LN18@gzvprintf
$LN23@gzvprintf:

; 449  : }

  00049	8b 47 6c	 mov	 eax, DWORD PTR [rdi+108]
  0004c	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00051	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  00056	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005a	41 5e		 pop	 r14
  0005c	c3		 ret	 0
$LN18@gzvprintf:

; 399  :         return state->err;
; 400  : 
; 401  :     /* check for seek request */
; 402  :     if (state->seek) {

  0005d	83 7f 68 00	 cmp	 DWORD PTR [rdi+104], 0
  00061	74 18		 je	 SHORT $LN7@gzvprintf

; 403  :         state->seek = 0;
; 404  :         if (gz_zero(state, state->skip) == -1)

  00063	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  00067	48 8b cf	 mov	 rcx, rdi
  0006a	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [rdi+104], 0
  00071	e8 00 00 00 00	 call	 gz_zero
  00076	83 f8 ff	 cmp	 eax, -1
  00079	74 ce		 je	 SHORT $LN23@gzvprintf
$LN7@gzvprintf:

; 405  :             return state->err;
; 406  :     }
; 407  : 
; 408  :     /* do the printf() into the input buffer, put length in len -- the input
; 409  :        buffer is double-sized just for this function, so there is guaranteed to
; 410  :        be state->size bytes available after the current contents */
; 411  :     if (strm->avail_in == 0)

  0007b	8b 8f 80 00 00
	00		 mov	 ecx, DWORD PTR [rdi+128]
  00081	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00086	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  0008b	85 c9		 test	 ecx, ecx
  0008d	75 08		 jne	 SHORT $LN19@gzvprintf

; 412  :         strm->next_in = state->in;

  0008f	48 8b 47 30	 mov	 rax, QWORD PTR [rdi+48]
  00093	48 89 47 78	 mov	 QWORD PTR [rdi+120], rax
$LN19@gzvprintf:

; 413  :     next = (char *)(state->in + (strm->next_in - state->in) + strm->avail_in);
; 414  :     next[state->size - 1] = 0;

  00097	8b 47 28	 mov	 eax, DWORD PTR [rdi+40]
  0009a	48 8b f1	 mov	 rsi, rcx
  0009d	48 03 77 78	 add	 rsi, QWORD PTR [rdi+120]
  000a1	ff c8		 dec	 eax
  000a3	c6 04 30 00	 mov	 BYTE PTR [rax+rsi], 0

; 415  : #ifdef NO_vsnprintf
; 416  : #  ifdef HAS_vsprintf_void
; 417  :     (void)vsprintf(next, format, va);
; 418  :     for (len = 0; len < state->size; len++)
; 419  :         if (next[len] == 0) break;
; 420  : #  else
; 421  :     len = vsprintf(next, format, va);
; 422  : #  endif
; 423  : #else
; 424  : #  ifdef HAS_vsnprintf_void
; 425  :     (void)vsnprintf(next, state->size, format, va);
; 426  :     len = strlen(next);
; 427  : #  else
; 428  :     len = vsnprintf(next, state->size, format, va);

  000a7	8b 5f 28	 mov	 ebx, DWORD PTR [rdi+40]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h

; 1439 :         int const _Result = __stdio_common_vsprintf(

  000aa	e8 00 00 00 00	 call	 __local_stdio_printf_options
  000af	48 89 6c 24 28	 mov	 QWORD PTR [rsp+40], rbp
  000b4	4d 8b ce	 mov	 r9, r14
  000b7	44 8b c3	 mov	 r8d, ebx
  000ba	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000c3	48 8b d6	 mov	 rdx, rsi
  000c6	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000c9	48 83 c9 02	 or	 rcx, 2
  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf
  000d3	8b d8		 mov	 ebx, eax

; 1440 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1441 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1442 : 
; 1443 :         return _Result < 0 ? -1 : _Result;

  000d5	b8 ff ff ff ff	 mov	 eax, -1
  000da	85 db		 test	 ebx, ebx
  000dc	0f 48 d8	 cmovs	 ebx, eax
; File C:\cpython\externals\zlib-1.2.11\gzwrite.c

; 433  :     if (len == 0 || (unsigned)len >= state->size || next[state->size - 1] != 0)

  000df	85 db		 test	 ebx, ebx
  000e1	0f 84 82 00 00
	00		 je	 $LN10@gzvprintf
  000e7	8b 47 28	 mov	 eax, DWORD PTR [rdi+40]
  000ea	3b d8		 cmp	 ebx, eax
  000ec	73 7b		 jae	 SHORT $LN10@gzvprintf
  000ee	ff c8		 dec	 eax
  000f0	80 3c 30 00	 cmp	 BYTE PTR [rax+rsi], 0
  000f4	75 73		 jne	 SHORT $LN10@gzvprintf

; 435  : 
; 436  :     /* update buffer and position, compress first half if past that */
; 437  :     strm->avail_in += (unsigned)len;

  000f6	01 9f 80 00 00
	00		 add	 DWORD PTR [rdi+128], ebx

; 438  :     state->x.pos += len;

  000fc	48 63 c3	 movsxd	 rax, ebx
  000ff	48 01 47 10	 add	 QWORD PTR [rdi+16], rax

; 439  :     if (strm->avail_in >= state->size) {

  00103	8b b7 80 00 00
	00		 mov	 esi, DWORD PTR [rdi+128]
  00109	8b 47 28	 mov	 eax, DWORD PTR [rdi+40]
  0010c	3b f0		 cmp	 esi, eax
  0010e	72 55		 jb	 SHORT $LN11@gzvprintf

; 440  :         left = strm->avail_in - state->size;
; 441  :         strm->avail_in = state->size;
; 442  :         if (gz_comp(state, Z_NO_FLUSH) == -1)

  00110	33 d2		 xor	 edx, edx
  00112	89 87 80 00 00
	00		 mov	 DWORD PTR [rdi+128], eax
  00118	48 8b cf	 mov	 rcx, rdi
  0011b	2b f0		 sub	 esi, eax
  0011d	e8 00 00 00 00	 call	 gz_comp
  00122	83 f8 ff	 cmp	 eax, -1
  00125	75 1e		 jne	 SHORT $LN12@gzvprintf

; 443  :             return state->err;

  00127	8b 47 6c	 mov	 eax, DWORD PTR [rdi+108]
$LN22@gzvprintf:
  0012a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0012f	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]

; 449  : }

  00134	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00139	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0013e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00142	41 5e		 pop	 r14
  00144	c3		 ret	 0
$LN12@gzvprintf:

; 444  :         memcpy(state->in, state->in + state->size, left);

  00145	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  00149	8b 57 28	 mov	 edx, DWORD PTR [rdi+40]
  0014c	48 03 d1	 add	 rdx, rcx
  0014f	44 8b c6	 mov	 r8d, esi
  00152	e8 00 00 00 00	 call	 memcpy

; 445  :         strm->next_in = state->in;

  00157	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  0015b	48 89 4f 78	 mov	 QWORD PTR [rdi+120], rcx

; 446  :         strm->avail_in = left;

  0015f	89 b7 80 00 00
	00		 mov	 DWORD PTR [rdi+128], esi
$LN11@gzvprintf:

; 447  :     }
; 448  :     return len;

  00165	8b c3		 mov	 eax, ebx
  00167	eb c1		 jmp	 SHORT $LN22@gzvprintf
$LN10@gzvprintf:

; 434  :         return 0;

  00169	33 c0		 xor	 eax, eax
  0016b	eb bd		 jmp	 SHORT $LN22@gzvprintf
$LN4@gzvprintf:

; 449  : }

  0016d	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00172	b8 fe ff ff ff	 mov	 eax, -2
  00177	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0017c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00180	41 5e		 pop	 r14
  00182	c3		 ret	 0
gzvprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\cpython\externals\zlib-1.2.11\gzwrite.c
;	COMDAT gzprintf
_TEXT	SEGMENT
file$ = 48
format$ = 56
gzprintf PROC						; COMDAT

; 452  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 453  :     va_list va;
; 454  :     int ret;
; 455  : 
; 456  :     va_start(va, format);

  00013	4c 8d 44 24 40	 lea	 r8, QWORD PTR format$[rsp+8]

; 457  :     ret = gzvprintf(file, format, va);

  00018	e8 00 00 00 00	 call	 gzvprintf

; 458  :     va_end(va);
; 459  :     return ret;
; 460  : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
gzprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\cpython\externals\zlib-1.2.11\gzwrite.c
;	COMDAT gzflush
_TEXT	SEGMENT
file$ = 48
flush$ = 56
gzflush	PROC						; COMDAT

; 556  : {

$LN15:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	8b fa		 mov	 edi, edx
  0000c	48 8b d9	 mov	 rbx, rcx

; 557  :     gz_statep state;
; 558  : 
; 559  :     /* get internal structure */
; 560  :     if (file == NULL)

  0000f	48 85 c9	 test	 rcx, rcx
  00012	74 47		 je	 SHORT $LN4@gzflush

; 561  :         return Z_STREAM_ERROR;
; 562  :     state = (gz_statep)file;
; 563  : 
; 564  :     /* check that we're writing and that there's no error */
; 565  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00014	81 79 18 b1 79
	00 00		 cmp	 DWORD PTR [rcx+24], 31153 ; 000079b1H
  0001b	75 3e		 jne	 SHORT $LN4@gzflush
  0001d	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  00021	75 38		 jne	 SHORT $LN4@gzflush

; 566  :         return Z_STREAM_ERROR;
; 567  : 
; 568  :     /* check flush parameter */
; 569  :     if (flush < 0 || flush > Z_FINISH)

  00023	83 fa 04	 cmp	 edx, 4
  00026	77 33		 ja	 SHORT $LN4@gzflush

; 570  :         return Z_STREAM_ERROR;
; 571  : 
; 572  :     /* check for seek request */
; 573  :     if (state->seek) {

  00028	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  0002c	74 15		 je	 SHORT $LN11@gzflush

; 574  :         state->seek = 0;
; 575  :         if (gz_zero(state, state->skip) == -1)

  0002e	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00032	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [rcx+104], 0
  00039	e8 00 00 00 00	 call	 gz_zero
  0003e	83 f8 ff	 cmp	 eax, -1
  00041	74 0a		 je	 SHORT $LN13@gzflush
$LN11@gzflush:

; 576  :             return state->err;
; 577  :     }
; 578  : 
; 579  :     /* compress remaining data with requested flush */
; 580  :     (void)gz_comp(state, flush);

  00043	8b d7		 mov	 edx, edi
  00045	48 8b cb	 mov	 rcx, rbx
  00048	e8 00 00 00 00	 call	 gz_comp
$LN13@gzflush:

; 581  :     return state->err;
; 582  : }

  0004d	8b 43 6c	 mov	 eax, DWORD PTR [rbx+108]
  00050	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00055	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00059	5f		 pop	 rdi
  0005a	c3		 ret	 0
$LN4@gzflush:
  0005b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00060	b8 fe ff ff ff	 mov	 eax, -2
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
gzflush	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\cpython\externals\zlib-1.2.11\gzwrite.c
;	COMDAT gzsetparams
_TEXT	SEGMENT
file$ = 48
level$ = 56
strategy$ = 64
gzsetparams PROC					; COMDAT

; 589  : {

$LN18:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f8	 mov	 edi, r8d
  00017	8b f2		 mov	 esi, edx
  00019	48 8b d9	 mov	 rbx, rcx

; 590  :     gz_statep state;
; 591  :     z_streamp strm;
; 592  : 
; 593  :     /* get internal structure */
; 594  :     if (file == NULL)

  0001c	48 85 c9	 test	 rcx, rcx
  0001f	74 73		 je	 SHORT $LN4@gzsetparam

; 595  :         return Z_STREAM_ERROR;
; 596  :     state = (gz_statep)file;
; 597  :     strm = &(state->strm);
; 598  : 
; 599  :     /* check that we're writing and that there's no error */
; 600  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00021	81 79 18 b1 79
	00 00		 cmp	 DWORD PTR [rcx+24], 31153 ; 000079b1H
  00028	75 6a		 jne	 SHORT $LN4@gzsetparam
  0002a	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  0002e	75 64		 jne	 SHORT $LN4@gzsetparam

; 602  : 
; 603  :     /* if no change is requested, then do nothing */
; 604  :     if (level == state->level && strategy == state->strategy)

  00030	3b 51 58	 cmp	 edx, DWORD PTR [rcx+88]
  00033	75 06		 jne	 SHORT $LN13@gzsetparam
  00035	44 3b 41 5c	 cmp	 r8d, DWORD PTR [rcx+92]
  00039	74 55		 je	 SHORT $LN15@gzsetparam
$LN13@gzsetparam:

; 605  :         return Z_OK;
; 606  : 
; 607  :     /* check for seek request */
; 608  :     if (state->seek) {

  0003b	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  0003f	74 1a		 je	 SHORT $LN12@gzsetparam

; 609  :         state->seek = 0;
; 610  :         if (gz_zero(state, state->skip) == -1)

  00041	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00045	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [rcx+104], 0
  0004c	e8 00 00 00 00	 call	 gz_zero
  00051	83 f8 ff	 cmp	 eax, -1
  00054	75 05		 jne	 SHORT $LN12@gzsetparam
$LN16@gzsetparam:

; 623  :     return Z_OK;
; 624  : }

  00056	8b 43 6c	 mov	 eax, DWORD PTR [rbx+108]
  00059	eb 3e		 jmp	 SHORT $LN1@gzsetparam
$LN12@gzsetparam:

; 611  :             return state->err;
; 612  :     }
; 613  : 
; 614  :     /* change compression parameters for subsequent input */
; 615  :     if (state->size) {

  0005b	83 7b 28 00	 cmp	 DWORD PTR [rbx+40], 0
  0005f	74 29		 je	 SHORT $LN8@gzsetparam

; 616  :         /* flush previous input with previous parameters before changing */
; 617  :         if (strm->avail_in && gz_comp(state, Z_BLOCK) == -1)

  00061	83 bb 80 00 00
	00 00		 cmp	 DWORD PTR [rbx+128], 0
  00068	74 12		 je	 SHORT $LN9@gzsetparam
  0006a	ba 05 00 00 00	 mov	 edx, 5
  0006f	48 8b cb	 mov	 rcx, rbx
  00072	e8 00 00 00 00	 call	 gz_comp
  00077	83 f8 ff	 cmp	 eax, -1
  0007a	74 da		 je	 SHORT $LN16@gzsetparam
$LN9@gzsetparam:

; 618  :             return state->err;
; 619  :         deflateParams(strm, level, strategy);

  0007c	44 8b c7	 mov	 r8d, edi
  0007f	48 8d 4b 78	 lea	 rcx, QWORD PTR [rbx+120]
  00083	8b d6		 mov	 edx, esi
  00085	e8 00 00 00 00	 call	 deflateParams
$LN8@gzsetparam:

; 620  :     }
; 621  :     state->level = level;

  0008a	89 73 58	 mov	 DWORD PTR [rbx+88], esi

; 622  :     state->strategy = strategy;

  0008d	89 7b 5c	 mov	 DWORD PTR [rbx+92], edi
$LN15@gzsetparam:

; 623  :     return Z_OK;
; 624  : }

  00090	33 c0		 xor	 eax, eax
  00092	eb 05		 jmp	 SHORT $LN1@gzsetparam
$LN4@gzsetparam:

; 601  :         return Z_STREAM_ERROR;

  00094	b8 fe ff ff ff	 mov	 eax, -2
$LN1@gzsetparam:

; 623  :     return Z_OK;
; 624  : }

  00099	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009e	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000a3	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000a8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ac	5f		 pop	 rdi
  000ad	c3		 ret	 0
gzsetparams ENDP
_TEXT	ENDS
END
