"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const AWS = require('aws-sdk');
const db = new AWS.DynamoDB.DocumentClient();
const TABLE_NAME = process.env.TABLE_NAME || '';
const PRIMARY_KEY = process.env.PRIMARY_KEY || '';
const RESERVED_RESPONSE = `Error: You're using AWS reserved keywords as attributes`, DYNAMODB_EXECUTION_ERROR = `Error: Execution update, caused a Dynamodb error, please take a look at your CloudWatch Logs.`;
exports.handler = async (event = {}) => {
    if (!event.body) {
        return { statusCode: 400, body: 'invalid request, you are missing the parameter body' };
    }
    const editedItemId = event.pathParameters.id;
    if (!editedItemId) {
        return { statusCode: 400, body: 'invalid request, you are missing the path parameter id' };
    }
    const editedItem = typeof event.body == 'object' ? event.body : JSON.parse(event.body);
    const editedItemProperties = Object.keys(editedItem);
    if (!editedItem || editedItemProperties.length < 1) {
        return { statusCode: 400, body: 'invalid request, no arguments provided' };
    }
    const firstProperty = editedItemProperties.splice(0, 1);
    const params = {
        TableName: TABLE_NAME,
        Key: {
            [PRIMARY_KEY]: editedItemId
        },
        UpdateExpression: `set ${firstProperty} = :${firstProperty}`,
        ExpressionAttributeValues: {},
        ReturnValues: 'UPDATED_NEW'
    };
    params.ExpressionAttributeValues[`:${firstProperty}`] = editedItem[`${firstProperty}`];
    editedItemProperties.forEach(property => {
        params.UpdateExpression += `, ${property} = :${property}`;
        params.ExpressionAttributeValues[`:${property}`] = editedItem[property];
    });
    try {
        await db.update(params).promise();
        return { statusCode: 204, body: '' };
    }
    catch (dbError) {
        const errorResponse = dbError.code === 'ValidationException' && dbError.message.includes('reserved keyword') ?
            DYNAMODB_EXECUTION_ERROR : RESERVED_RESPONSE;
        return { statusCode: 500, body: errorResponse };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLW9uZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVwZGF0ZS1vbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLE1BQU0sRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUM3QyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUM7QUFDaEQsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO0FBRWxELE1BQU0saUJBQWlCLEdBQUcseURBQXlELEVBQ2pGLHdCQUF3QixHQUFHLCtGQUErRixDQUFDO0FBRWhILFFBQUEsT0FBTyxHQUFHLEtBQUssRUFBRSxRQUFhLEVBQUUsRUFBa0IsRUFBRTtJQUUvRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtRQUNmLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxxREFBcUQsRUFBRSxDQUFDO0tBQ3pGO0lBRUQsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUM7SUFDN0MsSUFBSSxDQUFDLFlBQVksRUFBRTtRQUNqQixPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsd0RBQXdELEVBQUUsQ0FBQztLQUM1RjtJQUVELE1BQU0sVUFBVSxHQUFRLE9BQU8sS0FBSyxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVGLE1BQU0sb0JBQW9CLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNyRCxJQUFJLENBQUMsVUFBVSxJQUFJLG9CQUFvQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDaEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLHdDQUF3QyxFQUFFLENBQUM7S0FDOUU7SUFFRCxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sTUFBTSxHQUFRO1FBQ2hCLFNBQVMsRUFBRSxVQUFVO1FBQ3JCLEdBQUcsRUFBRTtZQUNILENBQUMsV0FBVyxDQUFDLEVBQUUsWUFBWTtTQUM1QjtRQUNELGdCQUFnQixFQUFFLE9BQU8sYUFBYSxPQUFPLGFBQWEsRUFBRTtRQUM1RCx5QkFBeUIsRUFBRSxFQUFFO1FBQzdCLFlBQVksRUFBRSxhQUFhO0tBQzlCLENBQUE7SUFDRCxNQUFNLENBQUMseUJBQXlCLENBQUMsSUFBSSxhQUFhLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxHQUFHLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFFdkYsb0JBQW9CLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ3BDLE1BQU0sQ0FBQyxnQkFBZ0IsSUFBSSxLQUFLLFFBQVEsT0FBTyxRQUFRLEVBQUUsQ0FBQztRQUMxRCxNQUFNLENBQUMseUJBQXlCLENBQUMsSUFBSSxRQUFRLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM1RSxDQUFDLENBQUMsQ0FBQztJQUVILElBQUk7UUFDRixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDbEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDO0tBQ3RDO0lBQUMsT0FBTyxPQUFPLEVBQUU7UUFDaEIsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLElBQUksS0FBSyxxQkFBcUIsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7WUFDOUcsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO1FBQzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsQ0FBQztLQUNqRDtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKTtcclxuY29uc3QgZGIgPSBuZXcgQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50KCk7XHJcbmNvbnN0IFRBQkxFX05BTUUgPSBwcm9jZXNzLmVudi5UQUJMRV9OQU1FIHx8ICcnO1xyXG5jb25zdCBQUklNQVJZX0tFWSA9IHByb2Nlc3MuZW52LlBSSU1BUllfS0VZIHx8ICcnO1xyXG5cclxuY29uc3QgUkVTRVJWRURfUkVTUE9OU0UgPSBgRXJyb3I6IFlvdSdyZSB1c2luZyBBV1MgcmVzZXJ2ZWQga2V5d29yZHMgYXMgYXR0cmlidXRlc2AsXHJcbiAgRFlOQU1PREJfRVhFQ1VUSU9OX0VSUk9SID0gYEVycm9yOiBFeGVjdXRpb24gdXBkYXRlLCBjYXVzZWQgYSBEeW5hbW9kYiBlcnJvciwgcGxlYXNlIHRha2UgYSBsb29rIGF0IHlvdXIgQ2xvdWRXYXRjaCBMb2dzLmA7XHJcblxyXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudDogYW55ID0ge30pIDogUHJvbWlzZSA8YW55PiA9PiB7XHJcblxyXG4gIGlmICghZXZlbnQuYm9keSkge1xyXG4gICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogNDAwLCBib2R5OiAnaW52YWxpZCByZXF1ZXN0LCB5b3UgYXJlIG1pc3NpbmcgdGhlIHBhcmFtZXRlciBib2R5JyB9O1xyXG4gIH1cclxuXHJcbiAgY29uc3QgZWRpdGVkSXRlbUlkID0gZXZlbnQucGF0aFBhcmFtZXRlcnMuaWQ7XHJcbiAgaWYgKCFlZGl0ZWRJdGVtSWQpIHtcclxuICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDQwMCwgYm9keTogJ2ludmFsaWQgcmVxdWVzdCwgeW91IGFyZSBtaXNzaW5nIHRoZSBwYXRoIHBhcmFtZXRlciBpZCcgfTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGVkaXRlZEl0ZW06IGFueSA9IHR5cGVvZiBldmVudC5ib2R5ID09ICdvYmplY3QnID8gZXZlbnQuYm9keSA6IEpTT04ucGFyc2UoZXZlbnQuYm9keSk7XHJcbiAgY29uc3QgZWRpdGVkSXRlbVByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhlZGl0ZWRJdGVtKTtcclxuICBpZiAoIWVkaXRlZEl0ZW0gfHwgZWRpdGVkSXRlbVByb3BlcnRpZXMubGVuZ3RoIDwgMSkge1xyXG4gICAgICByZXR1cm4geyBzdGF0dXNDb2RlOiA0MDAsIGJvZHk6ICdpbnZhbGlkIHJlcXVlc3QsIG5vIGFyZ3VtZW50cyBwcm92aWRlZCcgfTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGZpcnN0UHJvcGVydHkgPSBlZGl0ZWRJdGVtUHJvcGVydGllcy5zcGxpY2UoMCwxKTtcclxuICBjb25zdCBwYXJhbXM6IGFueSA9IHtcclxuICAgICAgVGFibGVOYW1lOiBUQUJMRV9OQU1FLFxyXG4gICAgICBLZXk6IHtcclxuICAgICAgICBbUFJJTUFSWV9LRVldOiBlZGl0ZWRJdGVtSWRcclxuICAgICAgfSxcclxuICAgICAgVXBkYXRlRXhwcmVzc2lvbjogYHNldCAke2ZpcnN0UHJvcGVydHl9ID0gOiR7Zmlyc3RQcm9wZXJ0eX1gLFxyXG4gICAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7fSxcclxuICAgICAgUmV0dXJuVmFsdWVzOiAnVVBEQVRFRF9ORVcnXHJcbiAgfVxyXG4gIHBhcmFtcy5FeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzW2A6JHtmaXJzdFByb3BlcnR5fWBdID0gZWRpdGVkSXRlbVtgJHtmaXJzdFByb3BlcnR5fWBdO1xyXG5cclxuICBlZGl0ZWRJdGVtUHJvcGVydGllcy5mb3JFYWNoKHByb3BlcnR5ID0+IHtcclxuICAgICAgcGFyYW1zLlVwZGF0ZUV4cHJlc3Npb24gKz0gYCwgJHtwcm9wZXJ0eX0gPSA6JHtwcm9wZXJ0eX1gO1xyXG4gICAgICBwYXJhbXMuRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1tgOiR7cHJvcGVydHl9YF0gPSBlZGl0ZWRJdGVtW3Byb3BlcnR5XTtcclxuICB9KTtcclxuXHJcbiAgdHJ5IHtcclxuICAgIGF3YWl0IGRiLnVwZGF0ZShwYXJhbXMpLnByb21pc2UoKTtcclxuICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDIwNCwgYm9keTogJycgfTtcclxuICB9IGNhdGNoIChkYkVycm9yKSB7XHJcbiAgICBjb25zdCBlcnJvclJlc3BvbnNlID0gZGJFcnJvci5jb2RlID09PSAnVmFsaWRhdGlvbkV4Y2VwdGlvbicgJiYgZGJFcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdyZXNlcnZlZCBrZXl3b3JkJykgP1xyXG4gICAgRFlOQU1PREJfRVhFQ1VUSU9OX0VSUk9SIDogUkVTRVJWRURfUkVTUE9OU0U7XHJcbiAgICByZXR1cm4geyBzdGF0dXNDb2RlOiA1MDAsIGJvZHk6IGVycm9yUmVzcG9uc2UgfTtcclxuICB9XHJcbn07XHJcbiJdfQ==